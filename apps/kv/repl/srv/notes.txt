- [ ] Integrate sessrv's use of reply table and thread manager in replsrv

func (ssrv *SessSrv) srvfcall(fc *sessp.FcallMsg) {
	defer ssrv.qlen.Dec()
	// If this was a server-generated heartbeat message, heartbeat all of the
	// contained sessions, and then return immediately (no further processing is
	// necessary).
	s := sessp.Tsession(fc.Fc.Session)
	if s == 0 {
		ssrv.st.ProcessHeartbeats(fc.Msg.(*sp.Theartbeat))
		return
	}
	// If this is a replicated op received through raft (not
	// directly from a client), the first time Alloc is called
	// will be in this function, so the conn will be set to
	// nil. If it came from the client, the conn will already be
	// set.
	sess := ssrv.st.Alloc(sessp.Tclient(fc.Fc.Client), s)
	// Reply cache needs to live under the replication layer in order to
	// handle duplicate requests. These may occur if, for example:
	//
	// 1. A client connects to replica A and issues a request.
	// 2. Replica A pushes the request through raft.
	// 3. Before responding to the client, replica A crashes.
	// 4. The client connects to replica B, and retries the request *before*
	//    replica B hears about the request through raft.
	// 5. Replica B pushes the request through raft.
	// 6. Replica B now receives the same request twice through raft's apply
	//    channel, and will try to execute the request twice.
	//
	// In order to handle this, we can use the reply cache to deduplicate
	// requests. Since requests execute sequentially, one of the requests will
	// register itself first in the reply cache. The other request then just
	// has to wait on the reply future in order to send the reply. This can
	// happen asynchronously since it doesn't affect server state, and the

	// make progress. We coulld optionally use sessconds, but they're kind of
	// overkill since we don't care about ordering in this case.
	if replyFuture, ok := sess.GetReplyTable().Get(fc.Fc); ok {
		db.DPrintf(db.SESSSRV, "srvfcall %v reply in cache", fc)
		go func() {
			ssrv.sendReply(fc, replyFuture.Await(), sess)
		}()
		return
	}
	db.DPrintf(db.SESSSRV, "srvfcall %v reply not in cache", fc)
	if ok := sess.GetReplyTable().Register(fc); ok {
		db.DPrintf(db.REPLY_TABLE, "table: %v", sess.GetReplyTable())
		qlen := ssrv.QueueLen()
		ssrv.stats.Stats().Inc(fc.Msg.Type(), qlen)
		ssrv.serve(sess, fc)    // NOTE: must call sess.GetThread().Process(fc)
	} else {
		db.DPrintf(db.SESSSRV, "srvfcall %v duplicate request dropped", fc)
	}
}

