package mr

import (
	"bufio"
	"fmt"

	"github.com/dustin/go-humanize"

	sp "sigmaos/sigmap"
)

// Map and reduce functions produce and consume KeyValue pairs
type KeyValue struct {
	Key   string
	Value string
}

type EmitT func(key []byte, value string) error

// The mr library calls the reduce function once for each key
// generated by the map tasks, with a list of all the values created
// for that key by any map task.
type ReduceT func(string, []string, EmitT) error

// The mr library calls the map function for each line of input, which
// is passed in as an io.Reader.  The map function outputs its values
// by calling an emit function and passing it a KeyValue.
type MapT func(string, *bufio.Scanner, EmitT) error

// An input split
type Split struct {
	File   string     `json:"File"`
	Offset sp.Toffset `json:"Offset"`
	Length sp.Tlength `json:"Length"`
}

func (s Split) String() string {
	return fmt.Sprintf("{f %s o %v l %v}", s.File, humanize.Bytes(uint64(s.Offset)), humanize.Bytes(uint64(s.Length)))
}
