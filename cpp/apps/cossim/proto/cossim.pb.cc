// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cossim.proto

#include "cossim.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Vector::Vector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_CONSTEXPR CosSimReq::CosSimReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputvec_)*/{}
  , /*decltype(_impl_.n_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosSimReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosSimReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosSimReqDefaultTypeInternal() {}
  union {
    CosSimReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosSimReqDefaultTypeInternal _CosSimReq_default_instance_;
PROTOBUF_CONSTEXPR CosSimRep::CosSimRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.val_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosSimRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosSimRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosSimRepDefaultTypeInternal() {}
  union {
    CosSimRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosSimRepDefaultTypeInternal _CosSimRep_default_instance_;
static ::_pb::Metadata file_level_metadata_cossim_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cossim_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cossim_2eproto = nullptr;

const uint32_t TableStruct_cossim_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector, _impl_.vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CosSimReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CosSimReq, _impl_.inputvec_),
  PROTOBUF_FIELD_OFFSET(::CosSimReq, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CosSimRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CosSimRep, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CosSimRep, _impl_.val_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Vector)},
  { 7, -1, -1, sizeof(::CosSimReq)},
  { 15, -1, -1, sizeof(::CosSimRep)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Vector_default_instance_._instance,
  &::_CosSimReq_default_instance_._instance,
  &::_CosSimRep_default_instance_._instance,
};

const char descriptor_table_protodef_cossim_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014cossim.proto\"\026\n\006Vector\022\014\n\004vals\030\001 \003(\001\"("
  "\n\tCosSimReq\022\020\n\010inputVec\030\001 \003(\001\022\t\n\001n\030\002 \001(\003"
  "\"$\n\tCosSimRep\022\n\n\002iD\030\001 \001(\004\022\013\n\003val\030\002 \001(\00121"
  "\n\rCosSimService\022 \n\006CosSim\022\n.CosSimReq\032\n."
  "CosSimRepB\033Z\031sigmaos/apps/cossim/protob\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_cossim_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cossim_2eproto = {
    false, false, 206, descriptor_table_protodef_cossim_2eproto,
    "cossim.proto",
    &descriptor_table_cossim_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_cossim_2eproto::offsets,
    file_level_metadata_cossim_2eproto, file_level_enum_descriptors_cossim_2eproto,
    file_level_service_descriptors_cossim_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cossim_2eproto_getter() {
  return &descriptor_table_cossim_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cossim_2eproto(&descriptor_table_cossim_2eproto);

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){from._impl_.vals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Vector)
}

inline void Vector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:Vector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vals_.~RepeatedField();
}

void Vector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector::GetClassData() const { return &_class_data_; }


void Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector*>(&to_msg);
  auto& from = static_cast<const Vector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cossim_2eproto_getter, &descriptor_table_cossim_2eproto_once,
      file_level_metadata_cossim_2eproto[0]);
}

// ===================================================================

class CosSimReq::_Internal {
 public:
};

CosSimReq::CosSimReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CosSimReq)
}
CosSimReq::CosSimReq(const CosSimReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosSimReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputvec_){from._impl_.inputvec_}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.n_ = from._impl_.n_;
  // @@protoc_insertion_point(copy_constructor:CosSimReq)
}

inline void CosSimReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputvec_){arena}
    , decltype(_impl_.n_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CosSimReq::~CosSimReq() {
  // @@protoc_insertion_point(destructor:CosSimReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosSimReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputvec_.~RepeatedField();
}

void CosSimReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosSimReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CosSimReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputvec_.Clear();
  _impl_.n_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosSimReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double inputVec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inputvec(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_inputvec(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CosSimReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CosSimReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double inputVec = 1;
  if (this->_internal_inputvec_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_inputvec(), target);
  }

  // int64 n = 2;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CosSimReq)
  return target;
}

size_t CosSimReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CosSimReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double inputVec = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inputvec_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int64 n = 2;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosSimReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosSimReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosSimReq::GetClassData() const { return &_class_data_; }


void CosSimReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosSimReq*>(&to_msg);
  auto& from = static_cast<const CosSimReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CosSimReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputvec_.MergeFrom(from._impl_.inputvec_);
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosSimReq::CopyFrom(const CosSimReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CosSimReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosSimReq::IsInitialized() const {
  return true;
}

void CosSimReq::InternalSwap(CosSimReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputvec_.InternalSwap(&other->_impl_.inputvec_);
  swap(_impl_.n_, other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosSimReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cossim_2eproto_getter, &descriptor_table_cossim_2eproto_once,
      file_level_metadata_cossim_2eproto[1]);
}

// ===================================================================

class CosSimRep::_Internal {
 public:
};

CosSimRep::CosSimRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CosSimRep)
}
CosSimRep::CosSimRep(const CosSimRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosSimRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:CosSimRep)
}

inline void CosSimRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.val_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CosSimRep::~CosSimRep() {
  // @@protoc_insertion_point(destructor:CosSimRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosSimRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CosSimRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosSimRep::Clear() {
// @@protoc_insertion_point(message_clear_start:CosSimRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.val_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosSimRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CosSimRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CosSimRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iD = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // double val = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_val = this->_internal_val();
  uint64_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CosSimRep)
  return target;
}

size_t CosSimRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CosSimRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iD = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // double val = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_val = this->_internal_val();
  uint64_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosSimRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosSimRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosSimRep::GetClassData() const { return &_class_data_; }


void CosSimRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosSimRep*>(&to_msg);
  auto& from = static_cast<const CosSimRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CosSimRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_val = from._internal_val();
  uint64_t raw_val;
  memcpy(&raw_val, &tmp_val, sizeof(tmp_val));
  if (raw_val != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosSimRep::CopyFrom(const CosSimRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CosSimRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosSimRep::IsInitialized() const {
  return true;
}

void CosSimRep::InternalSwap(CosSimRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosSimRep, _impl_.val_)
      + sizeof(CosSimRep::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(CosSimRep, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CosSimRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cossim_2eproto_getter, &descriptor_table_cossim_2eproto_once,
      file_level_metadata_cossim_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector*
Arena::CreateMaybeMessage< ::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::CosSimReq*
Arena::CreateMaybeMessage< ::CosSimReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CosSimReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CosSimRep*
Arena::CreateMaybeMessage< ::CosSimRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CosSimRep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
