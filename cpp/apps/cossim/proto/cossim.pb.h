// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cossim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cossim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cossim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cossim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cossim_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cossim_2eproto;
class CosSimRep;
struct CosSimRepDefaultTypeInternal;
extern CosSimRepDefaultTypeInternal _CosSimRep_default_instance_;
class CosSimReq;
struct CosSimReqDefaultTypeInternal;
extern CosSimReqDefaultTypeInternal _CosSimReq_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CosSimRep* Arena::CreateMaybeMessage<::CosSimRep>(Arena*);
template<> ::CosSimReq* Arena::CreateMaybeMessage<::CosSimReq>(Arena*);
template<> ::Vector* Arena::CreateMaybeMessage<::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit PROTOBUF_CONSTEXPR Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector& from) {
    Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated double vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  double _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vals() const;
  void _internal_add_vals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vals();
  public:
  double vals(int index) const;
  void set_vals(int index, double value);
  void add_vals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vals();

  // @@protoc_insertion_point(class_scope:Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cossim_2eproto;
};
// -------------------------------------------------------------------

class CosSimReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosSimReq) */ {
 public:
  inline CosSimReq() : CosSimReq(nullptr) {}
  ~CosSimReq() override;
  explicit PROTOBUF_CONSTEXPR CosSimReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CosSimReq(const CosSimReq& from);
  CosSimReq(CosSimReq&& from) noexcept
    : CosSimReq() {
    *this = ::std::move(from);
  }

  inline CosSimReq& operator=(const CosSimReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosSimReq& operator=(CosSimReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CosSimReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CosSimReq* internal_default_instance() {
    return reinterpret_cast<const CosSimReq*>(
               &_CosSimReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CosSimReq& a, CosSimReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CosSimReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosSimReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CosSimReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CosSimReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CosSimReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CosSimReq& from) {
    CosSimReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosSimReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosSimReq";
  }
  protected:
  explicit CosSimReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputVecFieldNumber = 1,
    kNFieldNumber = 2,
  };
  // repeated double inputVec = 1;
  int inputvec_size() const;
  private:
  int _internal_inputvec_size() const;
  public:
  void clear_inputvec();
  private:
  double _internal_inputvec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_inputvec() const;
  void _internal_add_inputvec(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_inputvec();
  public:
  double inputvec(int index) const;
  void set_inputvec(int index, double value);
  void add_inputvec(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      inputvec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_inputvec();

  // int64 n = 2;
  void clear_n();
  int64_t n() const;
  void set_n(int64_t value);
  private:
  int64_t _internal_n() const;
  void _internal_set_n(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CosSimReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inputvec_;
    int64_t n_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cossim_2eproto;
};
// -------------------------------------------------------------------

class CosSimRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CosSimRep) */ {
 public:
  inline CosSimRep() : CosSimRep(nullptr) {}
  ~CosSimRep() override;
  explicit PROTOBUF_CONSTEXPR CosSimRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CosSimRep(const CosSimRep& from);
  CosSimRep(CosSimRep&& from) noexcept
    : CosSimRep() {
    *this = ::std::move(from);
  }

  inline CosSimRep& operator=(const CosSimRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosSimRep& operator=(CosSimRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CosSimRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const CosSimRep* internal_default_instance() {
    return reinterpret_cast<const CosSimRep*>(
               &_CosSimRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CosSimRep& a, CosSimRep& b) {
    a.Swap(&b);
  }
  inline void Swap(CosSimRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosSimRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CosSimRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CosSimRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CosSimRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CosSimRep& from) {
    CosSimRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosSimRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CosSimRep";
  }
  protected:
  explicit CosSimRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // uint64 iD = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // double val = 2;
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:CosSimRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    double val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cossim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// repeated double vals = 1;
inline int Vector::_internal_vals_size() const {
  return _impl_.vals_.size();
}
inline int Vector::vals_size() const {
  return _internal_vals_size();
}
inline void Vector::clear_vals() {
  _impl_.vals_.Clear();
}
inline double Vector::_internal_vals(int index) const {
  return _impl_.vals_.Get(index);
}
inline double Vector::vals(int index) const {
  // @@protoc_insertion_point(field_get:Vector.vals)
  return _internal_vals(index);
}
inline void Vector::set_vals(int index, double value) {
  _impl_.vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:Vector.vals)
}
inline void Vector::_internal_add_vals(double value) {
  _impl_.vals_.Add(value);
}
inline void Vector::add_vals(double value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:Vector.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector::_internal_vals() const {
  return _impl_.vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector::vals() const {
  // @@protoc_insertion_point(field_list:Vector.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector::_internal_mutable_vals() {
  return &_impl_.vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:Vector.vals)
  return _internal_mutable_vals();
}

// -------------------------------------------------------------------

// CosSimReq

// repeated double inputVec = 1;
inline int CosSimReq::_internal_inputvec_size() const {
  return _impl_.inputvec_.size();
}
inline int CosSimReq::inputvec_size() const {
  return _internal_inputvec_size();
}
inline void CosSimReq::clear_inputvec() {
  _impl_.inputvec_.Clear();
}
inline double CosSimReq::_internal_inputvec(int index) const {
  return _impl_.inputvec_.Get(index);
}
inline double CosSimReq::inputvec(int index) const {
  // @@protoc_insertion_point(field_get:CosSimReq.inputVec)
  return _internal_inputvec(index);
}
inline void CosSimReq::set_inputvec(int index, double value) {
  _impl_.inputvec_.Set(index, value);
  // @@protoc_insertion_point(field_set:CosSimReq.inputVec)
}
inline void CosSimReq::_internal_add_inputvec(double value) {
  _impl_.inputvec_.Add(value);
}
inline void CosSimReq::add_inputvec(double value) {
  _internal_add_inputvec(value);
  // @@protoc_insertion_point(field_add:CosSimReq.inputVec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CosSimReq::_internal_inputvec() const {
  return _impl_.inputvec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CosSimReq::inputvec() const {
  // @@protoc_insertion_point(field_list:CosSimReq.inputVec)
  return _internal_inputvec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CosSimReq::_internal_mutable_inputvec() {
  return &_impl_.inputvec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CosSimReq::mutable_inputvec() {
  // @@protoc_insertion_point(field_mutable_list:CosSimReq.inputVec)
  return _internal_mutable_inputvec();
}

// int64 n = 2;
inline void CosSimReq::clear_n() {
  _impl_.n_ = int64_t{0};
}
inline int64_t CosSimReq::_internal_n() const {
  return _impl_.n_;
}
inline int64_t CosSimReq::n() const {
  // @@protoc_insertion_point(field_get:CosSimReq.n)
  return _internal_n();
}
inline void CosSimReq::_internal_set_n(int64_t value) {
  
  _impl_.n_ = value;
}
inline void CosSimReq::set_n(int64_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:CosSimReq.n)
}

// -------------------------------------------------------------------

// CosSimRep

// uint64 iD = 1;
inline void CosSimRep::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CosSimRep::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CosSimRep::id() const {
  // @@protoc_insertion_point(field_get:CosSimRep.iD)
  return _internal_id();
}
inline void CosSimRep::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CosSimRep::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CosSimRep.iD)
}

// double val = 2;
inline void CosSimRep::clear_val() {
  _impl_.val_ = 0;
}
inline double CosSimRep::_internal_val() const {
  return _impl_.val_;
}
inline double CosSimRep::val() const {
  // @@protoc_insertion_point(field_get:CosSimRep.val)
  return _internal_val();
}
inline void CosSimRep::_internal_set_val(double value) {
  
  _impl_.val_ = value;
}
inline void CosSimRep::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:CosSimRep.val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cossim_2eproto
