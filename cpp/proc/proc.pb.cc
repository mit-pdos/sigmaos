// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proc/proc.proto

#include "proc/proc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ProcSeqno::ProcSeqno(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.procqid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mschedid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.seqno_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcSeqnoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcSeqnoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcSeqnoDefaultTypeInternal() {}
  union {
    ProcSeqno _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcSeqnoDefaultTypeInternal _ProcSeqno_default_instance_;
PROTOBUF_CONSTEXPR ProcEnvProto_EtcdEndpointsEntry_DoNotUse::ProcEnvProto_EtcdEndpointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcEnvProto_EtcdEndpointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcEnvProto_EtcdEndpointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcEnvProto_EtcdEndpointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcEnvProto_EtcdEndpointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcEnvProto_EtcdEndpointsEntry_DoNotUseDefaultTypeInternal _ProcEnvProto_EtcdEndpointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcEnvProto_SecretsMapEntry_DoNotUse::ProcEnvProto_SecretsMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcEnvProto_SecretsMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcEnvProto_SecretsMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcEnvProto_SecretsMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcEnvProto_SecretsMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcEnvProto_SecretsMapEntry_DoNotUseDefaultTypeInternal _ProcEnvProto_SecretsMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcEnvProto_CachedEndpointsEntry_DoNotUse::ProcEnvProto_CachedEndpointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcEnvProto_CachedEndpointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcEnvProto_CachedEndpointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcEnvProto_CachedEndpointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcEnvProto_CachedEndpointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcEnvProto_CachedEndpointsEntry_DoNotUseDefaultTypeInternal _ProcEnvProto_CachedEndpointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcEnvProto::ProcEnvProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.etcdendpoints_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.secretsmap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sigmapath_)*/{}
  , /*decltype(_impl_.kernels_)*/{}
  , /*decltype(_impl_.cachedendpoints_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pidstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.program_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realmstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procdir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentdir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outercontaineripstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.innercontaineripstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kernelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buildtag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.perf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procdpidstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realmswitchstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valgrind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.principal_)*/nullptr
  , /*decltype(_impl_.spawntimepb_)*/nullptr
  , /*decltype(_impl_.howint_)*/0
  , /*decltype(_impl_.privileged_)*/false
  , /*decltype(_impl_.usespproxy_)*/false
  , /*decltype(_impl_.usedialproxy_)*/false
  , /*decltype(_impl_.runbootscriptflag_)*/false
  , /*decltype(_impl_.usespproxyprocclnt_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcEnvProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcEnvProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcEnvProtoDefaultTypeInternal() {}
  union {
    ProcEnvProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcEnvProtoDefaultTypeInternal _ProcEnvProto_default_instance_;
PROTOBUF_CONSTEXPR ProcProto_EnvEntry_DoNotUse::ProcProto_EnvEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcProto_EnvEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcProto_EnvEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcProto_EnvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcProto_EnvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcProto_EnvEntry_DoNotUseDefaultTypeInternal _ProcProto_EnvEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcProto::ProcProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.env_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.bootscript_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bootscriptinput_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procenvproto_)*/nullptr
  , /*decltype(_impl_.typeint_)*/0u
  , /*decltype(_impl_.mcpuint_)*/0u
  , /*decltype(_impl_.memint_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcProtoDefaultTypeInternal() {}
  union {
    ProcProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcProtoDefaultTypeInternal _ProcProto_default_instance_;
static ::_pb::Metadata file_level_metadata_proc_2fproc_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proc_2fproc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proc_2fproc_2eproto = nullptr;

const uint32_t TableStruct_proc_2fproc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcSeqno, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcSeqno, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::ProcSeqno, _impl_.seqno_),
  PROTOBUF_FIELD_OFFSET(::ProcSeqno, _impl_.procqid_),
  PROTOBUF_FIELD_OFFSET(::ProcSeqno, _impl_.mschedid_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_EtcdEndpointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_EtcdEndpointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_EtcdEndpointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_EtcdEndpointsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_SecretsMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_SecretsMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_SecretsMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_SecretsMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_CachedEndpointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_CachedEndpointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_CachedEndpointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto_CachedEndpointsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.pidstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.program_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.realmstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.principal_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.procdir_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.parentdir_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.etcdendpoints_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.outercontaineripstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.innercontaineripstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.kernelid_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.buildtag_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.perf_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.debug_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.procdpidstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.privileged_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.howint_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.spawntimepb_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.strace_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.usespproxy_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.usedialproxy_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.secretsmap_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.sigmapath_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.kernels_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.realmswitchstr_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.fail_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.cachedendpoints_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.valgrind_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.runbootscriptflag_),
  PROTOBUF_FIELD_OFFSET(::ProcEnvProto, _impl_.usespproxyprocclnt_),
  PROTOBUF_FIELD_OFFSET(::ProcProto_EnvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProcProto_EnvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcProto_EnvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ProcProto_EnvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.procenvproto_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.env_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.bootscript_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.bootscriptinput_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.typeint_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.mcpuint_),
  PROTOBUF_FIELD_OFFSET(::ProcProto, _impl_.memint_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProcSeqno)},
  { 10, 18, -1, sizeof(::ProcEnvProto_EtcdEndpointsEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::ProcEnvProto_SecretsMapEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::ProcEnvProto_CachedEndpointsEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::ProcEnvProto)},
  { 76, 84, -1, sizeof(::ProcProto_EnvEntry_DoNotUse)},
  { 86, -1, -1, sizeof(::ProcProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ProcSeqno_default_instance_._instance,
  &::_ProcEnvProto_EtcdEndpointsEntry_DoNotUse_default_instance_._instance,
  &::_ProcEnvProto_SecretsMapEntry_DoNotUse_default_instance_._instance,
  &::_ProcEnvProto_CachedEndpointsEntry_DoNotUse_default_instance_._instance,
  &::_ProcEnvProto_default_instance_._instance,
  &::_ProcProto_EnvEntry_DoNotUse_default_instance_._instance,
  &::_ProcProto_default_instance_._instance,
};

const char descriptor_table_protodef_proc_2fproc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017proc/proc.proto\032\037google/protobuf/times"
  "tamp.proto\032\023sigmap/sigmap.proto\"L\n\tProcS"
  "eqno\022\r\n\005epoch\030\001 \001(\004\022\r\n\005seqno\030\002 \001(\004\022\017\n\007pr"
  "ocqID\030\003 \001(\t\022\020\n\010mSchedID\030\004 \001(\t\"\302\007\n\014ProcEn"
  "vProto\022\016\n\006pidStr\030\001 \001(\t\022\017\n\007program\030\002 \001(\t\022"
  "\020\n\010realmStr\030\003 \001(\t\022\036\n\tprincipal\030\004 \001(\0132\013.T"
  "principal\022\017\n\007procDir\030\005 \001(\t\022\021\n\tparentDir\030"
  "\006 \001(\t\0227\n\retcdEndpoints\030\007 \003(\0132 .ProcEnvPr"
  "oto.EtcdEndpointsEntry\022\033\n\023outerContainer"
  "IPStr\030\010 \001(\t\022\033\n\023innerContainerIPStr\030\t \001(\t"
  "\022\020\n\010kernelID\030\n \001(\t\022\020\n\010buildTag\030\013 \001(\t\022\014\n\004"
  "perf\030\014 \001(\t\022\r\n\005debug\030\r \001(\t\022\023\n\013procdPIDStr"
  "\030\016 \001(\t\022\022\n\nprivileged\030\017 \001(\010\022\016\n\006howInt\030\020 \001"
  "(\005\022/\n\013spawnTimePB\030\021 \001(\0132\032.google.protobu"
  "f.Timestamp\022\016\n\006strace\030\022 \001(\t\022\022\n\nuseSPProx"
  "y\030\023 \001(\010\022\024\n\014useDialProxy\030\024 \001(\010\0221\n\nsecrets"
  "Map\030\025 \003(\0132\035.ProcEnvProto.SecretsMapEntry"
  "\022\021\n\tsigmaPath\030\026 \003(\t\022\017\n\007kernels\030\027 \003(\t\022\026\n\016"
  "realmSwitchStr\030\030 \001(\t\022\017\n\007version\030\031 \001(\t\022\014\n"
  "\004fail\030\032 \001(\t\022;\n\017cachedEndpoints\030\033 \003(\0132\".P"
  "rocEnvProto.CachedEndpointsEntry\022\020\n\010valg"
  "rind\030\034 \001(\t\022\031\n\021runBootScriptFlag\030\035 \001(\010\022\032\n"
  "\022useSPProxyProcClnt\030\036 \001(\010\032E\n\022EtcdEndpoin"
  "tsEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.Te"
  "ndpointProto:\0028\001\032\?\n\017SecretsMapEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.SecretProto:\0028"
  "\001\032G\n\024CachedEndpointsEntry\022\013\n\003key\030\001 \001(\t\022\036"
  "\n\005value\030\002 \001(\0132\017.TendpointProto:\0028\001\"\353\001\n\tP"
  "rocProto\022#\n\014procEnvProto\030\001 \001(\0132\r.ProcEnv"
  "Proto\022\014\n\004args\030\002 \003(\t\022 \n\003env\030\003 \003(\0132\023.ProcP"
  "roto.EnvEntry\022\022\n\nbootScript\030\004 \001(\014\022\027\n\017boo"
  "tScriptInput\030\005 \001(\014\022\017\n\007typeInt\030\006 \001(\r\022\017\n\007m"
  "cpuInt\030\007 \001(\r\022\016\n\006memInt\030\010 \001(\r\032*\n\010EnvEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\016Z\014sigm"
  "aos/procb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proc_2fproc_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sigmap_2fsigmap_2eproto,
};
static ::_pbi::once_flag descriptor_table_proc_2fproc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proc_2fproc_2eproto = {
    false, false, 1376, descriptor_table_protodef_proc_2fproc_2eproto,
    "proc/proc.proto",
    &descriptor_table_proc_2fproc_2eproto_once, descriptor_table_proc_2fproc_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_proc_2fproc_2eproto::offsets,
    file_level_metadata_proc_2fproc_2eproto, file_level_enum_descriptors_proc_2fproc_2eproto,
    file_level_service_descriptors_proc_2fproc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proc_2fproc_2eproto_getter() {
  return &descriptor_table_proc_2fproc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proc_2fproc_2eproto(&descriptor_table_proc_2fproc_2eproto);

// ===================================================================

class ProcSeqno::_Internal {
 public:
};

ProcSeqno::ProcSeqno(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProcSeqno)
}
ProcSeqno::ProcSeqno(const ProcSeqno& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcSeqno* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.procqid_){}
    , decltype(_impl_.mschedid_){}
    , decltype(_impl_.epoch_){}
    , decltype(_impl_.seqno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.procqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procqid().empty()) {
    _this->_impl_.procqid_.Set(from._internal_procqid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mschedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mschedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mschedid().empty()) {
    _this->_impl_.mschedid_.Set(from._internal_mschedid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.epoch_, &from._impl_.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:ProcSeqno)
}

inline void ProcSeqno::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.procqid_){}
    , decltype(_impl_.mschedid_){}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , decltype(_impl_.seqno_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.procqid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procqid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mschedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mschedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcSeqno::~ProcSeqno() {
  // @@protoc_insertion_point(destructor:ProcSeqno)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcSeqno::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.procqid_.Destroy();
  _impl_.mschedid_.Destroy();
}

void ProcSeqno::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcSeqno::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcSeqno)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.procqid_.ClearToEmpty();
  _impl_.mschedid_.ClearToEmpty();
  ::memset(&_impl_.epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seqno_) -
      reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.seqno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcSeqno::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seqno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string procqID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_procqid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcSeqno.procqID"));
        } else
          goto handle_unusual;
        continue;
      // string mSchedID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mschedid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcSeqno.mSchedID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcSeqno::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcSeqno)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  // uint64 seqno = 2;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seqno(), target);
  }

  // string procqID = 3;
  if (!this->_internal_procqid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procqid().data(), static_cast<int>(this->_internal_procqid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcSeqno.procqID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_procqid(), target);
  }

  // string mSchedID = 4;
  if (!this->_internal_mschedid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mschedid().data(), static_cast<int>(this->_internal_mschedid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcSeqno.mSchedID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mschedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcSeqno)
  return target;
}

size_t ProcSeqno::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcSeqno)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string procqID = 3;
  if (!this->_internal_procqid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procqid());
  }

  // string mSchedID = 4;
  if (!this->_internal_mschedid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mschedid());
  }

  // uint64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  // uint64 seqno = 2;
  if (this->_internal_seqno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seqno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcSeqno::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcSeqno::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcSeqno::GetClassData() const { return &_class_data_; }


void ProcSeqno::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcSeqno*>(&to_msg);
  auto& from = static_cast<const ProcSeqno&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProcSeqno)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_procqid().empty()) {
    _this->_internal_set_procqid(from._internal_procqid());
  }
  if (!from._internal_mschedid().empty()) {
    _this->_internal_set_mschedid(from._internal_mschedid());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_seqno() != 0) {
    _this->_internal_set_seqno(from._internal_seqno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcSeqno::CopyFrom(const ProcSeqno& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcSeqno)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcSeqno::IsInitialized() const {
  return true;
}

void ProcSeqno::InternalSwap(ProcSeqno* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procqid_, lhs_arena,
      &other->_impl_.procqid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mschedid_, lhs_arena,
      &other->_impl_.mschedid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcSeqno, _impl_.seqno_)
      + sizeof(ProcSeqno::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(ProcSeqno, _impl_.epoch_)>(
          reinterpret_cast<char*>(&_impl_.epoch_),
          reinterpret_cast<char*>(&other->_impl_.epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcSeqno::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[0]);
}

// ===================================================================

ProcEnvProto_EtcdEndpointsEntry_DoNotUse::ProcEnvProto_EtcdEndpointsEntry_DoNotUse() {}
ProcEnvProto_EtcdEndpointsEntry_DoNotUse::ProcEnvProto_EtcdEndpointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcEnvProto_EtcdEndpointsEntry_DoNotUse::MergeFrom(const ProcEnvProto_EtcdEndpointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcEnvProto_EtcdEndpointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[1]);
}

// ===================================================================

ProcEnvProto_SecretsMapEntry_DoNotUse::ProcEnvProto_SecretsMapEntry_DoNotUse() {}
ProcEnvProto_SecretsMapEntry_DoNotUse::ProcEnvProto_SecretsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcEnvProto_SecretsMapEntry_DoNotUse::MergeFrom(const ProcEnvProto_SecretsMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcEnvProto_SecretsMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[2]);
}

// ===================================================================

ProcEnvProto_CachedEndpointsEntry_DoNotUse::ProcEnvProto_CachedEndpointsEntry_DoNotUse() {}
ProcEnvProto_CachedEndpointsEntry_DoNotUse::ProcEnvProto_CachedEndpointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcEnvProto_CachedEndpointsEntry_DoNotUse::MergeFrom(const ProcEnvProto_CachedEndpointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcEnvProto_CachedEndpointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[3]);
}

// ===================================================================

class ProcEnvProto::_Internal {
 public:
  static const ::Tprincipal& principal(const ProcEnvProto* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& spawntimepb(const ProcEnvProto* msg);
};

const ::Tprincipal&
ProcEnvProto::_Internal::principal(const ProcEnvProto* msg) {
  return *msg->_impl_.principal_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ProcEnvProto::_Internal::spawntimepb(const ProcEnvProto* msg) {
  return *msg->_impl_.spawntimepb_;
}
void ProcEnvProto::clear_principal() {
  if (GetArenaForAllocation() == nullptr && _impl_.principal_ != nullptr) {
    delete _impl_.principal_;
  }
  _impl_.principal_ = nullptr;
}
void ProcEnvProto::clear_etcdendpoints() {
  _impl_.etcdendpoints_.Clear();
}
void ProcEnvProto::clear_spawntimepb() {
  if (GetArenaForAllocation() == nullptr && _impl_.spawntimepb_ != nullptr) {
    delete _impl_.spawntimepb_;
  }
  _impl_.spawntimepb_ = nullptr;
}
void ProcEnvProto::clear_secretsmap() {
  _impl_.secretsmap_.Clear();
}
void ProcEnvProto::clear_cachedendpoints() {
  _impl_.cachedendpoints_.Clear();
}
ProcEnvProto::ProcEnvProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcEnvProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ProcEnvProto)
}
ProcEnvProto::ProcEnvProto(const ProcEnvProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcEnvProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.etcdendpoints_)*/{}
    , /*decltype(_impl_.secretsmap_)*/{}
    , decltype(_impl_.sigmapath_){from._impl_.sigmapath_}
    , decltype(_impl_.kernels_){from._impl_.kernels_}
    , /*decltype(_impl_.cachedendpoints_)*/{}
    , decltype(_impl_.pidstr_){}
    , decltype(_impl_.program_){}
    , decltype(_impl_.realmstr_){}
    , decltype(_impl_.procdir_){}
    , decltype(_impl_.parentdir_){}
    , decltype(_impl_.outercontaineripstr_){}
    , decltype(_impl_.innercontaineripstr_){}
    , decltype(_impl_.kernelid_){}
    , decltype(_impl_.buildtag_){}
    , decltype(_impl_.perf_){}
    , decltype(_impl_.debug_){}
    , decltype(_impl_.procdpidstr_){}
    , decltype(_impl_.strace_){}
    , decltype(_impl_.realmswitchstr_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.fail_){}
    , decltype(_impl_.valgrind_){}
    , decltype(_impl_.principal_){nullptr}
    , decltype(_impl_.spawntimepb_){nullptr}
    , decltype(_impl_.howint_){}
    , decltype(_impl_.privileged_){}
    , decltype(_impl_.usespproxy_){}
    , decltype(_impl_.usedialproxy_){}
    , decltype(_impl_.runbootscriptflag_){}
    , decltype(_impl_.usespproxyprocclnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.etcdendpoints_.MergeFrom(from._impl_.etcdendpoints_);
  _this->_impl_.secretsmap_.MergeFrom(from._impl_.secretsmap_);
  _this->_impl_.cachedendpoints_.MergeFrom(from._impl_.cachedendpoints_);
  _impl_.pidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pidstr().empty()) {
    _this->_impl_.pidstr_.Set(from._internal_pidstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.program_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program().empty()) {
    _this->_impl_.program_.Set(from._internal_program(), 
      _this->GetArenaForAllocation());
  }
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realmstr().empty()) {
    _this->_impl_.realmstr_.Set(from._internal_realmstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.procdir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procdir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procdir().empty()) {
    _this->_impl_.procdir_.Set(from._internal_procdir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentdir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parentdir().empty()) {
    _this->_impl_.parentdir_.Set(from._internal_parentdir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outercontaineripstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outercontaineripstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outercontaineripstr().empty()) {
    _this->_impl_.outercontaineripstr_.Set(from._internal_outercontaineripstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.innercontaineripstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.innercontaineripstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_innercontaineripstr().empty()) {
    _this->_impl_.innercontaineripstr_.Set(from._internal_innercontaineripstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kernelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kernelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kernelid().empty()) {
    _this->_impl_.kernelid_.Set(from._internal_kernelid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buildtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buildtag().empty()) {
    _this->_impl_.buildtag_.Set(from._internal_buildtag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.perf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.perf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_perf().empty()) {
    _this->_impl_.perf_.Set(from._internal_perf(), 
      _this->GetArenaForAllocation());
  }
  _impl_.debug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_debug().empty()) {
    _this->_impl_.debug_.Set(from._internal_debug(), 
      _this->GetArenaForAllocation());
  }
  _impl_.procdpidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procdpidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procdpidstr().empty()) {
    _this->_impl_.procdpidstr_.Set(from._internal_procdpidstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.strace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strace().empty()) {
    _this->_impl_.strace_.Set(from._internal_strace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.realmswitchstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmswitchstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realmswitchstr().empty()) {
    _this->_impl_.realmswitchstr_.Set(from._internal_realmswitchstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fail().empty()) {
    _this->_impl_.fail_.Set(from._internal_fail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.valgrind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valgrind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valgrind().empty()) {
    _this->_impl_.valgrind_.Set(from._internal_valgrind(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_principal()) {
    _this->_impl_.principal_ = new ::Tprincipal(*from._impl_.principal_);
  }
  if (from._internal_has_spawntimepb()) {
    _this->_impl_.spawntimepb_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.spawntimepb_);
  }
  ::memcpy(&_impl_.howint_, &from._impl_.howint_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usespproxyprocclnt_) -
    reinterpret_cast<char*>(&_impl_.howint_)) + sizeof(_impl_.usespproxyprocclnt_));
  // @@protoc_insertion_point(copy_constructor:ProcEnvProto)
}

inline void ProcEnvProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.etcdendpoints_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.secretsmap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sigmapath_){arena}
    , decltype(_impl_.kernels_){arena}
    , /*decltype(_impl_.cachedendpoints_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.pidstr_){}
    , decltype(_impl_.program_){}
    , decltype(_impl_.realmstr_){}
    , decltype(_impl_.procdir_){}
    , decltype(_impl_.parentdir_){}
    , decltype(_impl_.outercontaineripstr_){}
    , decltype(_impl_.innercontaineripstr_){}
    , decltype(_impl_.kernelid_){}
    , decltype(_impl_.buildtag_){}
    , decltype(_impl_.perf_){}
    , decltype(_impl_.debug_){}
    , decltype(_impl_.procdpidstr_){}
    , decltype(_impl_.strace_){}
    , decltype(_impl_.realmswitchstr_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.fail_){}
    , decltype(_impl_.valgrind_){}
    , decltype(_impl_.principal_){nullptr}
    , decltype(_impl_.spawntimepb_){nullptr}
    , decltype(_impl_.howint_){0}
    , decltype(_impl_.privileged_){false}
    , decltype(_impl_.usespproxy_){false}
    , decltype(_impl_.usedialproxy_){false}
    , decltype(_impl_.runbootscriptflag_){false}
    , decltype(_impl_.usespproxyprocclnt_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.program_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.program_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.procdir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procdir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentdir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentdir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outercontaineripstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outercontaineripstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.innercontaineripstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.innercontaineripstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kernelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kernelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buildtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.perf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.perf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.debug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.procdpidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procdpidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realmswitchstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmswitchstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.valgrind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valgrind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcEnvProto::~ProcEnvProto() {
  // @@protoc_insertion_point(destructor:ProcEnvProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcEnvProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.etcdendpoints_.Destruct();
  _impl_.etcdendpoints_.~MapField();
  _impl_.secretsmap_.Destruct();
  _impl_.secretsmap_.~MapField();
  _impl_.sigmapath_.~RepeatedPtrField();
  _impl_.kernels_.~RepeatedPtrField();
  _impl_.cachedendpoints_.Destruct();
  _impl_.cachedendpoints_.~MapField();
  _impl_.pidstr_.Destroy();
  _impl_.program_.Destroy();
  _impl_.realmstr_.Destroy();
  _impl_.procdir_.Destroy();
  _impl_.parentdir_.Destroy();
  _impl_.outercontaineripstr_.Destroy();
  _impl_.innercontaineripstr_.Destroy();
  _impl_.kernelid_.Destroy();
  _impl_.buildtag_.Destroy();
  _impl_.perf_.Destroy();
  _impl_.debug_.Destroy();
  _impl_.procdpidstr_.Destroy();
  _impl_.strace_.Destroy();
  _impl_.realmswitchstr_.Destroy();
  _impl_.version_.Destroy();
  _impl_.fail_.Destroy();
  _impl_.valgrind_.Destroy();
  if (this != internal_default_instance()) delete _impl_.principal_;
  if (this != internal_default_instance()) delete _impl_.spawntimepb_;
}

void ProcEnvProto::ArenaDtor(void* object) {
  ProcEnvProto* _this = reinterpret_cast< ProcEnvProto* >(object);
  _this->_impl_.etcdendpoints_.Destruct();
  _this->_impl_.secretsmap_.Destruct();
  _this->_impl_.cachedendpoints_.Destruct();
}
void ProcEnvProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcEnvProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcEnvProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.etcdendpoints_.Clear();
  _impl_.secretsmap_.Clear();
  _impl_.sigmapath_.Clear();
  _impl_.kernels_.Clear();
  _impl_.cachedendpoints_.Clear();
  _impl_.pidstr_.ClearToEmpty();
  _impl_.program_.ClearToEmpty();
  _impl_.realmstr_.ClearToEmpty();
  _impl_.procdir_.ClearToEmpty();
  _impl_.parentdir_.ClearToEmpty();
  _impl_.outercontaineripstr_.ClearToEmpty();
  _impl_.innercontaineripstr_.ClearToEmpty();
  _impl_.kernelid_.ClearToEmpty();
  _impl_.buildtag_.ClearToEmpty();
  _impl_.perf_.ClearToEmpty();
  _impl_.debug_.ClearToEmpty();
  _impl_.procdpidstr_.ClearToEmpty();
  _impl_.strace_.ClearToEmpty();
  _impl_.realmswitchstr_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.fail_.ClearToEmpty();
  _impl_.valgrind_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.principal_ != nullptr) {
    delete _impl_.principal_;
  }
  _impl_.principal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spawntimepb_ != nullptr) {
    delete _impl_.spawntimepb_;
  }
  _impl_.spawntimepb_ = nullptr;
  ::memset(&_impl_.howint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usespproxyprocclnt_) -
      reinterpret_cast<char*>(&_impl_.howint_)) + sizeof(_impl_.usespproxyprocclnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcEnvProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pidStr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pidstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.pidStr"));
        } else
          goto handle_unusual;
        continue;
      // string program = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_program();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.program"));
        } else
          goto handle_unusual;
        continue;
      // string realmStr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_realmstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.realmStr"));
        } else
          goto handle_unusual;
        continue;
      // .Tprincipal principal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_principal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string procDir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_procdir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.procDir"));
        } else
          goto handle_unusual;
        continue;
      // string parentDir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_parentdir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.parentDir"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .TendpointProto> etcdEndpoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.etcdendpoints_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string outerContainerIPStr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_outercontaineripstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.outerContainerIPStr"));
        } else
          goto handle_unusual;
        continue;
      // string innerContainerIPStr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_innercontaineripstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.innerContainerIPStr"));
        } else
          goto handle_unusual;
        continue;
      // string kernelID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_kernelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.kernelID"));
        } else
          goto handle_unusual;
        continue;
      // string buildTag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_buildtag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.buildTag"));
        } else
          goto handle_unusual;
        continue;
      // string perf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_perf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.perf"));
        } else
          goto handle_unusual;
        continue;
      // string debug = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_debug();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.debug"));
        } else
          goto handle_unusual;
        continue;
      // string procdPIDStr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_procdpidstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.procdPIDStr"));
        } else
          goto handle_unusual;
        continue;
      // bool privileged = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.privileged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 howInt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.howint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp spawnTimePB = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawntimepb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strace = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_strace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.strace"));
        } else
          goto handle_unusual;
        continue;
      // bool useSPProxy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.usespproxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool useDialProxy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.usedialproxy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .SecretProto> secretsMap = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.secretsmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string sigmaPath = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_sigmapath();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.sigmaPath"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string kernels = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_kernels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.kernels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string realmSwitchStr = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_realmswitchstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.realmSwitchStr"));
        } else
          goto handle_unusual;
        continue;
      // string version = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.version"));
        } else
          goto handle_unusual;
        continue;
      // string fail = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_fail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.fail"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .TendpointProto> cachedEndpoints = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.cachedendpoints_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string valgrind = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_valgrind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcEnvProto.valgrind"));
        } else
          goto handle_unusual;
        continue;
      // bool runBootScriptFlag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.runbootscriptflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool useSPProxyProcClnt = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.usespproxyprocclnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcEnvProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcEnvProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pidStr = 1;
  if (!this->_internal_pidstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pidstr().data(), static_cast<int>(this->_internal_pidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.pidStr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pidstr(), target);
  }

  // string program = 2;
  if (!this->_internal_program().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program().data(), static_cast<int>(this->_internal_program().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.program");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_program(), target);
  }

  // string realmStr = 3;
  if (!this->_internal_realmstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realmstr().data(), static_cast<int>(this->_internal_realmstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.realmStr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_realmstr(), target);
  }

  // .Tprincipal principal = 4;
  if (this->_internal_has_principal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::principal(this),
        _Internal::principal(this).GetCachedSize(), target, stream);
  }

  // string procDir = 5;
  if (!this->_internal_procdir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procdir().data(), static_cast<int>(this->_internal_procdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.procDir");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_procdir(), target);
  }

  // string parentDir = 6;
  if (!this->_internal_parentdir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentdir().data(), static_cast<int>(this->_internal_parentdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.parentDir");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_parentdir(), target);
  }

  // map<string, .TendpointProto> etcdEndpoints = 7;
  if (!this->_internal_etcdendpoints().empty()) {
    using MapType = ::_pb::Map<std::string, ::TendpointProto>;
    using WireHelper = ProcEnvProto_EtcdEndpointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_etcdendpoints();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ProcEnvProto.EtcdEndpointsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string outerContainerIPStr = 8;
  if (!this->_internal_outercontaineripstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outercontaineripstr().data(), static_cast<int>(this->_internal_outercontaineripstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.outerContainerIPStr");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_outercontaineripstr(), target);
  }

  // string innerContainerIPStr = 9;
  if (!this->_internal_innercontaineripstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_innercontaineripstr().data(), static_cast<int>(this->_internal_innercontaineripstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.innerContainerIPStr");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_innercontaineripstr(), target);
  }

  // string kernelID = 10;
  if (!this->_internal_kernelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernelid().data(), static_cast<int>(this->_internal_kernelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.kernelID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_kernelid(), target);
  }

  // string buildTag = 11;
  if (!this->_internal_buildtag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildtag().data(), static_cast<int>(this->_internal_buildtag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.buildTag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_buildtag(), target);
  }

  // string perf = 12;
  if (!this->_internal_perf().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_perf().data(), static_cast<int>(this->_internal_perf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.perf");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_perf(), target);
  }

  // string debug = 13;
  if (!this->_internal_debug().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_debug().data(), static_cast<int>(this->_internal_debug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.debug");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_debug(), target);
  }

  // string procdPIDStr = 14;
  if (!this->_internal_procdpidstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procdpidstr().data(), static_cast<int>(this->_internal_procdpidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.procdPIDStr");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_procdpidstr(), target);
  }

  // bool privileged = 15;
  if (this->_internal_privileged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_privileged(), target);
  }

  // int32 howInt = 16;
  if (this->_internal_howint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_howint(), target);
  }

  // .google.protobuf.Timestamp spawnTimePB = 17;
  if (this->_internal_has_spawntimepb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::spawntimepb(this),
        _Internal::spawntimepb(this).GetCachedSize(), target, stream);
  }

  // string strace = 18;
  if (!this->_internal_strace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strace().data(), static_cast<int>(this->_internal_strace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.strace");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_strace(), target);
  }

  // bool useSPProxy = 19;
  if (this->_internal_usespproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_usespproxy(), target);
  }

  // bool useDialProxy = 20;
  if (this->_internal_usedialproxy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_usedialproxy(), target);
  }

  // map<string, .SecretProto> secretsMap = 21;
  if (!this->_internal_secretsmap().empty()) {
    using MapType = ::_pb::Map<std::string, ::SecretProto>;
    using WireHelper = ProcEnvProto_SecretsMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_secretsmap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ProcEnvProto.SecretsMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string sigmaPath = 22;
  for (int i = 0, n = this->_internal_sigmapath_size(); i < n; i++) {
    const auto& s = this->_internal_sigmapath(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.sigmaPath");
    target = stream->WriteString(22, s, target);
  }

  // repeated string kernels = 23;
  for (int i = 0, n = this->_internal_kernels_size(); i < n; i++) {
    const auto& s = this->_internal_kernels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.kernels");
    target = stream->WriteString(23, s, target);
  }

  // string realmSwitchStr = 24;
  if (!this->_internal_realmswitchstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realmswitchstr().data(), static_cast<int>(this->_internal_realmswitchstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.realmSwitchStr");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_realmswitchstr(), target);
  }

  // string version = 25;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.version");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_version(), target);
  }

  // string fail = 26;
  if (!this->_internal_fail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail().data(), static_cast<int>(this->_internal_fail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.fail");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_fail(), target);
  }

  // map<string, .TendpointProto> cachedEndpoints = 27;
  if (!this->_internal_cachedendpoints().empty()) {
    using MapType = ::_pb::Map<std::string, ::TendpointProto>;
    using WireHelper = ProcEnvProto_CachedEndpointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_cachedendpoints();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ProcEnvProto.CachedEndpointsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(27, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(27, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string valgrind = 28;
  if (!this->_internal_valgrind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valgrind().data(), static_cast<int>(this->_internal_valgrind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcEnvProto.valgrind");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_valgrind(), target);
  }

  // bool runBootScriptFlag = 29;
  if (this->_internal_runbootscriptflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_runbootscriptflag(), target);
  }

  // bool useSPProxyProcClnt = 30;
  if (this->_internal_usespproxyprocclnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_usespproxyprocclnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcEnvProto)
  return target;
}

size_t ProcEnvProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcEnvProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .TendpointProto> etcdEndpoints = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_etcdendpoints_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TendpointProto >::const_iterator
      it = this->_internal_etcdendpoints().begin();
      it != this->_internal_etcdendpoints().end(); ++it) {
    total_size += ProcEnvProto_EtcdEndpointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .SecretProto> secretsMap = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secretsmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SecretProto >::const_iterator
      it = this->_internal_secretsmap().begin();
      it != this->_internal_secretsmap().end(); ++it) {
    total_size += ProcEnvProto_SecretsMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string sigmaPath = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sigmapath_.size());
  for (int i = 0, n = _impl_.sigmapath_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sigmapath_.Get(i));
  }

  // repeated string kernels = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.kernels_.size());
  for (int i = 0, n = _impl_.kernels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.kernels_.Get(i));
  }

  // map<string, .TendpointProto> cachedEndpoints = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cachedendpoints_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TendpointProto >::const_iterator
      it = this->_internal_cachedendpoints().begin();
      it != this->_internal_cachedendpoints().end(); ++it) {
    total_size += ProcEnvProto_CachedEndpointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pidStr = 1;
  if (!this->_internal_pidstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pidstr());
  }

  // string program = 2;
  if (!this->_internal_program().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program());
  }

  // string realmStr = 3;
  if (!this->_internal_realmstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realmstr());
  }

  // string procDir = 5;
  if (!this->_internal_procdir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procdir());
  }

  // string parentDir = 6;
  if (!this->_internal_parentdir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentdir());
  }

  // string outerContainerIPStr = 8;
  if (!this->_internal_outercontaineripstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outercontaineripstr());
  }

  // string innerContainerIPStr = 9;
  if (!this->_internal_innercontaineripstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_innercontaineripstr());
  }

  // string kernelID = 10;
  if (!this->_internal_kernelid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelid());
  }

  // string buildTag = 11;
  if (!this->_internal_buildtag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildtag());
  }

  // string perf = 12;
  if (!this->_internal_perf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_perf());
  }

  // string debug = 13;
  if (!this->_internal_debug().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_debug());
  }

  // string procdPIDStr = 14;
  if (!this->_internal_procdpidstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procdpidstr());
  }

  // string strace = 18;
  if (!this->_internal_strace().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strace());
  }

  // string realmSwitchStr = 24;
  if (!this->_internal_realmswitchstr().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realmswitchstr());
  }

  // string version = 25;
  if (!this->_internal_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string fail = 26;
  if (!this->_internal_fail().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fail());
  }

  // string valgrind = 28;
  if (!this->_internal_valgrind().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valgrind());
  }

  // .Tprincipal principal = 4;
  if (this->_internal_has_principal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.principal_);
  }

  // .google.protobuf.Timestamp spawnTimePB = 17;
  if (this->_internal_has_spawntimepb()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spawntimepb_);
  }

  // int32 howInt = 16;
  if (this->_internal_howint() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_howint());
  }

  // bool privileged = 15;
  if (this->_internal_privileged() != 0) {
    total_size += 1 + 1;
  }

  // bool useSPProxy = 19;
  if (this->_internal_usespproxy() != 0) {
    total_size += 2 + 1;
  }

  // bool useDialProxy = 20;
  if (this->_internal_usedialproxy() != 0) {
    total_size += 2 + 1;
  }

  // bool runBootScriptFlag = 29;
  if (this->_internal_runbootscriptflag() != 0) {
    total_size += 2 + 1;
  }

  // bool useSPProxyProcClnt = 30;
  if (this->_internal_usespproxyprocclnt() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcEnvProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcEnvProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcEnvProto::GetClassData() const { return &_class_data_; }


void ProcEnvProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcEnvProto*>(&to_msg);
  auto& from = static_cast<const ProcEnvProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProcEnvProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.etcdendpoints_.MergeFrom(from._impl_.etcdendpoints_);
  _this->_impl_.secretsmap_.MergeFrom(from._impl_.secretsmap_);
  _this->_impl_.sigmapath_.MergeFrom(from._impl_.sigmapath_);
  _this->_impl_.kernels_.MergeFrom(from._impl_.kernels_);
  _this->_impl_.cachedendpoints_.MergeFrom(from._impl_.cachedendpoints_);
  if (!from._internal_pidstr().empty()) {
    _this->_internal_set_pidstr(from._internal_pidstr());
  }
  if (!from._internal_program().empty()) {
    _this->_internal_set_program(from._internal_program());
  }
  if (!from._internal_realmstr().empty()) {
    _this->_internal_set_realmstr(from._internal_realmstr());
  }
  if (!from._internal_procdir().empty()) {
    _this->_internal_set_procdir(from._internal_procdir());
  }
  if (!from._internal_parentdir().empty()) {
    _this->_internal_set_parentdir(from._internal_parentdir());
  }
  if (!from._internal_outercontaineripstr().empty()) {
    _this->_internal_set_outercontaineripstr(from._internal_outercontaineripstr());
  }
  if (!from._internal_innercontaineripstr().empty()) {
    _this->_internal_set_innercontaineripstr(from._internal_innercontaineripstr());
  }
  if (!from._internal_kernelid().empty()) {
    _this->_internal_set_kernelid(from._internal_kernelid());
  }
  if (!from._internal_buildtag().empty()) {
    _this->_internal_set_buildtag(from._internal_buildtag());
  }
  if (!from._internal_perf().empty()) {
    _this->_internal_set_perf(from._internal_perf());
  }
  if (!from._internal_debug().empty()) {
    _this->_internal_set_debug(from._internal_debug());
  }
  if (!from._internal_procdpidstr().empty()) {
    _this->_internal_set_procdpidstr(from._internal_procdpidstr());
  }
  if (!from._internal_strace().empty()) {
    _this->_internal_set_strace(from._internal_strace());
  }
  if (!from._internal_realmswitchstr().empty()) {
    _this->_internal_set_realmswitchstr(from._internal_realmswitchstr());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_fail().empty()) {
    _this->_internal_set_fail(from._internal_fail());
  }
  if (!from._internal_valgrind().empty()) {
    _this->_internal_set_valgrind(from._internal_valgrind());
  }
  if (from._internal_has_principal()) {
    _this->_internal_mutable_principal()->::Tprincipal::MergeFrom(
        from._internal_principal());
  }
  if (from._internal_has_spawntimepb()) {
    _this->_internal_mutable_spawntimepb()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_spawntimepb());
  }
  if (from._internal_howint() != 0) {
    _this->_internal_set_howint(from._internal_howint());
  }
  if (from._internal_privileged() != 0) {
    _this->_internal_set_privileged(from._internal_privileged());
  }
  if (from._internal_usespproxy() != 0) {
    _this->_internal_set_usespproxy(from._internal_usespproxy());
  }
  if (from._internal_usedialproxy() != 0) {
    _this->_internal_set_usedialproxy(from._internal_usedialproxy());
  }
  if (from._internal_runbootscriptflag() != 0) {
    _this->_internal_set_runbootscriptflag(from._internal_runbootscriptflag());
  }
  if (from._internal_usespproxyprocclnt() != 0) {
    _this->_internal_set_usespproxyprocclnt(from._internal_usespproxyprocclnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcEnvProto::CopyFrom(const ProcEnvProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcEnvProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcEnvProto::IsInitialized() const {
  return true;
}

void ProcEnvProto::InternalSwap(ProcEnvProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.etcdendpoints_.InternalSwap(&other->_impl_.etcdendpoints_);
  _impl_.secretsmap_.InternalSwap(&other->_impl_.secretsmap_);
  _impl_.sigmapath_.InternalSwap(&other->_impl_.sigmapath_);
  _impl_.kernels_.InternalSwap(&other->_impl_.kernels_);
  _impl_.cachedendpoints_.InternalSwap(&other->_impl_.cachedendpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pidstr_, lhs_arena,
      &other->_impl_.pidstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.program_, lhs_arena,
      &other->_impl_.program_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realmstr_, lhs_arena,
      &other->_impl_.realmstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procdir_, lhs_arena,
      &other->_impl_.procdir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentdir_, lhs_arena,
      &other->_impl_.parentdir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outercontaineripstr_, lhs_arena,
      &other->_impl_.outercontaineripstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.innercontaineripstr_, lhs_arena,
      &other->_impl_.innercontaineripstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kernelid_, lhs_arena,
      &other->_impl_.kernelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buildtag_, lhs_arena,
      &other->_impl_.buildtag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.perf_, lhs_arena,
      &other->_impl_.perf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debug_, lhs_arena,
      &other->_impl_.debug_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procdpidstr_, lhs_arena,
      &other->_impl_.procdpidstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strace_, lhs_arena,
      &other->_impl_.strace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realmswitchstr_, lhs_arena,
      &other->_impl_.realmswitchstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fail_, lhs_arena,
      &other->_impl_.fail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valgrind_, lhs_arena,
      &other->_impl_.valgrind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcEnvProto, _impl_.usespproxyprocclnt_)
      + sizeof(ProcEnvProto::_impl_.usespproxyprocclnt_)
      - PROTOBUF_FIELD_OFFSET(ProcEnvProto, _impl_.principal_)>(
          reinterpret_cast<char*>(&_impl_.principal_),
          reinterpret_cast<char*>(&other->_impl_.principal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcEnvProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[4]);
}

// ===================================================================

ProcProto_EnvEntry_DoNotUse::ProcProto_EnvEntry_DoNotUse() {}
ProcProto_EnvEntry_DoNotUse::ProcProto_EnvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcProto_EnvEntry_DoNotUse::MergeFrom(const ProcProto_EnvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcProto_EnvEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[5]);
}

// ===================================================================

class ProcProto::_Internal {
 public:
  static const ::ProcEnvProto& procenvproto(const ProcProto* msg);
};

const ::ProcEnvProto&
ProcProto::_Internal::procenvproto(const ProcProto* msg) {
  return *msg->_impl_.procenvproto_;
}
ProcProto::ProcProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:ProcProto)
}
ProcProto::ProcProto(const ProcProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , /*decltype(_impl_.env_)*/{}
    , decltype(_impl_.bootscript_){}
    , decltype(_impl_.bootscriptinput_){}
    , decltype(_impl_.procenvproto_){nullptr}
    , decltype(_impl_.typeint_){}
    , decltype(_impl_.mcpuint_){}
    , decltype(_impl_.memint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.env_.MergeFrom(from._impl_.env_);
  _impl_.bootscript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootscript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bootscript().empty()) {
    _this->_impl_.bootscript_.Set(from._internal_bootscript(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bootscriptinput_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootscriptinput_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bootscriptinput().empty()) {
    _this->_impl_.bootscriptinput_.Set(from._internal_bootscriptinput(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_procenvproto()) {
    _this->_impl_.procenvproto_ = new ::ProcEnvProto(*from._impl_.procenvproto_);
  }
  ::memcpy(&_impl_.typeint_, &from._impl_.typeint_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.memint_) -
    reinterpret_cast<char*>(&_impl_.typeint_)) + sizeof(_impl_.memint_));
  // @@protoc_insertion_point(copy_constructor:ProcProto)
}

inline void ProcProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , /*decltype(_impl_.env_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.bootscript_){}
    , decltype(_impl_.bootscriptinput_){}
    , decltype(_impl_.procenvproto_){nullptr}
    , decltype(_impl_.typeint_){0u}
    , decltype(_impl_.mcpuint_){0u}
    , decltype(_impl_.memint_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bootscript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootscript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bootscriptinput_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bootscriptinput_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcProto::~ProcProto() {
  // @@protoc_insertion_point(destructor:ProcProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.env_.Destruct();
  _impl_.env_.~MapField();
  _impl_.bootscript_.Destroy();
  _impl_.bootscriptinput_.Destroy();
  if (this != internal_default_instance()) delete _impl_.procenvproto_;
}

void ProcProto::ArenaDtor(void* object) {
  ProcProto* _this = reinterpret_cast< ProcProto* >(object);
  _this->_impl_.env_.Destruct();
}
void ProcProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.env_.Clear();
  _impl_.bootscript_.ClearToEmpty();
  _impl_.bootscriptinput_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.procenvproto_ != nullptr) {
    delete _impl_.procenvproto_;
  }
  _impl_.procenvproto_ = nullptr;
  ::memset(&_impl_.typeint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.memint_) -
      reinterpret_cast<char*>(&_impl_.typeint_)) + sizeof(_impl_.memint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProcEnvProto procEnvProto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_procenvproto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ProcProto.args"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> env = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.env_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes bootScript = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bootscript();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bootScriptInput = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bootscriptinput();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 typeInt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.typeint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mcpuInt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mcpuint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 memInt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.memint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::procenvproto(this),
        _Internal::procenvproto(this).GetCachedSize(), target, stream);
  }

  // repeated string args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcProto.args");
    target = stream->WriteString(2, s, target);
  }

  // map<string, string> env = 3;
  if (!this->_internal_env().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcProto_EnvEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_env();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ProcProto.EnvEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ProcProto.EnvEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bytes bootScript = 4;
  if (!this->_internal_bootscript().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bootscript(), target);
  }

  // bytes bootScriptInput = 5;
  if (!this->_internal_bootscriptinput().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bootscriptinput(), target);
  }

  // uint32 typeInt = 6;
  if (this->_internal_typeint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_typeint(), target);
  }

  // uint32 mcpuInt = 7;
  if (this->_internal_mcpuint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mcpuint(), target);
  }

  // uint32 memInt = 8;
  if (this->_internal_memint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_memint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcProto)
  return target;
}

size_t ProcProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.args_.Get(i));
  }

  // map<string, string> env = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env().begin();
      it != this->_internal_env().end(); ++it) {
    total_size += ProcProto_EnvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes bootScript = 4;
  if (!this->_internal_bootscript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bootscript());
  }

  // bytes bootScriptInput = 5;
  if (!this->_internal_bootscriptinput().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bootscriptinput());
  }

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.procenvproto_);
  }

  // uint32 typeInt = 6;
  if (this->_internal_typeint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_typeint());
  }

  // uint32 mcpuInt = 7;
  if (this->_internal_mcpuint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mcpuint());
  }

  // uint32 memInt = 8;
  if (this->_internal_memint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_memint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcProto::GetClassData() const { return &_class_data_; }


void ProcProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcProto*>(&to_msg);
  auto& from = static_cast<const ProcProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProcProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _this->_impl_.env_.MergeFrom(from._impl_.env_);
  if (!from._internal_bootscript().empty()) {
    _this->_internal_set_bootscript(from._internal_bootscript());
  }
  if (!from._internal_bootscriptinput().empty()) {
    _this->_internal_set_bootscriptinput(from._internal_bootscriptinput());
  }
  if (from._internal_has_procenvproto()) {
    _this->_internal_mutable_procenvproto()->::ProcEnvProto::MergeFrom(
        from._internal_procenvproto());
  }
  if (from._internal_typeint() != 0) {
    _this->_internal_set_typeint(from._internal_typeint());
  }
  if (from._internal_mcpuint() != 0) {
    _this->_internal_set_mcpuint(from._internal_mcpuint());
  }
  if (from._internal_memint() != 0) {
    _this->_internal_set_memint(from._internal_memint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcProto::CopyFrom(const ProcProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcProto::IsInitialized() const {
  return true;
}

void ProcProto::InternalSwap(ProcProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  _impl_.env_.InternalSwap(&other->_impl_.env_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bootscript_, lhs_arena,
      &other->_impl_.bootscript_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bootscriptinput_, lhs_arena,
      &other->_impl_.bootscriptinput_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcProto, _impl_.memint_)
      + sizeof(ProcProto::_impl_.memint_)
      - PROTOBUF_FIELD_OFFSET(ProcProto, _impl_.procenvproto_)>(
          reinterpret_cast<char*>(&_impl_.procenvproto_),
          reinterpret_cast<char*>(&other->_impl_.procenvproto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proc_2fproc_2eproto_getter, &descriptor_table_proc_2fproc_2eproto_once,
      file_level_metadata_proc_2fproc_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProcSeqno*
Arena::CreateMaybeMessage< ::ProcSeqno >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcSeqno >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcEnvProto_EtcdEndpointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ProcEnvProto_EtcdEndpointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcEnvProto_EtcdEndpointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcEnvProto_SecretsMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ProcEnvProto_SecretsMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcEnvProto_SecretsMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcEnvProto_CachedEndpointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ProcEnvProto_CachedEndpointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcEnvProto_CachedEndpointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcEnvProto*
Arena::CreateMaybeMessage< ::ProcEnvProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcEnvProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcProto_EnvEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ProcProto_EnvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcProto_EnvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcProto*
Arena::CreateMaybeMessage< ::ProcProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
