// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/sigmap/proto/spproxy.proto

#include "proxy/sigmap/proto/spproxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SigmaInformProcReq::SigmaInformProcReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.procenvproto_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaInformProcReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaInformProcReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaInformProcReqDefaultTypeInternal() {}
  union {
    SigmaInformProcReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaInformProcReqDefaultTypeInternal _SigmaInformProcReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaInitReq::SigmaInitReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.procenvproto_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaInitReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaInitReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaInitReqDefaultTypeInternal() {}
  union {
    SigmaInitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaInitReqDefaultTypeInternal _SigmaInitReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaNullReq::SigmaNullReq(
    ::_pbi::ConstantInitialized) {}
struct SigmaNullReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaNullReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaNullReqDefaultTypeInternal() {}
  union {
    SigmaNullReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaNullReqDefaultTypeInternal _SigmaNullReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaRealmReq::SigmaRealmReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.realmstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaRealmReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaRealmReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaRealmReqDefaultTypeInternal() {}
  union {
    SigmaRealmReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaRealmReqDefaultTypeInternal _SigmaRealmReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaCloseReq::SigmaCloseReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaCloseReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaCloseReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaCloseReqDefaultTypeInternal() {}
  union {
    SigmaCloseReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaCloseReqDefaultTypeInternal _SigmaCloseReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaErrRep::SigmaErrRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaErrRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaErrRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaErrRepDefaultTypeInternal() {}
  union {
    SigmaErrRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaErrRepDefaultTypeInternal _SigmaErrRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaPathReq::SigmaPathReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaPathReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaPathReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaPathReqDefaultTypeInternal() {}
  union {
    SigmaPathReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaPathReqDefaultTypeInternal _SigmaPathReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaStatRep::SigmaStatRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaStatRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaStatRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaStatRepDefaultTypeInternal() {}
  union {
    SigmaStatRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaStatRepDefaultTypeInternal _SigmaStatRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaCreateReq::SigmaCreateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.perm_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.leaseid_)*/uint64_t{0u}
  , /*decltype(_impl_.wait_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaCreateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaCreateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaCreateReqDefaultTypeInternal() {}
  union {
    SigmaCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaCreateReqDefaultTypeInternal _SigmaCreateReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaFdRep::SigmaFdRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaFdRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaFdRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaFdRepDefaultTypeInternal() {}
  union {
    SigmaFdRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaFdRepDefaultTypeInternal _SigmaFdRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaRenameReq::SigmaRenameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dst_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaRenameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaRenameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaRenameReqDefaultTypeInternal() {}
  union {
    SigmaRenameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaRenameReqDefaultTypeInternal _SigmaRenameReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaDataRep::SigmaDataRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blob_)*/nullptr
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaDataRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaDataRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaDataRepDefaultTypeInternal() {}
  union {
    SigmaDataRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaDataRepDefaultTypeInternal _SigmaDataRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaPutFileReq::SigmaPutFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blob_)*/nullptr
  , /*decltype(_impl_.perm_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.leaseid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaPutFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaPutFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaPutFileReqDefaultTypeInternal() {}
  union {
    SigmaPutFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaPutFileReqDefaultTypeInternal _SigmaPutFileReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaSizeRep::SigmaSizeRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaSizeRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaSizeRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaSizeRepDefaultTypeInternal() {}
  union {
    SigmaSizeRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaSizeRepDefaultTypeInternal _SigmaSizeRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaReadReq::SigmaReadReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.off_)*/uint64_t{0u}
  , /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaReadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaReadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaReadReqDefaultTypeInternal() {}
  union {
    SigmaReadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaReadReqDefaultTypeInternal _SigmaReadReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaWriteReq::SigmaWriteReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.blob_)*/nullptr
  , /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_.noutvec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaWriteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaWriteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaWriteReqDefaultTypeInternal() {}
  union {
    SigmaWriteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaWriteReqDefaultTypeInternal _SigmaWriteReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaSeekReq::SigmaSeekReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.fd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaSeekReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaSeekReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaSeekReqDefaultTypeInternal() {}
  union {
    SigmaSeekReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaSeekReqDefaultTypeInternal _SigmaSeekReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaClntIdRep::SigmaClntIdRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_.clntid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaClntIdRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaClntIdRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaClntIdRepDefaultTypeInternal() {}
  union {
    SigmaClntIdRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaClntIdRepDefaultTypeInternal _SigmaClntIdRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaFenceReq::SigmaFenceReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaFenceReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaFenceReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaFenceReqDefaultTypeInternal() {}
  union {
    SigmaFenceReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaFenceReqDefaultTypeInternal _SigmaFenceReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaMountTreeReq::SigmaMountTreeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tree_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaMountTreeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaMountTreeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaMountTreeReqDefaultTypeInternal() {}
  union {
    SigmaMountTreeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaMountTreeReqDefaultTypeInternal _SigmaMountTreeReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaLastMountRep::SigmaLastMountRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path1_)*/{}
  , /*decltype(_impl_.path2_)*/{}
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaLastMountRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaLastMountRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaLastMountRepDefaultTypeInternal() {}
  union {
    SigmaLastMountRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaLastMountRepDefaultTypeInternal _SigmaLastMountRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaMountReq::SigmaMountReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaMountReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaMountReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaMountReqDefaultTypeInternal() {}
  union {
    SigmaMountReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaMountReqDefaultTypeInternal _SigmaMountReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaMountRep::SigmaMountRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_.local_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaMountRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaMountRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaMountRepDefaultTypeInternal() {}
  union {
    SigmaMountRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaMountRepDefaultTypeInternal _SigmaMountRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaMountsRep::SigmaMountsRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaMountsRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaMountsRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaMountsRepDefaultTypeInternal() {}
  union {
    SigmaMountsRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaMountsRepDefaultTypeInternal _SigmaMountsRep_default_instance_;
PROTOBUF_CONSTEXPR SigmaRegisterEPReq::SigmaRegisterEPReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaRegisterEPReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaRegisterEPReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaRegisterEPReqDefaultTypeInternal() {}
  union {
    SigmaRegisterEPReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaRegisterEPReqDefaultTypeInternal _SigmaRegisterEPReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaExitedReq::SigmaExitedReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaExitedReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaExitedReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaExitedReqDefaultTypeInternal() {}
  union {
    SigmaExitedReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaExitedReqDefaultTypeInternal _SigmaExitedReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaDelegatedRPCReq::SigmaDelegatedRPCReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpcidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaDelegatedRPCReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaDelegatedRPCReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaDelegatedRPCReqDefaultTypeInternal() {}
  union {
    SigmaDelegatedRPCReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaDelegatedRPCReqDefaultTypeInternal _SigmaDelegatedRPCReq_default_instance_;
PROTOBUF_CONSTEXPR SigmaDelegatedRPCRep::SigmaDelegatedRPCRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blob_)*/nullptr
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SigmaDelegatedRPCRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigmaDelegatedRPCRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigmaDelegatedRPCRepDefaultTypeInternal() {}
  union {
    SigmaDelegatedRPCRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigmaDelegatedRPCRepDefaultTypeInternal _SigmaDelegatedRPCRep_default_instance_;
static ::_pb::Metadata file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[28];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proxy_2fsigmap_2fproto_2fspproxy_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proxy_2fsigmap_2fproto_2fspproxy_2eproto = nullptr;

const uint32_t TableStruct_proxy_2fsigmap_2fproto_2fspproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaInformProcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaInformProcReq, _impl_.procenvproto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaInitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaInitReq, _impl_.procenvproto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaNullReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaRealmReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaRealmReq, _impl_.realmstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaCloseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaCloseReq, _impl_.fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaErrRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaErrRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaPathReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaPathReq, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaStatRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaStatRep, _impl_.stat_),
  PROTOBUF_FIELD_OFFSET(::SigmaStatRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.perm_),
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.leaseid_),
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.fence_),
  PROTOBUF_FIELD_OFFSET(::SigmaCreateReq, _impl_.wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaFdRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaFdRep, _impl_.fd_),
  PROTOBUF_FIELD_OFFSET(::SigmaFdRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaRenameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaRenameReq, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::SigmaRenameReq, _impl_.dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaDataRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaDataRep, _impl_.blob_),
  PROTOBUF_FIELD_OFFSET(::SigmaDataRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.perm_),
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.leaseid_),
  PROTOBUF_FIELD_OFFSET(::SigmaPutFileReq, _impl_.blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaSizeRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaSizeRep, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::SigmaSizeRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaReadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaReadReq, _impl_.fd_),
  PROTOBUF_FIELD_OFFSET(::SigmaReadReq, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::SigmaReadReq, _impl_.off_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaWriteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaWriteReq, _impl_.fd_),
  PROTOBUF_FIELD_OFFSET(::SigmaWriteReq, _impl_.fence_),
  PROTOBUF_FIELD_OFFSET(::SigmaWriteReq, _impl_.blob_),
  PROTOBUF_FIELD_OFFSET(::SigmaWriteReq, _impl_.noutvec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaSeekReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaSeekReq, _impl_.fd_),
  PROTOBUF_FIELD_OFFSET(::SigmaSeekReq, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaClntIdRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaClntIdRep, _impl_.clntid_),
  PROTOBUF_FIELD_OFFSET(::SigmaClntIdRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaFenceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaFenceReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::SigmaFenceReq, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaMountTreeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaMountTreeReq, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountTreeReq, _impl_.tree_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountTreeReq, _impl_.mountname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaLastMountRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaLastMountRep, _impl_.path1_),
  PROTOBUF_FIELD_OFFSET(::SigmaLastMountRep, _impl_.path2_),
  PROTOBUF_FIELD_OFFSET(::SigmaLastMountRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaMountReq, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountReq, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaMountRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaMountRep, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountRep, _impl_.local_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaMountsRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaMountsRep, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::SigmaMountsRep, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaRegisterEPReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaRegisterEPReq, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::SigmaRegisterEPReq, _impl_.endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaExitedReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaExitedReq, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::SigmaExitedReq, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaDelegatedRPCReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaDelegatedRPCReq, _impl_.rpcidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SigmaDelegatedRPCRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SigmaDelegatedRPCRep, _impl_.blob_),
  PROTOBUF_FIELD_OFFSET(::SigmaDelegatedRPCRep, _impl_.err_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SigmaInformProcReq)},
  { 7, -1, -1, sizeof(::SigmaInitReq)},
  { 14, -1, -1, sizeof(::SigmaNullReq)},
  { 20, -1, -1, sizeof(::SigmaRealmReq)},
  { 27, -1, -1, sizeof(::SigmaCloseReq)},
  { 34, -1, -1, sizeof(::SigmaErrRep)},
  { 41, -1, -1, sizeof(::SigmaPathReq)},
  { 48, -1, -1, sizeof(::SigmaStatRep)},
  { 56, -1, -1, sizeof(::SigmaCreateReq)},
  { 68, -1, -1, sizeof(::SigmaFdRep)},
  { 76, -1, -1, sizeof(::SigmaRenameReq)},
  { 84, -1, -1, sizeof(::SigmaDataRep)},
  { 92, -1, -1, sizeof(::SigmaPutFileReq)},
  { 104, -1, -1, sizeof(::SigmaSizeRep)},
  { 112, -1, -1, sizeof(::SigmaReadReq)},
  { 121, -1, -1, sizeof(::SigmaWriteReq)},
  { 131, -1, -1, sizeof(::SigmaSeekReq)},
  { 139, -1, -1, sizeof(::SigmaClntIdRep)},
  { 147, -1, -1, sizeof(::SigmaFenceReq)},
  { 155, -1, -1, sizeof(::SigmaMountTreeReq)},
  { 164, -1, -1, sizeof(::SigmaLastMountRep)},
  { 173, -1, -1, sizeof(::SigmaMountReq)},
  { 181, -1, -1, sizeof(::SigmaMountRep)},
  { 190, -1, -1, sizeof(::SigmaMountsRep)},
  { 198, -1, -1, sizeof(::SigmaRegisterEPReq)},
  { 206, -1, -1, sizeof(::SigmaExitedReq)},
  { 214, -1, -1, sizeof(::SigmaDelegatedRPCReq)},
  { 221, -1, -1, sizeof(::SigmaDelegatedRPCRep)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SigmaInformProcReq_default_instance_._instance,
  &::_SigmaInitReq_default_instance_._instance,
  &::_SigmaNullReq_default_instance_._instance,
  &::_SigmaRealmReq_default_instance_._instance,
  &::_SigmaCloseReq_default_instance_._instance,
  &::_SigmaErrRep_default_instance_._instance,
  &::_SigmaPathReq_default_instance_._instance,
  &::_SigmaStatRep_default_instance_._instance,
  &::_SigmaCreateReq_default_instance_._instance,
  &::_SigmaFdRep_default_instance_._instance,
  &::_SigmaRenameReq_default_instance_._instance,
  &::_SigmaDataRep_default_instance_._instance,
  &::_SigmaPutFileReq_default_instance_._instance,
  &::_SigmaSizeRep_default_instance_._instance,
  &::_SigmaReadReq_default_instance_._instance,
  &::_SigmaWriteReq_default_instance_._instance,
  &::_SigmaSeekReq_default_instance_._instance,
  &::_SigmaClntIdRep_default_instance_._instance,
  &::_SigmaFenceReq_default_instance_._instance,
  &::_SigmaMountTreeReq_default_instance_._instance,
  &::_SigmaLastMountRep_default_instance_._instance,
  &::_SigmaMountReq_default_instance_._instance,
  &::_SigmaMountRep_default_instance_._instance,
  &::_SigmaMountsRep_default_instance_._instance,
  &::_SigmaRegisterEPReq_default_instance_._instance,
  &::_SigmaExitedReq_default_instance_._instance,
  &::_SigmaDelegatedRPCReq_default_instance_._instance,
  &::_SigmaDelegatedRPCRep_default_instance_._instance,
};

const char descriptor_table_protodef_proxy_2fsigmap_2fproto_2fspproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proxy/sigmap/proto/spproxy.proto\032\023sigm"
  "ap/sigmap.proto\032\017proc/proc.proto\032\023rpc/pr"
  "oto/rpc.proto\"9\n\022SigmaInformProcReq\022#\n\014p"
  "rocEnvProto\030\001 \001(\0132\r.ProcEnvProto\"3\n\014Sigm"
  "aInitReq\022#\n\014procEnvProto\030\001 \001(\0132\r.ProcEnv"
  "Proto\"\016\n\014SigmaNullReq\"!\n\rSigmaRealmReq\022\020"
  "\n\010realmStr\030\001 \001(\t\"\033\n\rSigmaCloseReq\022\n\n\002fd\030"
  "\001 \001(\r\"#\n\013SigmaErrRep\022\024\n\003err\030\001 \001(\0132\007.Rerr"
  "or\"\034\n\014SigmaPathReq\022\014\n\004path\030\001 \001(\t\"\?\n\014Sigm"
  "aStatRep\022\031\n\004stat\030\001 \001(\0132\013.TstatProto\022\024\n\003e"
  "rr\030\002 \001(\0132\007.Rerror\"v\n\016SigmaCreateReq\022\014\n\004p"
  "ath\030\001 \001(\t\022\014\n\004perm\030\002 \001(\r\022\014\n\004mode\030\003 \001(\r\022\017\n"
  "\007leaseId\030\004 \001(\004\022\033\n\005fence\030\005 \001(\0132\014.TfencePr"
  "oto\022\014\n\004wait\030\006 \001(\010\".\n\nSigmaFdRep\022\n\n\002fd\030\001 "
  "\001(\r\022\024\n\003err\030\002 \001(\0132\007.Rerror\"*\n\016SigmaRename"
  "Req\022\013\n\003src\030\001 \001(\t\022\013\n\003dst\030\002 \001(\t\"9\n\014SigmaDa"
  "taRep\022\023\n\004blob\030\001 \001(\0132\005.Blob\022\024\n\003err\030\002 \001(\0132"
  "\007.Rerror\"q\n\017SigmaPutFileReq\022\014\n\004path\030\001 \001("
  "\t\022\014\n\004perm\030\002 \001(\r\022\014\n\004mode\030\003 \001(\r\022\016\n\006offset\030"
  "\004 \001(\004\022\017\n\007leaseId\030\005 \001(\004\022\023\n\004blob\030\006 \001(\0132\005.B"
  "lob\"2\n\014SigmaSizeRep\022\014\n\004size\030\001 \001(\004\022\024\n\003err"
  "\030\002 \001(\0132\007.Rerror\"5\n\014SigmaReadReq\022\n\n\002fd\030\001 "
  "\001(\r\022\014\n\004size\030\002 \001(\004\022\013\n\003off\030\003 \001(\004\"^\n\rSigmaW"
  "riteReq\022\n\n\002fd\030\001 \001(\r\022\033\n\005fence\030\002 \001(\0132\014.Tfe"
  "nceProto\022\023\n\004blob\030\003 \001(\0132\005.Blob\022\017\n\007nOutVec"
  "\030\004 \001(\r\"*\n\014SigmaSeekReq\022\n\n\002fd\030\001 \001(\r\022\016\n\006of"
  "fset\030\002 \001(\004\"6\n\016SigmaClntIdRep\022\016\n\006clntId\030\001"
  " \001(\004\022\024\n\003err\030\002 \001(\0132\007.Rerror\":\n\rSigmaFence"
  "Req\022\014\n\004Path\030\001 \001(\t\022\033\n\005Fence\030\002 \001(\0132\014.Tfenc"
  "eProto\"W\n\021SigmaMountTreeReq\022!\n\010Endpoint\030"
  "\001 \001(\0132\017.TendpointProto\022\014\n\004tree\030\002 \001(\t\022\021\n\t"
  "mountName\030\003 \001(\t\"G\n\021SigmaLastMountRep\022\r\n\005"
  "path1\030\001 \003(\t\022\r\n\005path2\030\002 \003(\t\022\024\n\003err\030\003 \001(\0132"
  "\007.Rerror\"@\n\rSigmaMountReq\022!\n\010endpoint\030\001 "
  "\001(\0132\017.TendpointProto\022\014\n\004port\030\002 \001(\t\"W\n\rSi"
  "gmaMountRep\022!\n\010endpoint\030\001 \001(\0132\017.Tendpoin"
  "tProto\022\r\n\005local\030\002 \001(\010\022\024\n\003err\030\003 \001(\0132\007.Rer"
  "ror\"9\n\016SigmaMountsRep\022\021\n\tendpoints\030\001 \003(\t"
  "\022\024\n\003err\030\002 \001(\0132\007.Rerror\"E\n\022SigmaRegisterE"
  "PReq\022\014\n\004path\030\001 \001(\t\022!\n\010endpoint\030\002 \001(\0132\017.T"
  "endpointProto\"-\n\016SigmaExitedReq\022\016\n\006statu"
  "s\030\001 \001(\r\022\013\n\003msg\030\002 \001(\t\"&\n\024SigmaDelegatedRP"
  "CReq\022\016\n\006rPCIdx\030\001 \001(\004\"A\n\024SigmaDelegatedRP"
  "CRep\022\023\n\004blob\030\001 \001(\0132\005.Blob\022\024\n\003err\030\002 \001(\0132\007"
  ".RerrorB\034Z\032sigmaos/proxy/sigmap/protob\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_deps[3] = {
  &::descriptor_table_proc_2fproc_2eproto,
  &::descriptor_table_rpc_2fproto_2frpc_2eproto,
  &::descriptor_table_sigmap_2fsigmap_2eproto,
};
static ::_pbi::once_flag descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto = {
    false, false, 1805, descriptor_table_protodef_proxy_2fsigmap_2fproto_2fspproxy_2eproto,
    "proxy/sigmap/proto/spproxy.proto",
    &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once, descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_deps, 3, 28,
    schemas, file_default_instances, TableStruct_proxy_2fsigmap_2fproto_2fspproxy_2eproto::offsets,
    file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto, file_level_enum_descriptors_proxy_2fsigmap_2fproto_2fspproxy_2eproto,
    file_level_service_descriptors_proxy_2fsigmap_2fproto_2fspproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter() {
  return &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2fsigmap_2fproto_2fspproxy_2eproto(&descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto);

// ===================================================================

class SigmaInformProcReq::_Internal {
 public:
  static const ::ProcEnvProto& procenvproto(const SigmaInformProcReq* msg);
};

const ::ProcEnvProto&
SigmaInformProcReq::_Internal::procenvproto(const SigmaInformProcReq* msg) {
  return *msg->_impl_.procenvproto_;
}
void SigmaInformProcReq::clear_procenvproto() {
  if (GetArenaForAllocation() == nullptr && _impl_.procenvproto_ != nullptr) {
    delete _impl_.procenvproto_;
  }
  _impl_.procenvproto_ = nullptr;
}
SigmaInformProcReq::SigmaInformProcReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaInformProcReq)
}
SigmaInformProcReq::SigmaInformProcReq(const SigmaInformProcReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaInformProcReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.procenvproto_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_procenvproto()) {
    _this->_impl_.procenvproto_ = new ::ProcEnvProto(*from._impl_.procenvproto_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaInformProcReq)
}

inline void SigmaInformProcReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.procenvproto_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaInformProcReq::~SigmaInformProcReq() {
  // @@protoc_insertion_point(destructor:SigmaInformProcReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaInformProcReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.procenvproto_;
}

void SigmaInformProcReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaInformProcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaInformProcReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.procenvproto_ != nullptr) {
    delete _impl_.procenvproto_;
  }
  _impl_.procenvproto_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaInformProcReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProcEnvProto procEnvProto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_procenvproto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaInformProcReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaInformProcReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::procenvproto(this),
        _Internal::procenvproto(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaInformProcReq)
  return target;
}

size_t SigmaInformProcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaInformProcReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.procenvproto_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaInformProcReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaInformProcReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaInformProcReq::GetClassData() const { return &_class_data_; }


void SigmaInformProcReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaInformProcReq*>(&to_msg);
  auto& from = static_cast<const SigmaInformProcReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaInformProcReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_procenvproto()) {
    _this->_internal_mutable_procenvproto()->::ProcEnvProto::MergeFrom(
        from._internal_procenvproto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaInformProcReq::CopyFrom(const SigmaInformProcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaInformProcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaInformProcReq::IsInitialized() const {
  return true;
}

void SigmaInformProcReq::InternalSwap(SigmaInformProcReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.procenvproto_, other->_impl_.procenvproto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaInformProcReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[0]);
}

// ===================================================================

class SigmaInitReq::_Internal {
 public:
  static const ::ProcEnvProto& procenvproto(const SigmaInitReq* msg);
};

const ::ProcEnvProto&
SigmaInitReq::_Internal::procenvproto(const SigmaInitReq* msg) {
  return *msg->_impl_.procenvproto_;
}
void SigmaInitReq::clear_procenvproto() {
  if (GetArenaForAllocation() == nullptr && _impl_.procenvproto_ != nullptr) {
    delete _impl_.procenvproto_;
  }
  _impl_.procenvproto_ = nullptr;
}
SigmaInitReq::SigmaInitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaInitReq)
}
SigmaInitReq::SigmaInitReq(const SigmaInitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaInitReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.procenvproto_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_procenvproto()) {
    _this->_impl_.procenvproto_ = new ::ProcEnvProto(*from._impl_.procenvproto_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaInitReq)
}

inline void SigmaInitReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.procenvproto_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaInitReq::~SigmaInitReq() {
  // @@protoc_insertion_point(destructor:SigmaInitReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaInitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.procenvproto_;
}

void SigmaInitReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaInitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaInitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.procenvproto_ != nullptr) {
    delete _impl_.procenvproto_;
  }
  _impl_.procenvproto_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaInitReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProcEnvProto procEnvProto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_procenvproto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaInitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaInitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::procenvproto(this),
        _Internal::procenvproto(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaInitReq)
  return target;
}

size_t SigmaInitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaInitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProcEnvProto procEnvProto = 1;
  if (this->_internal_has_procenvproto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.procenvproto_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaInitReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaInitReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaInitReq::GetClassData() const { return &_class_data_; }


void SigmaInitReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaInitReq*>(&to_msg);
  auto& from = static_cast<const SigmaInitReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaInitReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_procenvproto()) {
    _this->_internal_mutable_procenvproto()->::ProcEnvProto::MergeFrom(
        from._internal_procenvproto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaInitReq::CopyFrom(const SigmaInitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaInitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaInitReq::IsInitialized() const {
  return true;
}

void SigmaInitReq::InternalSwap(SigmaInitReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.procenvproto_, other->_impl_.procenvproto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaInitReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[1]);
}

// ===================================================================

class SigmaNullReq::_Internal {
 public:
};

SigmaNullReq::SigmaNullReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SigmaNullReq)
}
SigmaNullReq::SigmaNullReq(const SigmaNullReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SigmaNullReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SigmaNullReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaNullReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaNullReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SigmaNullReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[2]);
}

// ===================================================================

class SigmaRealmReq::_Internal {
 public:
};

SigmaRealmReq::SigmaRealmReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaRealmReq)
}
SigmaRealmReq::SigmaRealmReq(const SigmaRealmReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaRealmReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.realmstr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realmstr().empty()) {
    _this->_impl_.realmstr_.Set(from._internal_realmstr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SigmaRealmReq)
}

inline void SigmaRealmReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.realmstr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaRealmReq::~SigmaRealmReq() {
  // @@protoc_insertion_point(destructor:SigmaRealmReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaRealmReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.realmstr_.Destroy();
}

void SigmaRealmReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaRealmReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaRealmReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.realmstr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaRealmReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string realmStr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_realmstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaRealmReq.realmStr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaRealmReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaRealmReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string realmStr = 1;
  if (!this->_internal_realmstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realmstr().data(), static_cast<int>(this->_internal_realmstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaRealmReq.realmStr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_realmstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaRealmReq)
  return target;
}

size_t SigmaRealmReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaRealmReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string realmStr = 1;
  if (!this->_internal_realmstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realmstr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaRealmReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaRealmReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaRealmReq::GetClassData() const { return &_class_data_; }


void SigmaRealmReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaRealmReq*>(&to_msg);
  auto& from = static_cast<const SigmaRealmReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaRealmReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_realmstr().empty()) {
    _this->_internal_set_realmstr(from._internal_realmstr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaRealmReq::CopyFrom(const SigmaRealmReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaRealmReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaRealmReq::IsInitialized() const {
  return true;
}

void SigmaRealmReq::InternalSwap(SigmaRealmReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realmstr_, lhs_arena,
      &other->_impl_.realmstr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaRealmReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[3]);
}

// ===================================================================

class SigmaCloseReq::_Internal {
 public:
};

SigmaCloseReq::SigmaCloseReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaCloseReq)
}
SigmaCloseReq::SigmaCloseReq(const SigmaCloseReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaCloseReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fd_ = from._impl_.fd_;
  // @@protoc_insertion_point(copy_constructor:SigmaCloseReq)
}

inline void SigmaCloseReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaCloseReq::~SigmaCloseReq() {
  // @@protoc_insertion_point(destructor:SigmaCloseReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaCloseReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SigmaCloseReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaCloseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaCloseReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fd_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaCloseReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaCloseReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaCloseReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaCloseReq)
  return target;
}

size_t SigmaCloseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaCloseReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaCloseReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaCloseReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaCloseReq::GetClassData() const { return &_class_data_; }


void SigmaCloseReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaCloseReq*>(&to_msg);
  auto& from = static_cast<const SigmaCloseReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaCloseReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaCloseReq::CopyFrom(const SigmaCloseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaCloseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaCloseReq::IsInitialized() const {
  return true;
}

void SigmaCloseReq::InternalSwap(SigmaCloseReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fd_, other->_impl_.fd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaCloseReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[4]);
}

// ===================================================================

class SigmaErrRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaErrRep* msg);
};

const ::Rerror&
SigmaErrRep::_Internal::err(const SigmaErrRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaErrRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaErrRep::SigmaErrRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaErrRep)
}
SigmaErrRep::SigmaErrRep(const SigmaErrRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaErrRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaErrRep)
}

inline void SigmaErrRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaErrRep::~SigmaErrRep() {
  // @@protoc_insertion_point(destructor:SigmaErrRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaErrRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaErrRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaErrRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaErrRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaErrRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Rerror err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaErrRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaErrRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rerror err = 1;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaErrRep)
  return target;
}

size_t SigmaErrRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaErrRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rerror err = 1;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaErrRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaErrRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaErrRep::GetClassData() const { return &_class_data_; }


void SigmaErrRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaErrRep*>(&to_msg);
  auto& from = static_cast<const SigmaErrRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaErrRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaErrRep::CopyFrom(const SigmaErrRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaErrRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaErrRep::IsInitialized() const {
  return true;
}

void SigmaErrRep::InternalSwap(SigmaErrRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaErrRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[5]);
}

// ===================================================================

class SigmaPathReq::_Internal {
 public:
};

SigmaPathReq::SigmaPathReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaPathReq)
}
SigmaPathReq::SigmaPathReq(const SigmaPathReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaPathReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SigmaPathReq)
}

inline void SigmaPathReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaPathReq::~SigmaPathReq() {
  // @@protoc_insertion_point(destructor:SigmaPathReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaPathReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void SigmaPathReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaPathReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaPathReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaPathReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaPathReq.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaPathReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaPathReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaPathReq.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaPathReq)
  return target;
}

size_t SigmaPathReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaPathReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaPathReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaPathReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaPathReq::GetClassData() const { return &_class_data_; }


void SigmaPathReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaPathReq*>(&to_msg);
  auto& from = static_cast<const SigmaPathReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaPathReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaPathReq::CopyFrom(const SigmaPathReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaPathReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaPathReq::IsInitialized() const {
  return true;
}

void SigmaPathReq::InternalSwap(SigmaPathReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaPathReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[6]);
}

// ===================================================================

class SigmaStatRep::_Internal {
 public:
  static const ::TstatProto& stat(const SigmaStatRep* msg);
  static const ::Rerror& err(const SigmaStatRep* msg);
};

const ::TstatProto&
SigmaStatRep::_Internal::stat(const SigmaStatRep* msg) {
  return *msg->_impl_.stat_;
}
const ::Rerror&
SigmaStatRep::_Internal::err(const SigmaStatRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaStatRep::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
void SigmaStatRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaStatRep::SigmaStatRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaStatRep)
}
SigmaStatRep::SigmaStatRep(const SigmaStatRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaStatRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::TstatProto(*from._impl_.stat_);
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaStatRep)
}

inline void SigmaStatRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaStatRep::~SigmaStatRep() {
  // @@protoc_insertion_point(destructor:SigmaStatRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaStatRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stat_;
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaStatRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaStatRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaStatRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaStatRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TstatProto stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaStatRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaStatRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TstatProto stat = 1;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaStatRep)
  return target;
}

size_t SigmaStatRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaStatRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TstatProto stat = 1;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaStatRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaStatRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaStatRep::GetClassData() const { return &_class_data_; }


void SigmaStatRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaStatRep*>(&to_msg);
  auto& from = static_cast<const SigmaStatRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaStatRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::TstatProto::MergeFrom(
        from._internal_stat());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaStatRep::CopyFrom(const SigmaStatRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaStatRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaStatRep::IsInitialized() const {
  return true;
}

void SigmaStatRep::InternalSwap(SigmaStatRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaStatRep, _impl_.err_)
      + sizeof(SigmaStatRep::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(SigmaStatRep, _impl_.stat_)>(
          reinterpret_cast<char*>(&_impl_.stat_),
          reinterpret_cast<char*>(&other->_impl_.stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaStatRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[7]);
}

// ===================================================================

class SigmaCreateReq::_Internal {
 public:
  static const ::TfenceProto& fence(const SigmaCreateReq* msg);
};

const ::TfenceProto&
SigmaCreateReq::_Internal::fence(const SigmaCreateReq* msg) {
  return *msg->_impl_.fence_;
}
void SigmaCreateReq::clear_fence() {
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
}
SigmaCreateReq::SigmaCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaCreateReq)
}
SigmaCreateReq::SigmaCreateReq(const SigmaCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaCreateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.perm_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.leaseid_){}
    , decltype(_impl_.wait_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.perm_, &from._impl_.perm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wait_) -
    reinterpret_cast<char*>(&_impl_.perm_)) + sizeof(_impl_.wait_));
  // @@protoc_insertion_point(copy_constructor:SigmaCreateReq)
}

inline void SigmaCreateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.perm_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.leaseid_){uint64_t{0u}}
    , decltype(_impl_.wait_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaCreateReq::~SigmaCreateReq() {
  // @@protoc_insertion_point(destructor:SigmaCreateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void SigmaCreateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.perm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wait_) -
      reinterpret_cast<char*>(&_impl_.perm_)) + sizeof(_impl_.wait_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaCreateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaCreateReq.path"));
        } else
          goto handle_unusual;
        continue;
      // uint32 perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.perm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaseId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.leaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wait = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaCreateReq.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 perm = 2;
  if (this->_internal_perm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_perm(), target);
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  // uint64 leaseId = 4;
  if (this->_internal_leaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_leaseid(), target);
  }

  // .TfenceProto fence = 5;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  // bool wait = 6;
  if (this->_internal_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaCreateReq)
  return target;
}

size_t SigmaCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .TfenceProto fence = 5;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 perm = 2;
  if (this->_internal_perm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perm());
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint64 leaseId = 4;
  if (this->_internal_leaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leaseid());
  }

  // bool wait = 6;
  if (this->_internal_wait() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaCreateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaCreateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaCreateReq::GetClassData() const { return &_class_data_; }


void SigmaCreateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaCreateReq*>(&to_msg);
  auto& from = static_cast<const SigmaCreateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaCreateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_perm() != 0) {
    _this->_internal_set_perm(from._internal_perm());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_leaseid() != 0) {
    _this->_internal_set_leaseid(from._internal_leaseid());
  }
  if (from._internal_wait() != 0) {
    _this->_internal_set_wait(from._internal_wait());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaCreateReq::CopyFrom(const SigmaCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaCreateReq::IsInitialized() const {
  return true;
}

void SigmaCreateReq::InternalSwap(SigmaCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaCreateReq, _impl_.wait_)
      + sizeof(SigmaCreateReq::_impl_.wait_)
      - PROTOBUF_FIELD_OFFSET(SigmaCreateReq, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaCreateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[8]);
}

// ===================================================================

class SigmaFdRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaFdRep* msg);
};

const ::Rerror&
SigmaFdRep::_Internal::err(const SigmaFdRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaFdRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaFdRep::SigmaFdRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaFdRep)
}
SigmaFdRep::SigmaFdRep(const SigmaFdRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaFdRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.fd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  _this->_impl_.fd_ = from._impl_.fd_;
  // @@protoc_insertion_point(copy_constructor:SigmaFdRep)
}

inline void SigmaFdRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.fd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaFdRep::~SigmaFdRep() {
  // @@protoc_insertion_point(destructor:SigmaFdRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaFdRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaFdRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaFdRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaFdRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _impl_.fd_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaFdRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaFdRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaFdRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaFdRep)
  return target;
}

size_t SigmaFdRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaFdRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaFdRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaFdRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaFdRep::GetClassData() const { return &_class_data_; }


void SigmaFdRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaFdRep*>(&to_msg);
  auto& from = static_cast<const SigmaFdRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaFdRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaFdRep::CopyFrom(const SigmaFdRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaFdRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaFdRep::IsInitialized() const {
  return true;
}

void SigmaFdRep::InternalSwap(SigmaFdRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaFdRep, _impl_.fd_)
      + sizeof(SigmaFdRep::_impl_.fd_)
      - PROTOBUF_FIELD_OFFSET(SigmaFdRep, _impl_.err_)>(
          reinterpret_cast<char*>(&_impl_.err_),
          reinterpret_cast<char*>(&other->_impl_.err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaFdRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[9]);
}

// ===================================================================

class SigmaRenameReq::_Internal {
 public:
};

SigmaRenameReq::SigmaRenameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaRenameReq)
}
SigmaRenameReq::SigmaRenameReq(const SigmaRenameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaRenameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst().empty()) {
    _this->_impl_.dst_.Set(from._internal_dst(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SigmaRenameReq)
}

inline void SigmaRenameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaRenameReq::~SigmaRenameReq() {
  // @@protoc_insertion_point(destructor:SigmaRenameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaRenameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.dst_.Destroy();
}

void SigmaRenameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaRenameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaRenameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.dst_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaRenameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaRenameReq.src"));
        } else
          goto handle_unusual;
        continue;
      // string dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaRenameReq.dst"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaRenameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaRenameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaRenameReq.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst().data(), static_cast<int>(this->_internal_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaRenameReq.dst");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaRenameReq)
  return target;
}

size_t SigmaRenameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaRenameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaRenameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaRenameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaRenameReq::GetClassData() const { return &_class_data_; }


void SigmaRenameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaRenameReq*>(&to_msg);
  auto& from = static_cast<const SigmaRenameReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaRenameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_dst().empty()) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaRenameReq::CopyFrom(const SigmaRenameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaRenameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaRenameReq::IsInitialized() const {
  return true;
}

void SigmaRenameReq::InternalSwap(SigmaRenameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dst_, lhs_arena,
      &other->_impl_.dst_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaRenameReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[10]);
}

// ===================================================================

class SigmaDataRep::_Internal {
 public:
  static const ::Blob& blob(const SigmaDataRep* msg);
  static const ::Rerror& err(const SigmaDataRep* msg);
};

const ::Blob&
SigmaDataRep::_Internal::blob(const SigmaDataRep* msg) {
  return *msg->_impl_.blob_;
}
const ::Rerror&
SigmaDataRep::_Internal::err(const SigmaDataRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaDataRep::clear_blob() {
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
}
void SigmaDataRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaDataRep::SigmaDataRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaDataRep)
}
SigmaDataRep::SigmaDataRep(const SigmaDataRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaDataRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blob()) {
    _this->_impl_.blob_ = new ::Blob(*from._impl_.blob_);
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaDataRep)
}

inline void SigmaDataRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaDataRep::~SigmaDataRep() {
  // @@protoc_insertion_point(destructor:SigmaDataRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaDataRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.blob_;
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaDataRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaDataRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaDataRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaDataRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Blob blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaDataRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaDataRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Blob blob = 1;
  if (this->_internal_has_blob()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaDataRep)
  return target;
}

size_t SigmaDataRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaDataRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Blob blob = 1;
  if (this->_internal_has_blob()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaDataRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaDataRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaDataRep::GetClassData() const { return &_class_data_; }


void SigmaDataRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaDataRep*>(&to_msg);
  auto& from = static_cast<const SigmaDataRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaDataRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blob()) {
    _this->_internal_mutable_blob()->::Blob::MergeFrom(
        from._internal_blob());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaDataRep::CopyFrom(const SigmaDataRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaDataRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaDataRep::IsInitialized() const {
  return true;
}

void SigmaDataRep::InternalSwap(SigmaDataRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaDataRep, _impl_.err_)
      + sizeof(SigmaDataRep::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(SigmaDataRep, _impl_.blob_)>(
          reinterpret_cast<char*>(&_impl_.blob_),
          reinterpret_cast<char*>(&other->_impl_.blob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaDataRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[11]);
}

// ===================================================================

class SigmaPutFileReq::_Internal {
 public:
  static const ::Blob& blob(const SigmaPutFileReq* msg);
};

const ::Blob&
SigmaPutFileReq::_Internal::blob(const SigmaPutFileReq* msg) {
  return *msg->_impl_.blob_;
}
void SigmaPutFileReq::clear_blob() {
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
}
SigmaPutFileReq::SigmaPutFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaPutFileReq)
}
SigmaPutFileReq::SigmaPutFileReq(const SigmaPutFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaPutFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.perm_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.leaseid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_blob()) {
    _this->_impl_.blob_ = new ::Blob(*from._impl_.blob_);
  }
  ::memcpy(&_impl_.perm_, &from._impl_.perm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leaseid_) -
    reinterpret_cast<char*>(&_impl_.perm_)) + sizeof(_impl_.leaseid_));
  // @@protoc_insertion_point(copy_constructor:SigmaPutFileReq)
}

inline void SigmaPutFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.perm_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.leaseid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaPutFileReq::~SigmaPutFileReq() {
  // @@protoc_insertion_point(destructor:SigmaPutFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaPutFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.blob_;
}

void SigmaPutFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaPutFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaPutFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
  ::memset(&_impl_.perm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leaseid_) -
      reinterpret_cast<char*>(&_impl_.perm_)) + sizeof(_impl_.leaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaPutFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaPutFileReq.path"));
        } else
          goto handle_unusual;
        continue;
      // uint32 perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.perm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaseId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Blob blob = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaPutFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaPutFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaPutFileReq.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 perm = 2;
  if (this->_internal_perm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_perm(), target);
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_offset(), target);
  }

  // uint64 leaseId = 5;
  if (this->_internal_leaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leaseid(), target);
  }

  // .Blob blob = 6;
  if (this->_internal_has_blob()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaPutFileReq)
  return target;
}

size_t SigmaPutFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaPutFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .Blob blob = 6;
  if (this->_internal_has_blob()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);
  }

  // uint32 perm = 2;
  if (this->_internal_perm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perm());
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 leaseId = 5;
  if (this->_internal_leaseid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leaseid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaPutFileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaPutFileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaPutFileReq::GetClassData() const { return &_class_data_; }


void SigmaPutFileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaPutFileReq*>(&to_msg);
  auto& from = static_cast<const SigmaPutFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaPutFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_blob()) {
    _this->_internal_mutable_blob()->::Blob::MergeFrom(
        from._internal_blob());
  }
  if (from._internal_perm() != 0) {
    _this->_internal_set_perm(from._internal_perm());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_leaseid() != 0) {
    _this->_internal_set_leaseid(from._internal_leaseid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaPutFileReq::CopyFrom(const SigmaPutFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaPutFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaPutFileReq::IsInitialized() const {
  return true;
}

void SigmaPutFileReq::InternalSwap(SigmaPutFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaPutFileReq, _impl_.leaseid_)
      + sizeof(SigmaPutFileReq::_impl_.leaseid_)
      - PROTOBUF_FIELD_OFFSET(SigmaPutFileReq, _impl_.blob_)>(
          reinterpret_cast<char*>(&_impl_.blob_),
          reinterpret_cast<char*>(&other->_impl_.blob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaPutFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[12]);
}

// ===================================================================

class SigmaSizeRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaSizeRep* msg);
};

const ::Rerror&
SigmaSizeRep::_Internal::err(const SigmaSizeRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaSizeRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaSizeRep::SigmaSizeRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaSizeRep)
}
SigmaSizeRep::SigmaSizeRep(const SigmaSizeRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaSizeRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:SigmaSizeRep)
}

inline void SigmaSizeRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaSizeRep::~SigmaSizeRep() {
  // @@protoc_insertion_point(destructor:SigmaSizeRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaSizeRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaSizeRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaSizeRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaSizeRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _impl_.size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaSizeRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaSizeRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaSizeRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaSizeRep)
  return target;
}

size_t SigmaSizeRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaSizeRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaSizeRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaSizeRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaSizeRep::GetClassData() const { return &_class_data_; }


void SigmaSizeRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaSizeRep*>(&to_msg);
  auto& from = static_cast<const SigmaSizeRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaSizeRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaSizeRep::CopyFrom(const SigmaSizeRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaSizeRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaSizeRep::IsInitialized() const {
  return true;
}

void SigmaSizeRep::InternalSwap(SigmaSizeRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaSizeRep, _impl_.size_)
      + sizeof(SigmaSizeRep::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(SigmaSizeRep, _impl_.err_)>(
          reinterpret_cast<char*>(&_impl_.err_),
          reinterpret_cast<char*>(&other->_impl_.err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaSizeRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[13]);
}

// ===================================================================

class SigmaReadReq::_Internal {
 public:
};

SigmaReadReq::SigmaReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaReadReq)
}
SigmaReadReq::SigmaReadReq(const SigmaReadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaReadReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , decltype(_impl_.off_){}
    , decltype(_impl_.fd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fd_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.fd_));
  // @@protoc_insertion_point(copy_constructor:SigmaReadReq)
}

inline void SigmaReadReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.off_){uint64_t{0u}}
    , decltype(_impl_.fd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaReadReq::~SigmaReadReq() {
  // @@protoc_insertion_point(destructor:SigmaReadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaReadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SigmaReadReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaReadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaReadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fd_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaReadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 off = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaReadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaReadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // uint64 off = 3;
  if (this->_internal_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaReadReq)
  return target;
}

size_t SigmaReadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaReadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 off = 3;
  if (this->_internal_off() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_off());
  }

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaReadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaReadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaReadReq::GetClassData() const { return &_class_data_; }


void SigmaReadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaReadReq*>(&to_msg);
  auto& from = static_cast<const SigmaReadReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaReadReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_off() != 0) {
    _this->_internal_set_off(from._internal_off());
  }
  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaReadReq::CopyFrom(const SigmaReadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaReadReq::IsInitialized() const {
  return true;
}

void SigmaReadReq::InternalSwap(SigmaReadReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaReadReq, _impl_.fd_)
      + sizeof(SigmaReadReq::_impl_.fd_)
      - PROTOBUF_FIELD_OFFSET(SigmaReadReq, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaReadReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[14]);
}

// ===================================================================

class SigmaWriteReq::_Internal {
 public:
  static const ::TfenceProto& fence(const SigmaWriteReq* msg);
  static const ::Blob& blob(const SigmaWriteReq* msg);
};

const ::TfenceProto&
SigmaWriteReq::_Internal::fence(const SigmaWriteReq* msg) {
  return *msg->_impl_.fence_;
}
const ::Blob&
SigmaWriteReq::_Internal::blob(const SigmaWriteReq* msg) {
  return *msg->_impl_.blob_;
}
void SigmaWriteReq::clear_fence() {
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
}
void SigmaWriteReq::clear_blob() {
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
}
SigmaWriteReq::SigmaWriteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaWriteReq)
}
SigmaWriteReq::SigmaWriteReq(const SigmaWriteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaWriteReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.fd_){}
    , decltype(_impl_.noutvec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  if (from._internal_has_blob()) {
    _this->_impl_.blob_ = new ::Blob(*from._impl_.blob_);
  }
  ::memcpy(&_impl_.fd_, &from._impl_.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.noutvec_) -
    reinterpret_cast<char*>(&_impl_.fd_)) + sizeof(_impl_.noutvec_));
  // @@protoc_insertion_point(copy_constructor:SigmaWriteReq)
}

inline void SigmaWriteReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.fd_){0u}
    , decltype(_impl_.noutvec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaWriteReq::~SigmaWriteReq() {
  // @@protoc_insertion_point(destructor:SigmaWriteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaWriteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_;
  if (this != internal_default_instance()) delete _impl_.blob_;
}

void SigmaWriteReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaWriteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaWriteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
  ::memset(&_impl_.fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.noutvec_) -
      reinterpret_cast<char*>(&_impl_.fd_)) + sizeof(_impl_.noutvec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaWriteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Blob blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nOutVec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.noutvec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaWriteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaWriteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  // .TfenceProto fence = 2;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  // .Blob blob = 3;
  if (this->_internal_has_blob()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  // uint32 nOutVec = 4;
  if (this->_internal_noutvec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_noutvec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaWriteReq)
  return target;
}

size_t SigmaWriteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaWriteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TfenceProto fence = 2;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // .Blob blob = 3;
  if (this->_internal_has_blob()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);
  }

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  // uint32 nOutVec = 4;
  if (this->_internal_noutvec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_noutvec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaWriteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaWriteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaWriteReq::GetClassData() const { return &_class_data_; }


void SigmaWriteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaWriteReq*>(&to_msg);
  auto& from = static_cast<const SigmaWriteReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaWriteReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_has_blob()) {
    _this->_internal_mutable_blob()->::Blob::MergeFrom(
        from._internal_blob());
  }
  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  if (from._internal_noutvec() != 0) {
    _this->_internal_set_noutvec(from._internal_noutvec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaWriteReq::CopyFrom(const SigmaWriteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaWriteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaWriteReq::IsInitialized() const {
  return true;
}

void SigmaWriteReq::InternalSwap(SigmaWriteReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaWriteReq, _impl_.noutvec_)
      + sizeof(SigmaWriteReq::_impl_.noutvec_)
      - PROTOBUF_FIELD_OFFSET(SigmaWriteReq, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaWriteReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[15]);
}

// ===================================================================

class SigmaSeekReq::_Internal {
 public:
};

SigmaSeekReq::SigmaSeekReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaSeekReq)
}
SigmaSeekReq::SigmaSeekReq(const SigmaSeekReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaSeekReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.fd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fd_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.fd_));
  // @@protoc_insertion_point(copy_constructor:SigmaSeekReq)
}

inline void SigmaSeekReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.fd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaSeekReq::~SigmaSeekReq() {
  // @@protoc_insertion_point(destructor:SigmaSeekReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaSeekReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SigmaSeekReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaSeekReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaSeekReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fd_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaSeekReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaSeekReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaSeekReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fd(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaSeekReq)
  return target;
}

size_t SigmaSeekReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaSeekReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint32 fd = 1;
  if (this->_internal_fd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaSeekReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaSeekReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaSeekReq::GetClassData() const { return &_class_data_; }


void SigmaSeekReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaSeekReq*>(&to_msg);
  auto& from = static_cast<const SigmaSeekReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaSeekReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_fd() != 0) {
    _this->_internal_set_fd(from._internal_fd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaSeekReq::CopyFrom(const SigmaSeekReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaSeekReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaSeekReq::IsInitialized() const {
  return true;
}

void SigmaSeekReq::InternalSwap(SigmaSeekReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaSeekReq, _impl_.fd_)
      + sizeof(SigmaSeekReq::_impl_.fd_)
      - PROTOBUF_FIELD_OFFSET(SigmaSeekReq, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaSeekReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[16]);
}

// ===================================================================

class SigmaClntIdRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaClntIdRep* msg);
};

const ::Rerror&
SigmaClntIdRep::_Internal::err(const SigmaClntIdRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaClntIdRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaClntIdRep::SigmaClntIdRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaClntIdRep)
}
SigmaClntIdRep::SigmaClntIdRep(const SigmaClntIdRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaClntIdRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.clntid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  _this->_impl_.clntid_ = from._impl_.clntid_;
  // @@protoc_insertion_point(copy_constructor:SigmaClntIdRep)
}

inline void SigmaClntIdRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){nullptr}
    , decltype(_impl_.clntid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaClntIdRep::~SigmaClntIdRep() {
  // @@protoc_insertion_point(destructor:SigmaClntIdRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaClntIdRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaClntIdRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaClntIdRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaClntIdRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _impl_.clntid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaClntIdRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 clntId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clntid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaClntIdRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaClntIdRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 clntId = 1;
  if (this->_internal_clntid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clntid(), target);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaClntIdRep)
  return target;
}

size_t SigmaClntIdRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaClntIdRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  // uint64 clntId = 1;
  if (this->_internal_clntid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_clntid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaClntIdRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaClntIdRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaClntIdRep::GetClassData() const { return &_class_data_; }


void SigmaClntIdRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaClntIdRep*>(&to_msg);
  auto& from = static_cast<const SigmaClntIdRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaClntIdRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  if (from._internal_clntid() != 0) {
    _this->_internal_set_clntid(from._internal_clntid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaClntIdRep::CopyFrom(const SigmaClntIdRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaClntIdRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaClntIdRep::IsInitialized() const {
  return true;
}

void SigmaClntIdRep::InternalSwap(SigmaClntIdRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaClntIdRep, _impl_.clntid_)
      + sizeof(SigmaClntIdRep::_impl_.clntid_)
      - PROTOBUF_FIELD_OFFSET(SigmaClntIdRep, _impl_.err_)>(
          reinterpret_cast<char*>(&_impl_.err_),
          reinterpret_cast<char*>(&other->_impl_.err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaClntIdRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[17]);
}

// ===================================================================

class SigmaFenceReq::_Internal {
 public:
  static const ::TfenceProto& fence(const SigmaFenceReq* msg);
};

const ::TfenceProto&
SigmaFenceReq::_Internal::fence(const SigmaFenceReq* msg) {
  return *msg->_impl_.fence_;
}
void SigmaFenceReq::clear_fence() {
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
}
SigmaFenceReq::SigmaFenceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaFenceReq)
}
SigmaFenceReq::SigmaFenceReq(const SigmaFenceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaFenceReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.fence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaFenceReq)
}

inline void SigmaFenceReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.fence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaFenceReq::~SigmaFenceReq() {
  // @@protoc_insertion_point(destructor:SigmaFenceReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaFenceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void SigmaFenceReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaFenceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaFenceReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaFenceReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaFenceReq.Path"));
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto Fence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaFenceReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaFenceReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaFenceReq.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .TfenceProto Fence = 2;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaFenceReq)
  return target;
}

size_t SigmaFenceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaFenceReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .TfenceProto Fence = 2;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaFenceReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaFenceReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaFenceReq::GetClassData() const { return &_class_data_; }


void SigmaFenceReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaFenceReq*>(&to_msg);
  auto& from = static_cast<const SigmaFenceReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaFenceReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaFenceReq::CopyFrom(const SigmaFenceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaFenceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaFenceReq::IsInitialized() const {
  return true;
}

void SigmaFenceReq::InternalSwap(SigmaFenceReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.fence_, other->_impl_.fence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaFenceReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[18]);
}

// ===================================================================

class SigmaMountTreeReq::_Internal {
 public:
  static const ::TendpointProto& endpoint(const SigmaMountTreeReq* msg);
};

const ::TendpointProto&
SigmaMountTreeReq::_Internal::endpoint(const SigmaMountTreeReq* msg) {
  return *msg->_impl_.endpoint_;
}
void SigmaMountTreeReq::clear_endpoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
}
SigmaMountTreeReq::SigmaMountTreeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaMountTreeReq)
}
SigmaMountTreeReq::SigmaMountTreeReq(const SigmaMountTreeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaMountTreeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tree_){}
    , decltype(_impl_.mountname_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tree_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tree_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tree().empty()) {
    _this->_impl_.tree_.Set(from._internal_tree(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mountname().empty()) {
    _this->_impl_.mountname_.Set(from._internal_mountname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_ = new ::TendpointProto(*from._impl_.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaMountTreeReq)
}

inline void SigmaMountTreeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tree_){}
    , decltype(_impl_.mountname_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tree_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tree_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaMountTreeReq::~SigmaMountTreeReq() {
  // @@protoc_insertion_point(destructor:SigmaMountTreeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaMountTreeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tree_.Destroy();
  _impl_.mountname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.endpoint_;
}

void SigmaMountTreeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaMountTreeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaMountTreeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tree_.ClearToEmpty();
  _impl_.mountname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaMountTreeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TendpointProto Endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tree();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaMountTreeReq.tree"));
        } else
          goto handle_unusual;
        continue;
      // string mountName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaMountTreeReq.mountName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaMountTreeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaMountTreeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TendpointProto Endpoint = 1;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  // string tree = 2;
  if (!this->_internal_tree().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tree().data(), static_cast<int>(this->_internal_tree().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaMountTreeReq.tree");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tree(), target);
  }

  // string mountName = 3;
  if (!this->_internal_mountname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mountname().data(), static_cast<int>(this->_internal_mountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaMountTreeReq.mountName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mountname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaMountTreeReq)
  return target;
}

size_t SigmaMountTreeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaMountTreeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tree = 2;
  if (!this->_internal_tree().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tree());
  }

  // string mountName = 3;
  if (!this->_internal_mountname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mountname());
  }

  // .TendpointProto Endpoint = 1;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endpoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaMountTreeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaMountTreeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaMountTreeReq::GetClassData() const { return &_class_data_; }


void SigmaMountTreeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaMountTreeReq*>(&to_msg);
  auto& from = static_cast<const SigmaMountTreeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaMountTreeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tree().empty()) {
    _this->_internal_set_tree(from._internal_tree());
  }
  if (!from._internal_mountname().empty()) {
    _this->_internal_set_mountname(from._internal_mountname());
  }
  if (from._internal_has_endpoint()) {
    _this->_internal_mutable_endpoint()->::TendpointProto::MergeFrom(
        from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaMountTreeReq::CopyFrom(const SigmaMountTreeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaMountTreeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaMountTreeReq::IsInitialized() const {
  return true;
}

void SigmaMountTreeReq::InternalSwap(SigmaMountTreeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tree_, lhs_arena,
      &other->_impl_.tree_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mountname_, lhs_arena,
      &other->_impl_.mountname_, rhs_arena
  );
  swap(_impl_.endpoint_, other->_impl_.endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaMountTreeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[19]);
}

// ===================================================================

class SigmaLastMountRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaLastMountRep* msg);
};

const ::Rerror&
SigmaLastMountRep::_Internal::err(const SigmaLastMountRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaLastMountRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaLastMountRep::SigmaLastMountRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaLastMountRep)
}
SigmaLastMountRep::SigmaLastMountRep(const SigmaLastMountRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaLastMountRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path1_){from._impl_.path1_}
    , decltype(_impl_.path2_){from._impl_.path2_}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaLastMountRep)
}

inline void SigmaLastMountRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path1_){arena}
    , decltype(_impl_.path2_){arena}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaLastMountRep::~SigmaLastMountRep() {
  // @@protoc_insertion_point(destructor:SigmaLastMountRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaLastMountRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path1_.~RepeatedPtrField();
  _impl_.path2_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaLastMountRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaLastMountRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaLastMountRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path1_.Clear();
  _impl_.path2_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaLastMountRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string path1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path1();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SigmaLastMountRep.path1"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string path2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path2();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SigmaLastMountRep.path2"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaLastMountRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaLastMountRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string path1 = 1;
  for (int i = 0, n = this->_internal_path1_size(); i < n; i++) {
    const auto& s = this->_internal_path1(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaLastMountRep.path1");
    target = stream->WriteString(1, s, target);
  }

  // repeated string path2 = 2;
  for (int i = 0, n = this->_internal_path2_size(); i < n; i++) {
    const auto& s = this->_internal_path2(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaLastMountRep.path2");
    target = stream->WriteString(2, s, target);
  }

  // .Rerror err = 3;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaLastMountRep)
  return target;
}

size_t SigmaLastMountRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaLastMountRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string path1 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.path1_.size());
  for (int i = 0, n = _impl_.path1_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.path1_.Get(i));
  }

  // repeated string path2 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.path2_.size());
  for (int i = 0, n = _impl_.path2_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.path2_.Get(i));
  }

  // .Rerror err = 3;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaLastMountRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaLastMountRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaLastMountRep::GetClassData() const { return &_class_data_; }


void SigmaLastMountRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaLastMountRep*>(&to_msg);
  auto& from = static_cast<const SigmaLastMountRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaLastMountRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path1_.MergeFrom(from._impl_.path1_);
  _this->_impl_.path2_.MergeFrom(from._impl_.path2_);
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaLastMountRep::CopyFrom(const SigmaLastMountRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaLastMountRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaLastMountRep::IsInitialized() const {
  return true;
}

void SigmaLastMountRep::InternalSwap(SigmaLastMountRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path1_.InternalSwap(&other->_impl_.path1_);
  _impl_.path2_.InternalSwap(&other->_impl_.path2_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaLastMountRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[20]);
}

// ===================================================================

class SigmaMountReq::_Internal {
 public:
  static const ::TendpointProto& endpoint(const SigmaMountReq* msg);
};

const ::TendpointProto&
SigmaMountReq::_Internal::endpoint(const SigmaMountReq* msg) {
  return *msg->_impl_.endpoint_;
}
void SigmaMountReq::clear_endpoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
}
SigmaMountReq::SigmaMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaMountReq)
}
SigmaMountReq::SigmaMountReq(const SigmaMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaMountReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_ = new ::TendpointProto(*from._impl_.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaMountReq)
}

inline void SigmaMountReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaMountReq::~SigmaMountReq() {
  // @@protoc_insertion_point(destructor:SigmaMountReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_.Destroy();
  if (this != internal_default_instance()) delete _impl_.endpoint_;
}

void SigmaMountReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaMountReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaMountReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TendpointProto endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaMountReq.port"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaMountReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaMountReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TendpointProto endpoint = 1;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaMountReq.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaMountReq)
  return target;
}

size_t SigmaMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaMountReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // .TendpointProto endpoint = 1;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endpoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaMountReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaMountReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaMountReq::GetClassData() const { return &_class_data_; }


void SigmaMountReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaMountReq*>(&to_msg);
  auto& from = static_cast<const SigmaMountReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaMountReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_has_endpoint()) {
    _this->_internal_mutable_endpoint()->::TendpointProto::MergeFrom(
        from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaMountReq::CopyFrom(const SigmaMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaMountReq::IsInitialized() const {
  return true;
}

void SigmaMountReq::InternalSwap(SigmaMountReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
  swap(_impl_.endpoint_, other->_impl_.endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaMountReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[21]);
}

// ===================================================================

class SigmaMountRep::_Internal {
 public:
  static const ::TendpointProto& endpoint(const SigmaMountRep* msg);
  static const ::Rerror& err(const SigmaMountRep* msg);
};

const ::TendpointProto&
SigmaMountRep::_Internal::endpoint(const SigmaMountRep* msg) {
  return *msg->_impl_.endpoint_;
}
const ::Rerror&
SigmaMountRep::_Internal::err(const SigmaMountRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaMountRep::clear_endpoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
}
void SigmaMountRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaMountRep::SigmaMountRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaMountRep)
}
SigmaMountRep::SigmaMountRep(const SigmaMountRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaMountRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , decltype(_impl_.local_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_ = new ::TendpointProto(*from._impl_.endpoint_);
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  _this->_impl_.local_ = from._impl_.local_;
  // @@protoc_insertion_point(copy_constructor:SigmaMountRep)
}

inline void SigmaMountRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , decltype(_impl_.local_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaMountRep::~SigmaMountRep() {
  // @@protoc_insertion_point(destructor:SigmaMountRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaMountRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.endpoint_;
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaMountRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaMountRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaMountRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _impl_.local_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaMountRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TendpointProto endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool local = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaMountRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaMountRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TendpointProto endpoint = 1;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  // bool local = 2;
  if (this->_internal_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_local(), target);
  }

  // .Rerror err = 3;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaMountRep)
  return target;
}

size_t SigmaMountRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaMountRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TendpointProto endpoint = 1;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endpoint_);
  }

  // .Rerror err = 3;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  // bool local = 2;
  if (this->_internal_local() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaMountRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaMountRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaMountRep::GetClassData() const { return &_class_data_; }


void SigmaMountRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaMountRep*>(&to_msg);
  auto& from = static_cast<const SigmaMountRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaMountRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endpoint()) {
    _this->_internal_mutable_endpoint()->::TendpointProto::MergeFrom(
        from._internal_endpoint());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  if (from._internal_local() != 0) {
    _this->_internal_set_local(from._internal_local());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaMountRep::CopyFrom(const SigmaMountRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaMountRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaMountRep::IsInitialized() const {
  return true;
}

void SigmaMountRep::InternalSwap(SigmaMountRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaMountRep, _impl_.local_)
      + sizeof(SigmaMountRep::_impl_.local_)
      - PROTOBUF_FIELD_OFFSET(SigmaMountRep, _impl_.endpoint_)>(
          reinterpret_cast<char*>(&_impl_.endpoint_),
          reinterpret_cast<char*>(&other->_impl_.endpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaMountRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[22]);
}

// ===================================================================

class SigmaMountsRep::_Internal {
 public:
  static const ::Rerror& err(const SigmaMountsRep* msg);
};

const ::Rerror&
SigmaMountsRep::_Internal::err(const SigmaMountsRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaMountsRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaMountsRep::SigmaMountsRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaMountsRep)
}
SigmaMountsRep::SigmaMountsRep(const SigmaMountsRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaMountsRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaMountsRep)
}

inline void SigmaMountsRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaMountsRep::~SigmaMountsRep() {
  // @@protoc_insertion_point(destructor:SigmaMountsRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaMountsRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.endpoints_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaMountsRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaMountsRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaMountsRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpoints_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaMountsRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string endpoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SigmaMountsRep.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaMountsRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaMountsRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string endpoints = 1;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaMountsRep.endpoints");
    target = stream->WriteString(1, s, target);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaMountsRep)
  return target;
}

size_t SigmaMountsRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaMountsRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string endpoints = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaMountsRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaMountsRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaMountsRep::GetClassData() const { return &_class_data_; }


void SigmaMountsRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaMountsRep*>(&to_msg);
  auto& from = static_cast<const SigmaMountsRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaMountsRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaMountsRep::CopyFrom(const SigmaMountsRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaMountsRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaMountsRep::IsInitialized() const {
  return true;
}

void SigmaMountsRep::InternalSwap(SigmaMountsRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaMountsRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[23]);
}

// ===================================================================

class SigmaRegisterEPReq::_Internal {
 public:
  static const ::TendpointProto& endpoint(const SigmaRegisterEPReq* msg);
};

const ::TendpointProto&
SigmaRegisterEPReq::_Internal::endpoint(const SigmaRegisterEPReq* msg) {
  return *msg->_impl_.endpoint_;
}
void SigmaRegisterEPReq::clear_endpoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
}
SigmaRegisterEPReq::SigmaRegisterEPReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaRegisterEPReq)
}
SigmaRegisterEPReq::SigmaRegisterEPReq(const SigmaRegisterEPReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaRegisterEPReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_ = new ::TendpointProto(*from._impl_.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaRegisterEPReq)
}

inline void SigmaRegisterEPReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.endpoint_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaRegisterEPReq::~SigmaRegisterEPReq() {
  // @@protoc_insertion_point(destructor:SigmaRegisterEPReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaRegisterEPReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.endpoint_;
}

void SigmaRegisterEPReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaRegisterEPReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaRegisterEPReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.endpoint_ != nullptr) {
    delete _impl_.endpoint_;
  }
  _impl_.endpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaRegisterEPReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaRegisterEPReq.path"));
        } else
          goto handle_unusual;
        continue;
      // .TendpointProto endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaRegisterEPReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaRegisterEPReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaRegisterEPReq.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .TendpointProto endpoint = 2;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaRegisterEPReq)
  return target;
}

size_t SigmaRegisterEPReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaRegisterEPReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .TendpointProto endpoint = 2;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endpoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaRegisterEPReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaRegisterEPReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaRegisterEPReq::GetClassData() const { return &_class_data_; }


void SigmaRegisterEPReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaRegisterEPReq*>(&to_msg);
  auto& from = static_cast<const SigmaRegisterEPReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaRegisterEPReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_endpoint()) {
    _this->_internal_mutable_endpoint()->::TendpointProto::MergeFrom(
        from._internal_endpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaRegisterEPReq::CopyFrom(const SigmaRegisterEPReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaRegisterEPReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaRegisterEPReq::IsInitialized() const {
  return true;
}

void SigmaRegisterEPReq::InternalSwap(SigmaRegisterEPReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.endpoint_, other->_impl_.endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaRegisterEPReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[24]);
}

// ===================================================================

class SigmaExitedReq::_Internal {
 public:
};

SigmaExitedReq::SigmaExitedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaExitedReq)
}
SigmaExitedReq::SigmaExitedReq(const SigmaExitedReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaExitedReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:SigmaExitedReq)
}

inline void SigmaExitedReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigmaExitedReq::~SigmaExitedReq() {
  // @@protoc_insertion_point(destructor:SigmaExitedReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaExitedReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void SigmaExitedReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaExitedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaExitedReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaExitedReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SigmaExitedReq.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaExitedReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaExitedReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SigmaExitedReq.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaExitedReq)
  return target;
}

size_t SigmaExitedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaExitedReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaExitedReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaExitedReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaExitedReq::GetClassData() const { return &_class_data_; }


void SigmaExitedReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaExitedReq*>(&to_msg);
  auto& from = static_cast<const SigmaExitedReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaExitedReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaExitedReq::CopyFrom(const SigmaExitedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaExitedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaExitedReq::IsInitialized() const {
  return true;
}

void SigmaExitedReq::InternalSwap(SigmaExitedReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaExitedReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[25]);
}

// ===================================================================

class SigmaDelegatedRPCReq::_Internal {
 public:
};

SigmaDelegatedRPCReq::SigmaDelegatedRPCReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaDelegatedRPCReq)
}
SigmaDelegatedRPCReq::SigmaDelegatedRPCReq(const SigmaDelegatedRPCReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaDelegatedRPCReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpcidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rpcidx_ = from._impl_.rpcidx_;
  // @@protoc_insertion_point(copy_constructor:SigmaDelegatedRPCReq)
}

inline void SigmaDelegatedRPCReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpcidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaDelegatedRPCReq::~SigmaDelegatedRPCReq() {
  // @@protoc_insertion_point(destructor:SigmaDelegatedRPCReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaDelegatedRPCReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SigmaDelegatedRPCReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaDelegatedRPCReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaDelegatedRPCReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpcidx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaDelegatedRPCReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rPCIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rpcidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaDelegatedRPCReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaDelegatedRPCReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rPCIdx = 1;
  if (this->_internal_rpcidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rpcidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaDelegatedRPCReq)
  return target;
}

size_t SigmaDelegatedRPCReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaDelegatedRPCReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rPCIdx = 1;
  if (this->_internal_rpcidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rpcidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaDelegatedRPCReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaDelegatedRPCReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaDelegatedRPCReq::GetClassData() const { return &_class_data_; }


void SigmaDelegatedRPCReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaDelegatedRPCReq*>(&to_msg);
  auto& from = static_cast<const SigmaDelegatedRPCReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaDelegatedRPCReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rpcidx() != 0) {
    _this->_internal_set_rpcidx(from._internal_rpcidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaDelegatedRPCReq::CopyFrom(const SigmaDelegatedRPCReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaDelegatedRPCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaDelegatedRPCReq::IsInitialized() const {
  return true;
}

void SigmaDelegatedRPCReq::InternalSwap(SigmaDelegatedRPCReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rpcidx_, other->_impl_.rpcidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaDelegatedRPCReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[26]);
}

// ===================================================================

class SigmaDelegatedRPCRep::_Internal {
 public:
  static const ::Blob& blob(const SigmaDelegatedRPCRep* msg);
  static const ::Rerror& err(const SigmaDelegatedRPCRep* msg);
};

const ::Blob&
SigmaDelegatedRPCRep::_Internal::blob(const SigmaDelegatedRPCRep* msg) {
  return *msg->_impl_.blob_;
}
const ::Rerror&
SigmaDelegatedRPCRep::_Internal::err(const SigmaDelegatedRPCRep* msg) {
  return *msg->_impl_.err_;
}
void SigmaDelegatedRPCRep::clear_blob() {
  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
}
void SigmaDelegatedRPCRep::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
SigmaDelegatedRPCRep::SigmaDelegatedRPCRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SigmaDelegatedRPCRep)
}
SigmaDelegatedRPCRep::SigmaDelegatedRPCRep(const SigmaDelegatedRPCRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigmaDelegatedRPCRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blob()) {
    _this->_impl_.blob_ = new ::Blob(*from._impl_.blob_);
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::Rerror(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:SigmaDelegatedRPCRep)
}

inline void SigmaDelegatedRPCRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blob_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SigmaDelegatedRPCRep::~SigmaDelegatedRPCRep() {
  // @@protoc_insertion_point(destructor:SigmaDelegatedRPCRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigmaDelegatedRPCRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.blob_;
  if (this != internal_default_instance()) delete _impl_.err_;
}

void SigmaDelegatedRPCRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigmaDelegatedRPCRep::Clear() {
// @@protoc_insertion_point(message_clear_start:SigmaDelegatedRPCRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.blob_ != nullptr) {
    delete _impl_.blob_;
  }
  _impl_.blob_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigmaDelegatedRPCRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Blob blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rerror err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SigmaDelegatedRPCRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SigmaDelegatedRPCRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Blob blob = 1;
  if (this->_internal_has_blob()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::blob(this),
        _Internal::blob(this).GetCachedSize(), target, stream);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SigmaDelegatedRPCRep)
  return target;
}

size_t SigmaDelegatedRPCRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SigmaDelegatedRPCRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Blob blob = 1;
  if (this->_internal_has_blob()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blob_);
  }

  // .Rerror err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigmaDelegatedRPCRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigmaDelegatedRPCRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigmaDelegatedRPCRep::GetClassData() const { return &_class_data_; }


void SigmaDelegatedRPCRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigmaDelegatedRPCRep*>(&to_msg);
  auto& from = static_cast<const SigmaDelegatedRPCRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SigmaDelegatedRPCRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blob()) {
    _this->_internal_mutable_blob()->::Blob::MergeFrom(
        from._internal_blob());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::Rerror::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigmaDelegatedRPCRep::CopyFrom(const SigmaDelegatedRPCRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SigmaDelegatedRPCRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmaDelegatedRPCRep::IsInitialized() const {
  return true;
}

void SigmaDelegatedRPCRep::InternalSwap(SigmaDelegatedRPCRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SigmaDelegatedRPCRep, _impl_.err_)
      + sizeof(SigmaDelegatedRPCRep::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(SigmaDelegatedRPCRep, _impl_.blob_)>(
          reinterpret_cast<char*>(&_impl_.blob_),
          reinterpret_cast<char*>(&other->_impl_.blob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmaDelegatedRPCRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_getter, &descriptor_table_proxy_2fsigmap_2fproto_2fspproxy_2eproto_once,
      file_level_metadata_proxy_2fsigmap_2fproto_2fspproxy_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SigmaInformProcReq*
Arena::CreateMaybeMessage< ::SigmaInformProcReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaInformProcReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaInitReq*
Arena::CreateMaybeMessage< ::SigmaInitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaInitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaNullReq*
Arena::CreateMaybeMessage< ::SigmaNullReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaNullReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaRealmReq*
Arena::CreateMaybeMessage< ::SigmaRealmReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaRealmReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaCloseReq*
Arena::CreateMaybeMessage< ::SigmaCloseReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaCloseReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaErrRep*
Arena::CreateMaybeMessage< ::SigmaErrRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaErrRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaPathReq*
Arena::CreateMaybeMessage< ::SigmaPathReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaPathReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaStatRep*
Arena::CreateMaybeMessage< ::SigmaStatRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaStatRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaCreateReq*
Arena::CreateMaybeMessage< ::SigmaCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaFdRep*
Arena::CreateMaybeMessage< ::SigmaFdRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaFdRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaRenameReq*
Arena::CreateMaybeMessage< ::SigmaRenameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaRenameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaDataRep*
Arena::CreateMaybeMessage< ::SigmaDataRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaDataRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaPutFileReq*
Arena::CreateMaybeMessage< ::SigmaPutFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaPutFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaSizeRep*
Arena::CreateMaybeMessage< ::SigmaSizeRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaSizeRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaReadReq*
Arena::CreateMaybeMessage< ::SigmaReadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaReadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaWriteReq*
Arena::CreateMaybeMessage< ::SigmaWriteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaWriteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaSeekReq*
Arena::CreateMaybeMessage< ::SigmaSeekReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaSeekReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaClntIdRep*
Arena::CreateMaybeMessage< ::SigmaClntIdRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaClntIdRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaFenceReq*
Arena::CreateMaybeMessage< ::SigmaFenceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaFenceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaMountTreeReq*
Arena::CreateMaybeMessage< ::SigmaMountTreeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaMountTreeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaLastMountRep*
Arena::CreateMaybeMessage< ::SigmaLastMountRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaLastMountRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaMountReq*
Arena::CreateMaybeMessage< ::SigmaMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaMountRep*
Arena::CreateMaybeMessage< ::SigmaMountRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaMountRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaMountsRep*
Arena::CreateMaybeMessage< ::SigmaMountsRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaMountsRep >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaRegisterEPReq*
Arena::CreateMaybeMessage< ::SigmaRegisterEPReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaRegisterEPReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaExitedReq*
Arena::CreateMaybeMessage< ::SigmaExitedReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaExitedReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaDelegatedRPCReq*
Arena::CreateMaybeMessage< ::SigmaDelegatedRPCReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaDelegatedRPCReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SigmaDelegatedRPCRep*
Arena::CreateMaybeMessage< ::SigmaDelegatedRPCRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SigmaDelegatedRPCRep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
