// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sigmap/sigmap.proto

#include "sigmap/sigmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TqidProto::TqidProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.path_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TqidProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TqidProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TqidProtoDefaultTypeInternal() {}
  union {
    TqidProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TqidProtoDefaultTypeInternal _TqidProto_default_instance_;
PROTOBUF_CONSTEXPR Tprincipal::Tprincipal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.realmstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TprincipalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TprincipalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TprincipalDefaultTypeInternal() {}
  union {
    Tprincipal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TprincipalDefaultTypeInternal _Tprincipal_default_instance_;
PROTOBUF_CONSTEXPR TstatProto::TstatProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.muid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.qid_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.dev_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.atime_)*/0u
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_.mtime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TstatProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TstatProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TstatProtoDefaultTypeInternal() {}
  union {
    TstatProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TstatProtoDefaultTypeInternal _TstatProto_default_instance_;
PROTOBUF_CONSTEXPR Taddr::Taddr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ipstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.portint_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaddrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaddrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaddrDefaultTypeInternal() {}
  union {
    Taddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaddrDefaultTypeInternal _Taddr_default_instance_;
PROTOBUF_CONSTEXPR SecretProto::SecretProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecretProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecretProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecretProtoDefaultTypeInternal() {}
  union {
    SecretProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecretProtoDefaultTypeInternal _SecretProto_default_instance_;
PROTOBUF_CONSTEXPR TendpointProto::TendpointProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{}
  , /*decltype(_impl_.root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TendpointProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TendpointProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TendpointProtoDefaultTypeInternal() {}
  union {
    TendpointProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TendpointProtoDefaultTypeInternal _TendpointProto_default_instance_;
PROTOBUF_CONSTEXPR TfenceProto::TfenceProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.seqno_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TfenceProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TfenceProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TfenceProtoDefaultTypeInternal() {}
  union {
    TfenceProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TfenceProtoDefaultTypeInternal _TfenceProto_default_instance_;
PROTOBUF_CONSTEXPR Tversion::Tversion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msize_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TversionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TversionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TversionDefaultTypeInternal() {}
  union {
    Tversion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TversionDefaultTypeInternal _Tversion_default_instance_;
PROTOBUF_CONSTEXPR Rversion::Rversion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msize_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RversionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RversionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RversionDefaultTypeInternal() {}
  union {
    Rversion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RversionDefaultTypeInternal _Rversion_default_instance_;
PROTOBUF_CONSTEXPR Tauth::Tauth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.principals_)*/{}
  , /*decltype(_impl_.anames_)*/{}
  , /*decltype(_impl_.afid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TauthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TauthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TauthDefaultTypeInternal() {}
  union {
    Tauth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TauthDefaultTypeInternal _Tauth_default_instance_;
PROTOBUF_CONSTEXPR Rauth::Rauth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aqid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RauthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RauthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RauthDefaultTypeInternal() {}
  union {
    Rauth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RauthDefaultTypeInternal _Rauth_default_instance_;
PROTOBUF_CONSTEXPR Tattach_SecretsEntry_DoNotUse::Tattach_SecretsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Tattach_SecretsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tattach_SecretsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tattach_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Tattach_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tattach_SecretsEntry_DoNotUseDefaultTypeInternal _Tattach_SecretsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Tattach::Tattach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.secrets_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.aname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.afid_)*/0u
  , /*decltype(_impl_.clntid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TattachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TattachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TattachDefaultTypeInternal() {}
  union {
    Tattach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TattachDefaultTypeInternal _Tattach_default_instance_;
PROTOBUF_CONSTEXPR Rattach::Rattach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RattachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RattachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RattachDefaultTypeInternal() {}
  union {
    Rattach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RattachDefaultTypeInternal _Rattach_default_instance_;
PROTOBUF_CONSTEXPR Rerror::Rerror(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obj_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.err_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RerrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RerrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RerrorDefaultTypeInternal() {}
  union {
    Rerror _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RerrorDefaultTypeInternal _Rerror_default_instance_;
PROTOBUF_CONSTEXPR Twalk::Twalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wnames_)*/{}
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.newfid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwalkDefaultTypeInternal() {}
  union {
    Twalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwalkDefaultTypeInternal _Twalk_default_instance_;
PROTOBUF_CONSTEXPR Rwalk::Rwalk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RwalkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RwalkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RwalkDefaultTypeInternal() {}
  union {
    Rwalk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RwalkDefaultTypeInternal _Rwalk_default_instance_;
PROTOBUF_CONSTEXPR Topen::Topen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopenDefaultTypeInternal() {}
  union {
    Topen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopenDefaultTypeInternal _Topen_default_instance_;
PROTOBUF_CONSTEXPR Ropen::Ropen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qid_)*/nullptr
  , /*decltype(_impl_.iounit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RopenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RopenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RopenDefaultTypeInternal() {}
  union {
    Ropen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RopenDefaultTypeInternal _Ropen_default_instance_;
PROTOBUF_CONSTEXPR Tcreate::Tcreate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.perm_)*/0u
  , /*decltype(_impl_.lease_)*/uint64_t{0u}
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TcreateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TcreateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TcreateDefaultTypeInternal() {}
  union {
    Tcreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TcreateDefaultTypeInternal _Tcreate_default_instance_;
PROTOBUF_CONSTEXPR Rcreate::Rcreate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qid_)*/nullptr
  , /*decltype(_impl_.iounit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RcreateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcreateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcreateDefaultTypeInternal() {}
  union {
    Rcreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcreateDefaultTypeInternal _Rcreate_default_instance_;
PROTOBUF_CONSTEXPR TreadF::TreadF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TreadFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TreadFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TreadFDefaultTypeInternal() {}
  union {
    TreadF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TreadFDefaultTypeInternal _TreadF_default_instance_;
PROTOBUF_CONSTEXPR Rread::Rread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RreadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RreadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RreadDefaultTypeInternal() {}
  union {
    Rread _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RreadDefaultTypeInternal _Rread_default_instance_;
PROTOBUF_CONSTEXPR TwriteF::TwriteF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwriteFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwriteFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwriteFDefaultTypeInternal() {}
  union {
    TwriteF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwriteFDefaultTypeInternal _TwriteF_default_instance_;
PROTOBUF_CONSTEXPR Rwrite::Rwrite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RwriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RwriteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RwriteDefaultTypeInternal() {}
  union {
    Rwrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RwriteDefaultTypeInternal _Rwrite_default_instance_;
PROTOBUF_CONSTEXPR Tclunk::Tclunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TclunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TclunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TclunkDefaultTypeInternal() {}
  union {
    Tclunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TclunkDefaultTypeInternal _Tclunk_default_instance_;
PROTOBUF_CONSTEXPR Rclunk::Rclunk(
    ::_pbi::ConstantInitialized) {}
struct RclunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RclunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RclunkDefaultTypeInternal() {}
  union {
    Rclunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RclunkDefaultTypeInternal _Rclunk_default_instance_;
PROTOBUF_CONSTEXPR Tremove::Tremove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TremoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TremoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TremoveDefaultTypeInternal() {}
  union {
    Tremove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TremoveDefaultTypeInternal _Tremove_default_instance_;
PROTOBUF_CONSTEXPR Rremove::Rremove(
    ::_pbi::ConstantInitialized) {}
struct RremoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RremoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RremoveDefaultTypeInternal() {}
  union {
    Rremove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RremoveDefaultTypeInternal _Rremove_default_instance_;
PROTOBUF_CONSTEXPR Trstat::Trstat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrstatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrstatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrstatDefaultTypeInternal() {}
  union {
    Trstat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrstatDefaultTypeInternal _Trstat_default_instance_;
PROTOBUF_CONSTEXPR Rrstat::Rrstat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RrstatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RrstatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RrstatDefaultTypeInternal() {}
  union {
    Rrstat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RrstatDefaultTypeInternal _Rrstat_default_instance_;
PROTOBUF_CONSTEXPR Twstat::Twstat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwstatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwstatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwstatDefaultTypeInternal() {}
  union {
    Twstat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwstatDefaultTypeInternal _Twstat_default_instance_;
PROTOBUF_CONSTEXPR Rwstat::Rwstat(
    ::_pbi::ConstantInitialized) {}
struct RwstatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RwstatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RwstatDefaultTypeInternal() {}
  union {
    Rwstat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RwstatDefaultTypeInternal _Rwstat_default_instance_;
PROTOBUF_CONSTEXPR Twatch::Twatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dirfid_)*/0u
  , /*decltype(_impl_.watchfid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwatchDefaultTypeInternal() {}
  union {
    Twatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwatchDefaultTypeInternal _Twatch_default_instance_;
PROTOBUF_CONSTEXPR Rwatch::Rwatch(
    ::_pbi::ConstantInitialized) {}
struct RwatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RwatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RwatchDefaultTypeInternal() {}
  union {
    Rwatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RwatchDefaultTypeInternal _Rwatch_default_instance_;
PROTOBUF_CONSTEXPR Trenameat::Trenameat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.oldfid_)*/0u
  , /*decltype(_impl_.newfid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrenameatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrenameatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrenameatDefaultTypeInternal() {}
  union {
    Trenameat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrenameatDefaultTypeInternal _Trenameat_default_instance_;
PROTOBUF_CONSTEXPR Rrenameat::Rrenameat(
    ::_pbi::ConstantInitialized) {}
struct RrenameatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RrenameatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RrenameatDefaultTypeInternal() {}
  union {
    Rrenameat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RrenameatDefaultTypeInternal _Rrenameat_default_instance_;
PROTOBUF_CONSTEXPR Tgetfile::Tgetfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wnames_)*/{}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.resolve_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TgetfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TgetfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TgetfileDefaultTypeInternal() {}
  union {
    Tgetfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TgetfileDefaultTypeInternal _Tgetfile_default_instance_;
PROTOBUF_CONSTEXPR Tputfile::Tputfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wnames_)*/{}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.perm_)*/0u
  , /*decltype(_impl_.resolve_)*/false
  , /*decltype(_impl_.lease_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TputfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TputfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TputfileDefaultTypeInternal() {}
  union {
    Tputfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TputfileDefaultTypeInternal _Tputfile_default_instance_;
PROTOBUF_CONSTEXPR Tdetach::Tdetach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clntid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TdetachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TdetachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TdetachDefaultTypeInternal() {}
  union {
    Tdetach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TdetachDefaultTypeInternal _Tdetach_default_instance_;
PROTOBUF_CONSTEXPR Rdetach::Rdetach(
    ::_pbi::ConstantInitialized) {}
struct RdetachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RdetachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RdetachDefaultTypeInternal() {}
  union {
    Rdetach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RdetachDefaultTypeInternal _Rdetach_default_instance_;
PROTOBUF_CONSTEXPR Theartbeat_SidsEntry_DoNotUse::Theartbeat_SidsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Theartbeat_SidsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Theartbeat_SidsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Theartbeat_SidsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Theartbeat_SidsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Theartbeat_SidsEntry_DoNotUseDefaultTypeInternal _Theartbeat_SidsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Theartbeat::Theartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.serverside_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TheartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TheartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TheartbeatDefaultTypeInternal() {}
  union {
    Theartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TheartbeatDefaultTypeInternal _Theartbeat_default_instance_;
PROTOBUF_CONSTEXPR Rheartbeat_SidsEntry_DoNotUse::Rheartbeat_SidsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Rheartbeat_SidsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rheartbeat_SidsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rheartbeat_SidsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Rheartbeat_SidsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rheartbeat_SidsEntry_DoNotUseDefaultTypeInternal _Rheartbeat_SidsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Rheartbeat::Rheartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RheartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RheartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RheartbeatDefaultTypeInternal() {}
  union {
    Rheartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RheartbeatDefaultTypeInternal _Rheartbeat_default_instance_;
PROTOBUF_CONSTEXPR Tremovefile::Tremovefile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wnames_)*/{}
  , /*decltype(_impl_.fence_)*/nullptr
  , /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_.resolve_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TremovefileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TremovefileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TremovefileDefaultTypeInternal() {}
  union {
    Tremovefile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TremovefileDefaultTypeInternal _Tremovefile_default_instance_;
PROTOBUF_CONSTEXPR Twriteread::Twriteread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwritereadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwritereadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwritereadDefaultTypeInternal() {}
  union {
    Twriteread _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwritereadDefaultTypeInternal _Twriteread_default_instance_;
static ::_pb::Metadata file_level_metadata_sigmap_2fsigmap_2eproto[47];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sigmap_2fsigmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sigmap_2fsigmap_2eproto = nullptr;

const uint32_t TableStruct_sigmap_2fsigmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TqidProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TqidProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TqidProto, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TqidProto, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tprincipal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tprincipal, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::Tprincipal, _impl_.realmstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TstatProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.dev_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.qid_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.atime_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.mtime_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.gid_),
  PROTOBUF_FIELD_OFFSET(::TstatProto, _impl_.muid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Taddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Taddr, _impl_.ipstr_),
  PROTOBUF_FIELD_OFFSET(::Taddr, _impl_.portint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SecretProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SecretProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SecretProto, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::SecretProto, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TendpointProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TendpointProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TendpointProto, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::TendpointProto, _impl_.root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TfenceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TfenceProto, _impl_.pathname_),
  PROTOBUF_FIELD_OFFSET(::TfenceProto, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::TfenceProto, _impl_.seqno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tversion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tversion, _impl_.msize_),
  PROTOBUF_FIELD_OFFSET(::Tversion, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rversion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rversion, _impl_.msize_),
  PROTOBUF_FIELD_OFFSET(::Rversion, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tauth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tauth, _impl_.afid_),
  PROTOBUF_FIELD_OFFSET(::Tauth, _impl_.principals_),
  PROTOBUF_FIELD_OFFSET(::Tauth, _impl_.anames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rauth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rauth, _impl_.aqid_),
  PROTOBUF_FIELD_OFFSET(::Tattach_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Tattach_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tattach_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Tattach_SecretsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tattach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tattach, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tattach, _impl_.afid_),
  PROTOBUF_FIELD_OFFSET(::Tattach, _impl_.secrets_),
  PROTOBUF_FIELD_OFFSET(::Tattach, _impl_.aname_),
  PROTOBUF_FIELD_OFFSET(::Tattach, _impl_.clntid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rattach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rattach, _impl_.qid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rerror, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rerror, _impl_.errcode_),
  PROTOBUF_FIELD_OFFSET(::Rerror, _impl_.obj_),
  PROTOBUF_FIELD_OFFSET(::Rerror, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Twalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Twalk, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Twalk, _impl_.newfid_),
  PROTOBUF_FIELD_OFFSET(::Twalk, _impl_.wnames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rwalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rwalk, _impl_.qids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Topen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Topen, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Topen, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ropen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ropen, _impl_.qid_),
  PROTOBUF_FIELD_OFFSET(::Ropen, _impl_.iounit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tcreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.perm_),
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.lease_),
  PROTOBUF_FIELD_OFFSET(::Tcreate, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rcreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rcreate, _impl_.qid_),
  PROTOBUF_FIELD_OFFSET(::Rcreate, _impl_.iounit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TreadF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TreadF, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::TreadF, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::TreadF, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TreadF, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rread, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TwriteF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TwriteF, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::TwriteF, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::TwriteF, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rwrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rwrite, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tclunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tclunk, _impl_.fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rclunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tremove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tremove, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tremove, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rremove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Trstat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Trstat, _impl_.fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rrstat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rrstat, _impl_.stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Twstat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Twstat, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Twstat, _impl_.stat_),
  PROTOBUF_FIELD_OFFSET(::Twstat, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rwstat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Twatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Twatch, _impl_.dirfid_),
  PROTOBUF_FIELD_OFFSET(::Twatch, _impl_.watchfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rwatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Trenameat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Trenameat, _impl_.oldfid_),
  PROTOBUF_FIELD_OFFSET(::Trenameat, _impl_.oldname_),
  PROTOBUF_FIELD_OFFSET(::Trenameat, _impl_.newfid_),
  PROTOBUF_FIELD_OFFSET(::Trenameat, _impl_.newname_),
  PROTOBUF_FIELD_OFFSET(::Trenameat, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rrenameat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.wnames_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.resolve_),
  PROTOBUF_FIELD_OFFSET(::Tgetfile, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tputfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.perm_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.wnames_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.resolve_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.lease_),
  PROTOBUF_FIELD_OFFSET(::Tputfile, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tdetach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tdetach, _impl_.clntid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rdetach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Theartbeat_SidsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Theartbeat_SidsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Theartbeat_SidsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Theartbeat_SidsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Theartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Theartbeat, _impl_.serverside_),
  PROTOBUF_FIELD_OFFSET(::Theartbeat, _impl_.sids_),
  PROTOBUF_FIELD_OFFSET(::Rheartbeat_SidsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rheartbeat_SidsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rheartbeat_SidsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Rheartbeat_SidsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rheartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rheartbeat, _impl_.sids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Tremovefile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Tremovefile, _impl_.fid_),
  PROTOBUF_FIELD_OFFSET(::Tremovefile, _impl_.wnames_),
  PROTOBUF_FIELD_OFFSET(::Tremovefile, _impl_.resolve_),
  PROTOBUF_FIELD_OFFSET(::Tremovefile, _impl_.fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Twriteread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Twriteread, _impl_.fid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TqidProto)},
  { 9, -1, -1, sizeof(::Tprincipal)},
  { 17, -1, -1, sizeof(::TstatProto)},
  { 34, -1, -1, sizeof(::Taddr)},
  { 42, -1, -1, sizeof(::SecretProto)},
  { 51, -1, -1, sizeof(::TendpointProto)},
  { 60, -1, -1, sizeof(::TfenceProto)},
  { 69, -1, -1, sizeof(::Tversion)},
  { 77, -1, -1, sizeof(::Rversion)},
  { 85, -1, -1, sizeof(::Tauth)},
  { 94, -1, -1, sizeof(::Rauth)},
  { 101, 109, -1, sizeof(::Tattach_SecretsEntry_DoNotUse)},
  { 111, -1, -1, sizeof(::Tattach)},
  { 122, -1, -1, sizeof(::Rattach)},
  { 129, -1, -1, sizeof(::Rerror)},
  { 138, -1, -1, sizeof(::Twalk)},
  { 147, -1, -1, sizeof(::Rwalk)},
  { 154, -1, -1, sizeof(::Topen)},
  { 162, -1, -1, sizeof(::Ropen)},
  { 170, -1, -1, sizeof(::Tcreate)},
  { 182, -1, -1, sizeof(::Rcreate)},
  { 190, -1, -1, sizeof(::TreadF)},
  { 200, -1, -1, sizeof(::Rread)},
  { 207, -1, -1, sizeof(::TwriteF)},
  { 216, -1, -1, sizeof(::Rwrite)},
  { 223, -1, -1, sizeof(::Tclunk)},
  { 230, -1, -1, sizeof(::Rclunk)},
  { 236, -1, -1, sizeof(::Tremove)},
  { 244, -1, -1, sizeof(::Rremove)},
  { 250, -1, -1, sizeof(::Trstat)},
  { 257, -1, -1, sizeof(::Rrstat)},
  { 264, -1, -1, sizeof(::Twstat)},
  { 273, -1, -1, sizeof(::Rwstat)},
  { 279, -1, -1, sizeof(::Twatch)},
  { 287, -1, -1, sizeof(::Rwatch)},
  { 293, -1, -1, sizeof(::Trenameat)},
  { 304, -1, -1, sizeof(::Rrenameat)},
  { 310, -1, -1, sizeof(::Tgetfile)},
  { 323, -1, -1, sizeof(::Tputfile)},
  { 337, -1, -1, sizeof(::Tdetach)},
  { 344, -1, -1, sizeof(::Rdetach)},
  { 350, 358, -1, sizeof(::Theartbeat_SidsEntry_DoNotUse)},
  { 360, -1, -1, sizeof(::Theartbeat)},
  { 368, 376, -1, sizeof(::Rheartbeat_SidsEntry_DoNotUse)},
  { 378, -1, -1, sizeof(::Rheartbeat)},
  { 385, -1, -1, sizeof(::Tremovefile)},
  { 395, -1, -1, sizeof(::Twriteread)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TqidProto_default_instance_._instance,
  &::_Tprincipal_default_instance_._instance,
  &::_TstatProto_default_instance_._instance,
  &::_Taddr_default_instance_._instance,
  &::_SecretProto_default_instance_._instance,
  &::_TendpointProto_default_instance_._instance,
  &::_TfenceProto_default_instance_._instance,
  &::_Tversion_default_instance_._instance,
  &::_Rversion_default_instance_._instance,
  &::_Tauth_default_instance_._instance,
  &::_Rauth_default_instance_._instance,
  &::_Tattach_SecretsEntry_DoNotUse_default_instance_._instance,
  &::_Tattach_default_instance_._instance,
  &::_Rattach_default_instance_._instance,
  &::_Rerror_default_instance_._instance,
  &::_Twalk_default_instance_._instance,
  &::_Rwalk_default_instance_._instance,
  &::_Topen_default_instance_._instance,
  &::_Ropen_default_instance_._instance,
  &::_Tcreate_default_instance_._instance,
  &::_Rcreate_default_instance_._instance,
  &::_TreadF_default_instance_._instance,
  &::_Rread_default_instance_._instance,
  &::_TwriteF_default_instance_._instance,
  &::_Rwrite_default_instance_._instance,
  &::_Tclunk_default_instance_._instance,
  &::_Rclunk_default_instance_._instance,
  &::_Tremove_default_instance_._instance,
  &::_Rremove_default_instance_._instance,
  &::_Trstat_default_instance_._instance,
  &::_Rrstat_default_instance_._instance,
  &::_Twstat_default_instance_._instance,
  &::_Rwstat_default_instance_._instance,
  &::_Twatch_default_instance_._instance,
  &::_Rwatch_default_instance_._instance,
  &::_Trenameat_default_instance_._instance,
  &::_Rrenameat_default_instance_._instance,
  &::_Tgetfile_default_instance_._instance,
  &::_Tputfile_default_instance_._instance,
  &::_Tdetach_default_instance_._instance,
  &::_Rdetach_default_instance_._instance,
  &::_Theartbeat_SidsEntry_DoNotUse_default_instance_._instance,
  &::_Theartbeat_default_instance_._instance,
  &::_Rheartbeat_SidsEntry_DoNotUse_default_instance_._instance,
  &::_Rheartbeat_default_instance_._instance,
  &::_Tremovefile_default_instance_._instance,
  &::_Twriteread_default_instance_._instance,
};

const char descriptor_table_protodef_sigmap_2fsigmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023sigmap/sigmap.proto\"8\n\tTqidProto\022\014\n\004ty"
  "pe\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022\014\n\004path\030\003 \001(\004\""
  "-\n\nTprincipal\022\r\n\005iDStr\030\001 \001(\t\022\020\n\010realmStr"
  "\030\002 \001(\t\"\262\001\n\nTstatProto\022\014\n\004type\030\001 \001(\r\022\013\n\003d"
  "ev\030\002 \001(\r\022\027\n\003qid\030\003 \001(\0132\n.TqidProto\022\014\n\004mod"
  "e\030\004 \001(\r\022\r\n\005atime\030\005 \001(\r\022\r\n\005mtime\030\006 \001(\r\022\016\n"
  "\006length\030\007 \001(\004\022\014\n\004name\030\010 \001(\t\022\013\n\003uid\030\t \001(\t"
  "\022\013\n\003gid\030\n \001(\t\022\014\n\004muid\030\013 \001(\t\"\'\n\005Taddr\022\r\n\005"
  "iPStr\030\001 \001(\t\022\017\n\007portInt\030\002 \001(\r\"8\n\013SecretPr"
  "oto\022\n\n\002iD\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\020\n\010metadata"
  "\030\003 \001(\t\"B\n\016TendpointProto\022\014\n\004type\030\001 \001(\r\022\024"
  "\n\004addr\030\002 \003(\0132\006.Taddr\022\014\n\004root\030\003 \001(\t\"=\n\013Tf"
  "enceProto\022\020\n\010pathName\030\001 \001(\t\022\r\n\005epoch\030\002 \001"
  "(\004\022\r\n\005seqno\030\003 \001(\004\"*\n\010Tversion\022\r\n\005msize\030\001"
  " \001(\r\022\017\n\007version\030\002 \001(\t\"*\n\010Rversion\022\r\n\005msi"
  "ze\030\001 \001(\r\022\017\n\007version\030\002 \001(\t\"F\n\005Tauth\022\014\n\004af"
  "id\030\001 \001(\r\022\037\n\nPrincipals\030\002 \003(\0132\013.Tprincipa"
  "l\022\016\n\006Anames\030\003 \003(\t\"!\n\005Rauth\022\030\n\004aqid\030\001 \001(\013"
  "2\n.TqidProto\"\251\001\n\007Tattach\022\013\n\003fid\030\001 \001(\r\022\014\n"
  "\004afid\030\002 \001(\r\022&\n\007secrets\030\003 \003(\0132\025.Tattach.S"
  "ecretsEntry\022\r\n\005aname\030\004 \001(\t\022\016\n\006clntId\030\005 \001"
  "(\004\032<\n\014SecretsEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005value"
  "\030\002 \001(\0132\014.SecretProto:\0028\001\"\"\n\007Rattach\022\027\n\003q"
  "id\030\001 \001(\0132\n.TqidProto\"3\n\006Rerror\022\017\n\007errCod"
  "e\030\001 \001(\r\022\013\n\003obj\030\002 \001(\t\022\013\n\003err\030\003 \001(\t\"4\n\005Twa"
  "lk\022\013\n\003fid\030\001 \001(\r\022\016\n\006newFid\030\002 \001(\r\022\016\n\006wname"
  "s\030\003 \003(\t\"!\n\005Rwalk\022\030\n\004qids\030\001 \003(\0132\n.TqidPro"
  "to\"\"\n\005Topen\022\013\n\003fid\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\"0"
  "\n\005Ropen\022\027\n\003qid\030\001 \001(\0132\n.TqidProto\022\016\n\006ioun"
  "it\030\002 \001(\r\"l\n\007Tcreate\022\013\n\003fid\030\001 \001(\r\022\014\n\004name"
  "\030\002 \001(\t\022\014\n\004perm\030\003 \001(\r\022\014\n\004mode\030\004 \001(\r\022\r\n\005le"
  "ase\030\005 \001(\004\022\033\n\005fence\030\006 \001(\0132\014.TfenceProto\"2"
  "\n\007Rcreate\022\027\n\003qid\030\001 \001(\0132\n.TqidProto\022\016\n\006io"
  "unit\030\002 \001(\r\"Q\n\006TreadF\022\013\n\003fid\030\001 \001(\r\022\016\n\006off"
  "set\030\002 \001(\004\022\r\n\005count\030\003 \001(\r\022\033\n\005fence\030\004 \001(\0132"
  "\014.TfenceProto\"\026\n\005Rread\022\r\n\005count\030\001 \001(\r\"C\n"
  "\007TwriteF\022\013\n\003fid\030\001 \001(\r\022\016\n\006offset\030\002 \001(\004\022\033\n"
  "\005fence\030\003 \001(\0132\014.TfenceProto\"\027\n\006Rwrite\022\r\n\005"
  "count\030\001 \001(\r\"\025\n\006Tclunk\022\013\n\003fid\030\001 \001(\r\"\010\n\006Rc"
  "lunk\"3\n\007Tremove\022\013\n\003fid\030\001 \001(\r\022\033\n\005fence\030\002 "
  "\001(\0132\014.TfenceProto\"\t\n\007Rremove\"\025\n\006Trstat\022\013"
  "\n\003fid\030\001 \001(\r\"#\n\006Rrstat\022\031\n\004stat\030\001 \001(\0132\013.Ts"
  "tatProto\"M\n\006Twstat\022\013\n\003fid\030\001 \001(\r\022\031\n\004stat\030"
  "\002 \001(\0132\013.TstatProto\022\033\n\005fence\030\003 \001(\0132\014.Tfen"
  "ceProto\"\010\n\006Rwstat\"*\n\006Twatch\022\016\n\006dirfid\030\001 "
  "\001(\r\022\020\n\010watchfid\030\002 \001(\r\"\010\n\006Rwatch\"j\n\tTrena"
  "meat\022\016\n\006oldFid\030\001 \001(\r\022\017\n\007oldName\030\002 \001(\t\022\016\n"
  "\006newFid\030\003 \001(\r\022\017\n\007newName\030\004 \001(\t\022\033\n\005fence\030"
  "\005 \001(\0132\014.TfenceProto\"\013\n\tRrenameat\"\202\001\n\010Tge"
  "tfile\022\013\n\003fid\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\022\016\n\006offs"
  "et\030\003 \001(\004\022\r\n\005count\030\004 \001(\r\022\016\n\006wnames\030\005 \003(\t\022"
  "\017\n\007resolve\030\006 \001(\010\022\033\n\005fence\030\007 \001(\0132\014.Tfence"
  "Proto\"\220\001\n\010Tputfile\022\013\n\003fid\030\001 \001(\r\022\014\n\004mode\030"
  "\002 \001(\r\022\014\n\004perm\030\003 \001(\r\022\016\n\006offset\030\004 \001(\004\022\016\n\006W"
  "names\030\005 \003(\t\022\017\n\007resolve\030\006 \001(\010\022\r\n\005lease\030\007 "
  "\001(\004\022\033\n\005fence\030\010 \001(\0132\014.TfenceProto\"\031\n\007Tdet"
  "ach\022\016\n\006clntId\030\001 \001(\004\"\t\n\007Rdetach\"r\n\nTheart"
  "beat\022\022\n\nserverSide\030\001 \001(\010\022#\n\004sids\030\002 \003(\0132\025"
  ".Theartbeat.SidsEntry\032+\n\tSidsEntry\022\013\n\003ke"
  "y\030\001 \001(\004\022\r\n\005value\030\002 \001(\010:\0028\001\"^\n\nRheartbeat"
  "\022#\n\004sids\030\001 \003(\0132\025.Rheartbeat.SidsEntry\032+\n"
  "\tSidsEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\010:\002"
  "8\001\"X\n\013Tremovefile\022\013\n\003fid\030\001 \001(\r\022\016\n\006Wnames"
  "\030\002 \003(\t\022\017\n\007resolve\030\003 \001(\010\022\033\n\005fence\030\004 \001(\0132\014"
  ".TfenceProto\"\031\n\nTwriteread\022\013\n\003fid\030\001 \001(\rB"
  "\020Z\016sigmaos/sigmapb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sigmap_2fsigmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sigmap_2fsigmap_2eproto = {
    false, false, 2625, descriptor_table_protodef_sigmap_2fsigmap_2eproto,
    "sigmap/sigmap.proto",
    &descriptor_table_sigmap_2fsigmap_2eproto_once, nullptr, 0, 47,
    schemas, file_default_instances, TableStruct_sigmap_2fsigmap_2eproto::offsets,
    file_level_metadata_sigmap_2fsigmap_2eproto, file_level_enum_descriptors_sigmap_2fsigmap_2eproto,
    file_level_service_descriptors_sigmap_2fsigmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sigmap_2fsigmap_2eproto_getter() {
  return &descriptor_table_sigmap_2fsigmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sigmap_2fsigmap_2eproto(&descriptor_table_sigmap_2fsigmap_2eproto);

// ===================================================================

class TqidProto::_Internal {
 public:
};

TqidProto::TqidProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TqidProto)
}
TqidProto::TqidProto(const TqidProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TqidProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.path_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.path_));
  // @@protoc_insertion_point(copy_constructor:TqidProto)
}

inline void TqidProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.path_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TqidProto::~TqidProto() {
  // @@protoc_insertion_point(destructor:TqidProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TqidProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TqidProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TqidProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TqidProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.path_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.path_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TqidProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TqidProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TqidProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint64 path = 3;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TqidProto)
  return target;
}

size_t TqidProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TqidProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint64 path = 3;
  if (this->_internal_path() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TqidProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TqidProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TqidProto::GetClassData() const { return &_class_data_; }


void TqidProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TqidProto*>(&to_msg);
  auto& from = static_cast<const TqidProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TqidProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_path() != 0) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TqidProto::CopyFrom(const TqidProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TqidProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TqidProto::IsInitialized() const {
  return true;
}

void TqidProto::InternalSwap(TqidProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TqidProto, _impl_.path_)
      + sizeof(TqidProto::_impl_.path_)
      - PROTOBUF_FIELD_OFFSET(TqidProto, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TqidProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[0]);
}

// ===================================================================

class Tprincipal::_Internal {
 public:
};

Tprincipal::Tprincipal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tprincipal)
}
Tprincipal::Tprincipal(const Tprincipal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tprincipal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.idstr_){}
    , decltype(_impl_.realmstr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realmstr().empty()) {
    _this->_impl_.realmstr_.Set(from._internal_realmstr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Tprincipal)
}

inline void Tprincipal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.idstr_){}
    , decltype(_impl_.realmstr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realmstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.realmstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tprincipal::~Tprincipal() {
  // @@protoc_insertion_point(destructor:Tprincipal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tprincipal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.idstr_.Destroy();
  _impl_.realmstr_.Destroy();
}

void Tprincipal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tprincipal::Clear() {
// @@protoc_insertion_point(message_clear_start:Tprincipal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.idstr_.ClearToEmpty();
  _impl_.realmstr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tprincipal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string iDStr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Tprincipal.iDStr"));
        } else
          goto handle_unusual;
        continue;
      // string realmStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_realmstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Tprincipal.realmStr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tprincipal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tprincipal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string iDStr = 1;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tprincipal.iDStr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_idstr(), target);
  }

  // string realmStr = 2;
  if (!this->_internal_realmstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_realmstr().data(), static_cast<int>(this->_internal_realmstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tprincipal.realmStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_realmstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tprincipal)
  return target;
}

size_t Tprincipal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tprincipal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iDStr = 1;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string realmStr = 2;
  if (!this->_internal_realmstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_realmstr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tprincipal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tprincipal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tprincipal::GetClassData() const { return &_class_data_; }


void Tprincipal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tprincipal*>(&to_msg);
  auto& from = static_cast<const Tprincipal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tprincipal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (!from._internal_realmstr().empty()) {
    _this->_internal_set_realmstr(from._internal_realmstr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tprincipal::CopyFrom(const Tprincipal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tprincipal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tprincipal::IsInitialized() const {
  return true;
}

void Tprincipal::InternalSwap(Tprincipal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.realmstr_, lhs_arena,
      &other->_impl_.realmstr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tprincipal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[1]);
}

// ===================================================================

class TstatProto::_Internal {
 public:
  static const ::TqidProto& qid(const TstatProto* msg);
};

const ::TqidProto&
TstatProto::_Internal::qid(const TstatProto* msg) {
  return *msg->_impl_.qid_;
}
TstatProto::TstatProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TstatProto)
}
TstatProto::TstatProto(const TstatProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TstatProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , decltype(_impl_.muid_){}
    , decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.atime_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.mtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gid().empty()) {
    _this->_impl_.gid_.Set(from._internal_gid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.muid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_muid().empty()) {
    _this->_impl_.muid_.Set(from._internal_muid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_qid()) {
    _this->_impl_.qid_ = new ::TqidProto(*from._impl_.qid_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mtime_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.mtime_));
  // @@protoc_insertion_point(copy_constructor:TstatProto)
}

inline void TstatProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.gid_){}
    , decltype(_impl_.muid_){}
    , decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.dev_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.atime_){0u}
    , decltype(_impl_.length_){uint64_t{0u}}
    , decltype(_impl_.mtime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.muid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TstatProto::~TstatProto() {
  // @@protoc_insertion_point(destructor:TstatProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TstatProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.uid_.Destroy();
  _impl_.gid_.Destroy();
  _impl_.muid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.qid_;
}

void TstatProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TstatProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TstatProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.gid_.ClearToEmpty();
  _impl_.muid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.qid_ != nullptr) {
    delete _impl_.qid_;
  }
  _impl_.qid_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mtime_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.mtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TstatProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TqidProto qid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_qid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 atime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.atime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TstatProto.name"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TstatProto.uid"));
        } else
          goto handle_unusual;
        continue;
      // string gid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_gid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TstatProto.gid"));
        } else
          goto handle_unusual;
        continue;
      // string muid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_muid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TstatProto.muid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TstatProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TstatProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 dev = 2;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dev(), target);
  }

  // .TqidProto qid = 3;
  if (this->_internal_has_qid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::qid(this),
        _Internal::qid(this).GetCachedSize(), target, stream);
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  // uint32 atime = 5;
  if (this->_internal_atime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_atime(), target);
  }

  // uint32 mtime = 6;
  if (this->_internal_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mtime(), target);
  }

  // uint64 length = 7;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_length(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TstatProto.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string uid = 9;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TstatProto.uid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uid(), target);
  }

  // string gid = 10;
  if (!this->_internal_gid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gid().data(), static_cast<int>(this->_internal_gid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TstatProto.gid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gid(), target);
  }

  // string muid = 11;
  if (!this->_internal_muid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_muid().data(), static_cast<int>(this->_internal_muid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TstatProto.muid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_muid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TstatProto)
  return target;
}

size_t TstatProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TstatProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string uid = 9;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string gid = 10;
  if (!this->_internal_gid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gid());
  }

  // string muid = 11;
  if (!this->_internal_muid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_muid());
  }

  // .TqidProto qid = 3;
  if (this->_internal_has_qid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qid_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 dev = 2;
  if (this->_internal_dev() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dev());
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint32 atime = 5;
  if (this->_internal_atime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_atime());
  }

  // uint64 length = 7;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  // uint32 mtime = 6;
  if (this->_internal_mtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TstatProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TstatProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TstatProto::GetClassData() const { return &_class_data_; }


void TstatProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TstatProto*>(&to_msg);
  auto& from = static_cast<const TstatProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TstatProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_gid().empty()) {
    _this->_internal_set_gid(from._internal_gid());
  }
  if (!from._internal_muid().empty()) {
    _this->_internal_set_muid(from._internal_muid());
  }
  if (from._internal_has_qid()) {
    _this->_internal_mutable_qid()->::TqidProto::MergeFrom(
        from._internal_qid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_dev() != 0) {
    _this->_internal_set_dev(from._internal_dev());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_atime() != 0) {
    _this->_internal_set_atime(from._internal_atime());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_mtime() != 0) {
    _this->_internal_set_mtime(from._internal_mtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TstatProto::CopyFrom(const TstatProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TstatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TstatProto::IsInitialized() const {
  return true;
}

void TstatProto::InternalSwap(TstatProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gid_, lhs_arena,
      &other->_impl_.gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.muid_, lhs_arena,
      &other->_impl_.muid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TstatProto, _impl_.mtime_)
      + sizeof(TstatProto::_impl_.mtime_)
      - PROTOBUF_FIELD_OFFSET(TstatProto, _impl_.qid_)>(
          reinterpret_cast<char*>(&_impl_.qid_),
          reinterpret_cast<char*>(&other->_impl_.qid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TstatProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[2]);
}

// ===================================================================

class Taddr::_Internal {
 public:
};

Taddr::Taddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Taddr)
}
Taddr::Taddr(const Taddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Taddr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ipstr_){}
    , decltype(_impl_.portint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ipstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipstr().empty()) {
    _this->_impl_.ipstr_.Set(from._internal_ipstr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.portint_ = from._impl_.portint_;
  // @@protoc_insertion_point(copy_constructor:Taddr)
}

inline void Taddr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ipstr_){}
    , decltype(_impl_.portint_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ipstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Taddr::~Taddr() {
  // @@protoc_insertion_point(destructor:Taddr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Taddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ipstr_.Destroy();
}

void Taddr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Taddr::Clear() {
// @@protoc_insertion_point(message_clear_start:Taddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ipstr_.ClearToEmpty();
  _impl_.portint_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Taddr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string iPStr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Taddr.iPStr"));
        } else
          goto handle_unusual;
        continue;
      // uint32 portInt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.portint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Taddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Taddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string iPStr = 1;
  if (!this->_internal_ipstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipstr().data(), static_cast<int>(this->_internal_ipstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Taddr.iPStr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipstr(), target);
  }

  // uint32 portInt = 2;
  if (this->_internal_portint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_portint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Taddr)
  return target;
}

size_t Taddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Taddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iPStr = 1;
  if (!this->_internal_ipstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipstr());
  }

  // uint32 portInt = 2;
  if (this->_internal_portint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_portint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Taddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Taddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Taddr::GetClassData() const { return &_class_data_; }


void Taddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Taddr*>(&to_msg);
  auto& from = static_cast<const Taddr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Taddr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipstr().empty()) {
    _this->_internal_set_ipstr(from._internal_ipstr());
  }
  if (from._internal_portint() != 0) {
    _this->_internal_set_portint(from._internal_portint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Taddr::CopyFrom(const Taddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Taddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Taddr::IsInitialized() const {
  return true;
}

void Taddr::InternalSwap(Taddr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipstr_, lhs_arena,
      &other->_impl_.ipstr_, rhs_arena
  );
  swap(_impl_.portint_, other->_impl_.portint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Taddr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[3]);
}

// ===================================================================

class SecretProto::_Internal {
 public:
};

SecretProto::SecretProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SecretProto)
}
SecretProto::SecretProto(const SecretProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecretProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SecretProto)
}

inline void SecretProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecretProto::~SecretProto() {
  // @@protoc_insertion_point(destructor:SecretProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecretProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.key_.Destroy();
  _impl_.metadata_.Destroy();
}

void SecretProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecretProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SecretProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecretProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string iD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SecretProto.iD"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SecretProto.key"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SecretProto.metadata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecretProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SecretProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string iD = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SecretProto.iD");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SecretProto.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SecretProto.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SecretProto)
  return target;
}

size_t SecretProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SecretProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iD = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecretProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecretProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecretProto::GetClassData() const { return &_class_data_; }


void SecretProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecretProto*>(&to_msg);
  auto& from = static_cast<const SecretProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SecretProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecretProto::CopyFrom(const SecretProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SecretProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretProto::IsInitialized() const {
  return true;
}

void SecretProto::InternalSwap(SecretProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SecretProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[4]);
}

// ===================================================================

class TendpointProto::_Internal {
 public:
};

TendpointProto::TendpointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TendpointProto)
}
TendpointProto::TendpointProto(const TendpointProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TendpointProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){from._impl_.addr_}
    , decltype(_impl_.root_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root().empty()) {
    _this->_impl_.root_.Set(from._internal_root(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:TendpointProto)
}

inline void TendpointProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){arena}
    , decltype(_impl_.root_){}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TendpointProto::~TendpointProto() {
  // @@protoc_insertion_point(destructor:TendpointProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TendpointProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.~RepeatedPtrField();
  _impl_.root_.Destroy();
}

void TendpointProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TendpointProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TendpointProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.Clear();
  _impl_.root_.ClearToEmpty();
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TendpointProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Taddr addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TendpointProto.root"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TendpointProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TendpointProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .Taddr addr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addr_size()); i < n; i++) {
    const auto& repfield = this->_internal_addr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string root = 3;
  if (!this->_internal_root().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TendpointProto.root");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TendpointProto)
  return target;
}

size_t TendpointProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TendpointProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Taddr addr = 2;
  total_size += 1UL * this->_internal_addr_size();
  for (const auto& msg : this->_impl_.addr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string root = 3;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TendpointProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TendpointProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TendpointProto::GetClassData() const { return &_class_data_; }


void TendpointProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TendpointProto*>(&to_msg);
  auto& from = static_cast<const TendpointProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TendpointProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addr_.MergeFrom(from._impl_.addr_);
  if (!from._internal_root().empty()) {
    _this->_internal_set_root(from._internal_root());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TendpointProto::CopyFrom(const TendpointProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TendpointProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TendpointProto::IsInitialized() const {
  return true;
}

void TendpointProto::InternalSwap(TendpointProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addr_.InternalSwap(&other->_impl_.addr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_, lhs_arena,
      &other->_impl_.root_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TendpointProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[5]);
}

// ===================================================================

class TfenceProto::_Internal {
 public:
};

TfenceProto::TfenceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TfenceProto)
}
TfenceProto::TfenceProto(const TfenceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TfenceProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.epoch_){}
    , decltype(_impl_.seqno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    _this->_impl_.pathname_.Set(from._internal_pathname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.epoch_, &from._impl_.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:TfenceProto)
}

inline void TfenceProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathname_){}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , decltype(_impl_.seqno_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pathname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pathname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TfenceProto::~TfenceProto() {
  // @@protoc_insertion_point(destructor:TfenceProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TfenceProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathname_.Destroy();
}

void TfenceProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TfenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TfenceProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathname_.ClearToEmpty();
  ::memset(&_impl_.epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seqno_) -
      reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.seqno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TfenceProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pathName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pathname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TfenceProto.pathName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TfenceProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TfenceProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pathName = 1;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TfenceProto.pathName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pathname(), target);
  }

  // uint64 epoch = 2;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch(), target);
  }

  // uint64 seqno = 3;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seqno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TfenceProto)
  return target;
}

size_t TfenceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TfenceProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathName = 1;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // uint64 epoch = 2;
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  // uint64 seqno = 3;
  if (this->_internal_seqno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seqno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TfenceProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TfenceProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TfenceProto::GetClassData() const { return &_class_data_; }


void TfenceProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TfenceProto*>(&to_msg);
  auto& from = static_cast<const TfenceProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TfenceProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _this->_internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_seqno() != 0) {
    _this->_internal_set_seqno(from._internal_seqno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TfenceProto::CopyFrom(const TfenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TfenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfenceProto::IsInitialized() const {
  return true;
}

void TfenceProto::InternalSwap(TfenceProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pathname_, lhs_arena,
      &other->_impl_.pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TfenceProto, _impl_.seqno_)
      + sizeof(TfenceProto::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(TfenceProto, _impl_.epoch_)>(
          reinterpret_cast<char*>(&_impl_.epoch_),
          reinterpret_cast<char*>(&other->_impl_.epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TfenceProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[6]);
}

// ===================================================================

class Tversion::_Internal {
 public:
};

Tversion::Tversion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tversion)
}
Tversion::Tversion(const Tversion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tversion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.msize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msize_ = from._impl_.msize_;
  // @@protoc_insertion_point(copy_constructor:Tversion)
}

inline void Tversion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.msize_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tversion::~Tversion() {
  // @@protoc_insertion_point(destructor:Tversion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tversion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void Tversion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tversion::Clear() {
// @@protoc_insertion_point(message_clear_start:Tversion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.msize_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tversion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Tversion.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tversion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tversion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msize = 1;
  if (this->_internal_msize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msize(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tversion.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tversion)
  return target;
}

size_t Tversion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tversion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint32 msize = 1;
  if (this->_internal_msize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tversion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tversion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tversion::GetClassData() const { return &_class_data_; }


void Tversion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tversion*>(&to_msg);
  auto& from = static_cast<const Tversion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tversion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_msize() != 0) {
    _this->_internal_set_msize(from._internal_msize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tversion::CopyFrom(const Tversion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tversion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tversion::IsInitialized() const {
  return true;
}

void Tversion::InternalSwap(Tversion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.msize_, other->_impl_.msize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tversion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[7]);
}

// ===================================================================

class Rversion::_Internal {
 public:
};

Rversion::Rversion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rversion)
}
Rversion::Rversion(const Rversion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rversion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.msize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msize_ = from._impl_.msize_;
  // @@protoc_insertion_point(copy_constructor:Rversion)
}

inline void Rversion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.msize_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rversion::~Rversion() {
  // @@protoc_insertion_point(destructor:Rversion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rversion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void Rversion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rversion::Clear() {
// @@protoc_insertion_point(message_clear_start:Rversion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.msize_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rversion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rversion.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rversion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rversion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msize = 1;
  if (this->_internal_msize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msize(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rversion.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rversion)
  return target;
}

size_t Rversion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rversion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint32 msize = 1;
  if (this->_internal_msize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rversion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rversion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rversion::GetClassData() const { return &_class_data_; }


void Rversion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rversion*>(&to_msg);
  auto& from = static_cast<const Rversion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rversion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_msize() != 0) {
    _this->_internal_set_msize(from._internal_msize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rversion::CopyFrom(const Rversion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rversion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rversion::IsInitialized() const {
  return true;
}

void Rversion::InternalSwap(Rversion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.msize_, other->_impl_.msize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rversion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[8]);
}

// ===================================================================

class Tauth::_Internal {
 public:
};

Tauth::Tauth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tauth)
}
Tauth::Tauth(const Tauth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tauth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.principals_){from._impl_.principals_}
    , decltype(_impl_.anames_){from._impl_.anames_}
    , decltype(_impl_.afid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.afid_ = from._impl_.afid_;
  // @@protoc_insertion_point(copy_constructor:Tauth)
}

inline void Tauth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.principals_){arena}
    , decltype(_impl_.anames_){arena}
    , decltype(_impl_.afid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tauth::~Tauth() {
  // @@protoc_insertion_point(destructor:Tauth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tauth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.principals_.~RepeatedPtrField();
  _impl_.anames_.~RepeatedPtrField();
}

void Tauth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tauth::Clear() {
// @@protoc_insertion_point(message_clear_start:Tauth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.principals_.Clear();
  _impl_.anames_.Clear();
  _impl_.afid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tauth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 afid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.afid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Tprincipal Principals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_principals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string Anames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_anames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Tauth.Anames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tauth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tauth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 afid = 1;
  if (this->_internal_afid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_afid(), target);
  }

  // repeated .Tprincipal Principals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_principals_size()); i < n; i++) {
    const auto& repfield = this->_internal_principals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string Anames = 3;
  for (int i = 0, n = this->_internal_anames_size(); i < n; i++) {
    const auto& s = this->_internal_anames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tauth.Anames");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tauth)
  return target;
}

size_t Tauth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tauth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Tprincipal Principals = 2;
  total_size += 1UL * this->_internal_principals_size();
  for (const auto& msg : this->_impl_.principals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string Anames = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.anames_.size());
  for (int i = 0, n = _impl_.anames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.anames_.Get(i));
  }

  // uint32 afid = 1;
  if (this->_internal_afid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_afid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tauth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tauth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tauth::GetClassData() const { return &_class_data_; }


void Tauth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tauth*>(&to_msg);
  auto& from = static_cast<const Tauth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tauth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.principals_.MergeFrom(from._impl_.principals_);
  _this->_impl_.anames_.MergeFrom(from._impl_.anames_);
  if (from._internal_afid() != 0) {
    _this->_internal_set_afid(from._internal_afid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tauth::CopyFrom(const Tauth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tauth::IsInitialized() const {
  return true;
}

void Tauth::InternalSwap(Tauth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.principals_.InternalSwap(&other->_impl_.principals_);
  _impl_.anames_.InternalSwap(&other->_impl_.anames_);
  swap(_impl_.afid_, other->_impl_.afid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tauth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[9]);
}

// ===================================================================

class Rauth::_Internal {
 public:
  static const ::TqidProto& aqid(const Rauth* msg);
};

const ::TqidProto&
Rauth::_Internal::aqid(const Rauth* msg) {
  return *msg->_impl_.aqid_;
}
Rauth::Rauth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rauth)
}
Rauth::Rauth(const Rauth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rauth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aqid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aqid()) {
    _this->_impl_.aqid_ = new ::TqidProto(*from._impl_.aqid_);
  }
  // @@protoc_insertion_point(copy_constructor:Rauth)
}

inline void Rauth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aqid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rauth::~Rauth() {
  // @@protoc_insertion_point(destructor:Rauth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rauth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.aqid_;
}

void Rauth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rauth::Clear() {
// @@protoc_insertion_point(message_clear_start:Rauth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.aqid_ != nullptr) {
    delete _impl_.aqid_;
  }
  _impl_.aqid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rauth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TqidProto aqid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aqid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rauth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rauth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TqidProto aqid = 1;
  if (this->_internal_has_aqid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::aqid(this),
        _Internal::aqid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rauth)
  return target;
}

size_t Rauth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rauth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TqidProto aqid = 1;
  if (this->_internal_has_aqid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aqid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rauth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rauth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rauth::GetClassData() const { return &_class_data_; }


void Rauth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rauth*>(&to_msg);
  auto& from = static_cast<const Rauth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rauth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_aqid()) {
    _this->_internal_mutable_aqid()->::TqidProto::MergeFrom(
        from._internal_aqid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rauth::CopyFrom(const Rauth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rauth::IsInitialized() const {
  return true;
}

void Rauth::InternalSwap(Rauth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.aqid_, other->_impl_.aqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rauth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[10]);
}

// ===================================================================

Tattach_SecretsEntry_DoNotUse::Tattach_SecretsEntry_DoNotUse() {}
Tattach_SecretsEntry_DoNotUse::Tattach_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Tattach_SecretsEntry_DoNotUse::MergeFrom(const Tattach_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Tattach_SecretsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[11]);
}

// ===================================================================

class Tattach::_Internal {
 public:
};

Tattach::Tattach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Tattach::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Tattach)
}
Tattach::Tattach(const Tattach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tattach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.secrets_)*/{}
    , decltype(_impl_.aname_){}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.afid_){}
    , decltype(_impl_.clntid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.secrets_.MergeFrom(from._impl_.secrets_);
  _impl_.aname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aname().empty()) {
    _this->_impl_.aname_.Set(from._internal_aname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clntid_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.clntid_));
  // @@protoc_insertion_point(copy_constructor:Tattach)
}

inline void Tattach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.secrets_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.aname_){}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.afid_){0u}
    , decltype(_impl_.clntid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tattach::~Tattach() {
  // @@protoc_insertion_point(destructor:Tattach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Tattach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.secrets_.Destruct();
  _impl_.secrets_.~MapField();
  _impl_.aname_.Destroy();
}

void Tattach::ArenaDtor(void* object) {
  Tattach* _this = reinterpret_cast< Tattach* >(object);
  _this->_impl_.secrets_.Destruct();
}
void Tattach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tattach::Clear() {
// @@protoc_insertion_point(message_clear_start:Tattach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secrets_.Clear();
  _impl_.aname_.ClearToEmpty();
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clntid_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.clntid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tattach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 afid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.afid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .SecretProto> secrets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string aname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_aname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Tattach.aname"));
        } else
          goto handle_unusual;
        continue;
      // uint64 clntId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.clntid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tattach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tattach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 afid = 2;
  if (this->_internal_afid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_afid(), target);
  }

  // map<string, .SecretProto> secrets = 3;
  if (!this->_internal_secrets().empty()) {
    using MapType = ::_pb::Map<std::string, ::SecretProto>;
    using WireHelper = Tattach_SecretsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_secrets();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Tattach.SecretsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string aname = 4;
  if (!this->_internal_aname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aname().data(), static_cast<int>(this->_internal_aname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tattach.aname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_aname(), target);
  }

  // uint64 clntId = 5;
  if (this->_internal_clntid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_clntid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tattach)
  return target;
}

size_t Tattach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tattach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .SecretProto> secrets = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::SecretProto >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += Tattach_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string aname = 4;
  if (!this->_internal_aname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aname());
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 afid = 2;
  if (this->_internal_afid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_afid());
  }

  // uint64 clntId = 5;
  if (this->_internal_clntid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_clntid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tattach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tattach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tattach::GetClassData() const { return &_class_data_; }


void Tattach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tattach*>(&to_msg);
  auto& from = static_cast<const Tattach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tattach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.secrets_.MergeFrom(from._impl_.secrets_);
  if (!from._internal_aname().empty()) {
    _this->_internal_set_aname(from._internal_aname());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_afid() != 0) {
    _this->_internal_set_afid(from._internal_afid());
  }
  if (from._internal_clntid() != 0) {
    _this->_internal_set_clntid(from._internal_clntid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tattach::CopyFrom(const Tattach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tattach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tattach::IsInitialized() const {
  return true;
}

void Tattach::InternalSwap(Tattach* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.secrets_.InternalSwap(&other->_impl_.secrets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aname_, lhs_arena,
      &other->_impl_.aname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tattach, _impl_.clntid_)
      + sizeof(Tattach::_impl_.clntid_)
      - PROTOBUF_FIELD_OFFSET(Tattach, _impl_.fid_)>(
          reinterpret_cast<char*>(&_impl_.fid_),
          reinterpret_cast<char*>(&other->_impl_.fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tattach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[12]);
}

// ===================================================================

class Rattach::_Internal {
 public:
  static const ::TqidProto& qid(const Rattach* msg);
};

const ::TqidProto&
Rattach::_Internal::qid(const Rattach* msg) {
  return *msg->_impl_.qid_;
}
Rattach::Rattach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rattach)
}
Rattach::Rattach(const Rattach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rattach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qid()) {
    _this->_impl_.qid_ = new ::TqidProto(*from._impl_.qid_);
  }
  // @@protoc_insertion_point(copy_constructor:Rattach)
}

inline void Rattach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rattach::~Rattach() {
  // @@protoc_insertion_point(destructor:Rattach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rattach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.qid_;
}

void Rattach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rattach::Clear() {
// @@protoc_insertion_point(message_clear_start:Rattach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.qid_ != nullptr) {
    delete _impl_.qid_;
  }
  _impl_.qid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rattach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TqidProto qid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rattach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rattach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::qid(this),
        _Internal::qid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rattach)
  return target;
}

size_t Rattach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rattach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rattach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rattach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rattach::GetClassData() const { return &_class_data_; }


void Rattach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rattach*>(&to_msg);
  auto& from = static_cast<const Rattach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rattach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qid()) {
    _this->_internal_mutable_qid()->::TqidProto::MergeFrom(
        from._internal_qid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rattach::CopyFrom(const Rattach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rattach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rattach::IsInitialized() const {
  return true;
}

void Rattach::InternalSwap(Rattach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.qid_, other->_impl_.qid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rattach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[13]);
}

// ===================================================================

class Rerror::_Internal {
 public:
};

Rerror::Rerror(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rerror)
}
Rerror::Rerror(const Rerror& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rerror* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_){}
    , decltype(_impl_.err_){}
    , decltype(_impl_.errcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obj().empty()) {
    _this->_impl_.obj_.Set(from._internal_obj(), 
      _this->GetArenaForAllocation());
  }
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err().empty()) {
    _this->_impl_.err_.Set(from._internal_err(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:Rerror)
}

inline void Rerror::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_){}
    , decltype(_impl_.err_){}
    , decltype(_impl_.errcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.obj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rerror::~Rerror() {
  // @@protoc_insertion_point(destructor:Rerror)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rerror::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obj_.Destroy();
  _impl_.err_.Destroy();
}

void Rerror::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rerror::Clear() {
// @@protoc_insertion_point(message_clear_start:Rerror)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obj_.ClearToEmpty();
  _impl_.err_.ClearToEmpty();
  _impl_.errcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rerror::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_obj();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rerror.obj"));
        } else
          goto handle_unusual;
        continue;
      // string err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rerror.err"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rerror::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rerror)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // string obj = 2;
  if (!this->_internal_obj().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj().data(), static_cast<int>(this->_internal_obj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rerror.obj");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obj(), target);
  }

  // string err = 3;
  if (!this->_internal_err().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rerror.err");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rerror)
  return target;
}

size_t Rerror::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rerror)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string obj = 2;
  if (!this->_internal_obj().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj());
  }

  // string err = 3;
  if (!this->_internal_err().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  // uint32 errCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rerror::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rerror::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rerror::GetClassData() const { return &_class_data_; }


void Rerror::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rerror*>(&to_msg);
  auto& from = static_cast<const Rerror&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rerror)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_obj().empty()) {
    _this->_internal_set_obj(from._internal_obj());
  }
  if (!from._internal_err().empty()) {
    _this->_internal_set_err(from._internal_err());
  }
  if (from._internal_errcode() != 0) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rerror::CopyFrom(const Rerror& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rerror)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rerror::IsInitialized() const {
  return true;
}

void Rerror::InternalSwap(Rerror* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obj_, lhs_arena,
      &other->_impl_.obj_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.err_, lhs_arena,
      &other->_impl_.err_, rhs_arena
  );
  swap(_impl_.errcode_, other->_impl_.errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rerror::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[14]);
}

// ===================================================================

class Twalk::_Internal {
 public:
};

Twalk::Twalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Twalk)
}
Twalk::Twalk(const Twalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Twalk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){from._impl_.wnames_}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.newfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newfid_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.newfid_));
  // @@protoc_insertion_point(copy_constructor:Twalk)
}

inline void Twalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){arena}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.newfid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Twalk::~Twalk() {
  // @@protoc_insertion_point(destructor:Twalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Twalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wnames_.~RepeatedPtrField();
}

void Twalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Twalk::Clear() {
// @@protoc_insertion_point(message_clear_start:Twalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wnames_.Clear();
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newfid_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.newfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 newFid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.newfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string wnames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Twalk.wnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Twalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Twalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 newFid = 2;
  if (this->_internal_newfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newfid(), target);
  }

  // repeated string wnames = 3;
  for (int i = 0, n = this->_internal_wnames_size(); i < n; i++) {
    const auto& s = this->_internal_wnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Twalk.wnames");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Twalk)
  return target;
}

size_t Twalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Twalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wnames = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wnames_.size());
  for (int i = 0, n = _impl_.wnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wnames_.Get(i));
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 newFid = 2;
  if (this->_internal_newfid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Twalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Twalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Twalk::GetClassData() const { return &_class_data_; }


void Twalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Twalk*>(&to_msg);
  auto& from = static_cast<const Twalk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Twalk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wnames_.MergeFrom(from._impl_.wnames_);
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_newfid() != 0) {
    _this->_internal_set_newfid(from._internal_newfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Twalk::CopyFrom(const Twalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Twalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twalk::IsInitialized() const {
  return true;
}

void Twalk::InternalSwap(Twalk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wnames_.InternalSwap(&other->_impl_.wnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twalk, _impl_.newfid_)
      + sizeof(Twalk::_impl_.newfid_)
      - PROTOBUF_FIELD_OFFSET(Twalk, _impl_.fid_)>(
          reinterpret_cast<char*>(&_impl_.fid_),
          reinterpret_cast<char*>(&other->_impl_.fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[15]);
}

// ===================================================================

class Rwalk::_Internal {
 public:
};

Rwalk::Rwalk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rwalk)
}
Rwalk::Rwalk(const Rwalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rwalk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qids_){from._impl_.qids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rwalk)
}

inline void Rwalk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rwalk::~Rwalk() {
  // @@protoc_insertion_point(destructor:Rwalk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rwalk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qids_.~RepeatedPtrField();
}

void Rwalk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rwalk::Clear() {
// @@protoc_insertion_point(message_clear_start:Rwalk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rwalk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TqidProto qids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rwalk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rwalk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TqidProto qids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qids_size()); i < n; i++) {
    const auto& repfield = this->_internal_qids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rwalk)
  return target;
}

size_t Rwalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rwalk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TqidProto qids = 1;
  total_size += 1UL * this->_internal_qids_size();
  for (const auto& msg : this->_impl_.qids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rwalk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rwalk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rwalk::GetClassData() const { return &_class_data_; }


void Rwalk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rwalk*>(&to_msg);
  auto& from = static_cast<const Rwalk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rwalk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qids_.MergeFrom(from._impl_.qids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rwalk::CopyFrom(const Rwalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rwalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rwalk::IsInitialized() const {
  return true;
}

void Rwalk::InternalSwap(Rwalk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qids_.InternalSwap(&other->_impl_.qids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rwalk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[16]);
}

// ===================================================================

class Topen::_Internal {
 public:
};

Topen::Topen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Topen)
}
Topen::Topen(const Topen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Topen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:Topen)
}

inline void Topen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){0u}
    , decltype(_impl_.mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Topen::~Topen() {
  // @@protoc_insertion_point(destructor:Topen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Topen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Topen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Topen::Clear() {
// @@protoc_insertion_point(message_clear_start:Topen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Topen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Topen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Topen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Topen)
  return target;
}

size_t Topen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Topen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Topen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Topen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Topen::GetClassData() const { return &_class_data_; }


void Topen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Topen*>(&to_msg);
  auto& from = static_cast<const Topen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Topen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Topen::CopyFrom(const Topen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Topen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topen::IsInitialized() const {
  return true;
}

void Topen::InternalSwap(Topen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Topen, _impl_.mode_)
      + sizeof(Topen::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(Topen, _impl_.fid_)>(
          reinterpret_cast<char*>(&_impl_.fid_),
          reinterpret_cast<char*>(&other->_impl_.fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Topen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[17]);
}

// ===================================================================

class Ropen::_Internal {
 public:
  static const ::TqidProto& qid(const Ropen* msg);
};

const ::TqidProto&
Ropen::_Internal::qid(const Ropen* msg) {
  return *msg->_impl_.qid_;
}
Ropen::Ropen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ropen)
}
Ropen::Ropen(const Ropen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ropen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.iounit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qid()) {
    _this->_impl_.qid_ = new ::TqidProto(*from._impl_.qid_);
  }
  _this->_impl_.iounit_ = from._impl_.iounit_;
  // @@protoc_insertion_point(copy_constructor:Ropen)
}

inline void Ropen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.iounit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ropen::~Ropen() {
  // @@protoc_insertion_point(destructor:Ropen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ropen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.qid_;
}

void Ropen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ropen::Clear() {
// @@protoc_insertion_point(message_clear_start:Ropen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.qid_ != nullptr) {
    delete _impl_.qid_;
  }
  _impl_.qid_ = nullptr;
  _impl_.iounit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ropen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TqidProto qid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iounit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.iounit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ropen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ropen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::qid(this),
        _Internal::qid(this).GetCachedSize(), target, stream);
  }

  // uint32 iounit = 2;
  if (this->_internal_iounit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iounit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ropen)
  return target;
}

size_t Ropen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ropen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qid_);
  }

  // uint32 iounit = 2;
  if (this->_internal_iounit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iounit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ropen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ropen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ropen::GetClassData() const { return &_class_data_; }


void Ropen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ropen*>(&to_msg);
  auto& from = static_cast<const Ropen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ropen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qid()) {
    _this->_internal_mutable_qid()->::TqidProto::MergeFrom(
        from._internal_qid());
  }
  if (from._internal_iounit() != 0) {
    _this->_internal_set_iounit(from._internal_iounit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ropen::CopyFrom(const Ropen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ropen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ropen::IsInitialized() const {
  return true;
}

void Ropen::InternalSwap(Ropen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ropen, _impl_.iounit_)
      + sizeof(Ropen::_impl_.iounit_)
      - PROTOBUF_FIELD_OFFSET(Ropen, _impl_.qid_)>(
          reinterpret_cast<char*>(&_impl_.qid_),
          reinterpret_cast<char*>(&other->_impl_.qid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ropen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[18]);
}

// ===================================================================

class Tcreate::_Internal {
 public:
  static const ::TfenceProto& fence(const Tcreate* msg);
};

const ::TfenceProto&
Tcreate::_Internal::fence(const Tcreate* msg) {
  return *msg->_impl_.fence_;
}
Tcreate::Tcreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tcreate)
}
Tcreate::Tcreate(const Tcreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tcreate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.perm_){}
    , decltype(_impl_.lease_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:Tcreate)
}

inline void Tcreate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.perm_){0u}
    , decltype(_impl_.lease_){uint64_t{0u}}
    , decltype(_impl_.mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tcreate::~Tcreate() {
  // @@protoc_insertion_point(destructor:Tcreate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tcreate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Tcreate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tcreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Tcreate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tcreate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Tcreate.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 perm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.perm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lease = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tcreate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tcreate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tcreate.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 perm = 3;
  if (this->_internal_perm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_perm(), target);
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  // uint64 lease = 5;
  if (this->_internal_lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lease(), target);
  }

  // .TfenceProto fence = 6;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tcreate)
  return target;
}

size_t Tcreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tcreate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .TfenceProto fence = 6;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 perm = 3;
  if (this->_internal_perm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perm());
  }

  // uint64 lease = 5;
  if (this->_internal_lease() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lease());
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tcreate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tcreate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tcreate::GetClassData() const { return &_class_data_; }


void Tcreate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tcreate*>(&to_msg);
  auto& from = static_cast<const Tcreate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tcreate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_perm() != 0) {
    _this->_internal_set_perm(from._internal_perm());
  }
  if (from._internal_lease() != 0) {
    _this->_internal_set_lease(from._internal_lease());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tcreate::CopyFrom(const Tcreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tcreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tcreate::IsInitialized() const {
  return true;
}

void Tcreate::InternalSwap(Tcreate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tcreate, _impl_.mode_)
      + sizeof(Tcreate::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(Tcreate, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tcreate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[19]);
}

// ===================================================================

class Rcreate::_Internal {
 public:
  static const ::TqidProto& qid(const Rcreate* msg);
};

const ::TqidProto&
Rcreate::_Internal::qid(const Rcreate* msg) {
  return *msg->_impl_.qid_;
}
Rcreate::Rcreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rcreate)
}
Rcreate::Rcreate(const Rcreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rcreate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.iounit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qid()) {
    _this->_impl_.qid_ = new ::TqidProto(*from._impl_.qid_);
  }
  _this->_impl_.iounit_ = from._impl_.iounit_;
  // @@protoc_insertion_point(copy_constructor:Rcreate)
}

inline void Rcreate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qid_){nullptr}
    , decltype(_impl_.iounit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rcreate::~Rcreate() {
  // @@protoc_insertion_point(destructor:Rcreate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rcreate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.qid_;
}

void Rcreate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rcreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Rcreate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.qid_ != nullptr) {
    delete _impl_.qid_;
  }
  _impl_.qid_ = nullptr;
  _impl_.iounit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rcreate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TqidProto qid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_qid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iounit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.iounit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rcreate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rcreate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::qid(this),
        _Internal::qid(this).GetCachedSize(), target, stream);
  }

  // uint32 iounit = 2;
  if (this->_internal_iounit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iounit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rcreate)
  return target;
}

size_t Rcreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rcreate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TqidProto qid = 1;
  if (this->_internal_has_qid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qid_);
  }

  // uint32 iounit = 2;
  if (this->_internal_iounit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iounit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rcreate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rcreate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rcreate::GetClassData() const { return &_class_data_; }


void Rcreate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rcreate*>(&to_msg);
  auto& from = static_cast<const Rcreate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rcreate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qid()) {
    _this->_internal_mutable_qid()->::TqidProto::MergeFrom(
        from._internal_qid());
  }
  if (from._internal_iounit() != 0) {
    _this->_internal_set_iounit(from._internal_iounit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rcreate::CopyFrom(const Rcreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rcreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rcreate::IsInitialized() const {
  return true;
}

void Rcreate::InternalSwap(Rcreate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rcreate, _impl_.iounit_)
      + sizeof(Rcreate::_impl_.iounit_)
      - PROTOBUF_FIELD_OFFSET(Rcreate, _impl_.qid_)>(
          reinterpret_cast<char*>(&_impl_.qid_),
          reinterpret_cast<char*>(&other->_impl_.qid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rcreate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[20]);
}

// ===================================================================

class TreadF::_Internal {
 public:
  static const ::TfenceProto& fence(const TreadF* msg);
};

const ::TfenceProto&
TreadF::_Internal::fence(const TreadF* msg) {
  return *msg->_impl_.fence_;
}
TreadF::TreadF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TreadF)
}
TreadF::TreadF(const TreadF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TreadF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TreadF)
}

inline void TreadF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TreadF::~TreadF() {
  // @@protoc_insertion_point(destructor:TreadF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TreadF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void TreadF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TreadF::Clear() {
// @@protoc_insertion_point(message_clear_start:TreadF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreadF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreadF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreadF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // .TfenceProto fence = 4;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreadF)
  return target;
}

size_t TreadF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TreadF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TfenceProto fence = 4;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreadF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TreadF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreadF::GetClassData() const { return &_class_data_; }


void TreadF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TreadF*>(&to_msg);
  auto& from = static_cast<const TreadF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TreadF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreadF::CopyFrom(const TreadF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TreadF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreadF::IsInitialized() const {
  return true;
}

void TreadF::InternalSwap(TreadF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreadF, _impl_.count_)
      + sizeof(TreadF::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TreadF, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreadF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[21]);
}

// ===================================================================

class Rread::_Internal {
 public:
};

Rread::Rread(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rread)
}
Rread::Rread(const Rread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rread* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:Rread)
}

inline void Rread::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rread::~Rread() {
  // @@protoc_insertion_point(destructor:Rread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rread::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rread::Clear() {
// @@protoc_insertion_point(message_clear_start:Rread)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rread::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rread)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rread)
  return target;
}

size_t Rread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rread)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rread::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rread::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rread::GetClassData() const { return &_class_data_; }


void Rread::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rread*>(&to_msg);
  auto& from = static_cast<const Rread&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rread)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rread::CopyFrom(const Rread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rread::IsInitialized() const {
  return true;
}

void Rread::InternalSwap(Rread* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rread::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[22]);
}

// ===================================================================

class TwriteF::_Internal {
 public:
  static const ::TfenceProto& fence(const TwriteF* msg);
};

const ::TfenceProto&
TwriteF::_Internal::fence(const TwriteF* msg) {
  return *msg->_impl_.fence_;
}
TwriteF::TwriteF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TwriteF)
}
TwriteF::TwriteF(const TwriteF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TwriteF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fid_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.fid_));
  // @@protoc_insertion_point(copy_constructor:TwriteF)
}

inline void TwriteF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TwriteF::~TwriteF() {
  // @@protoc_insertion_point(destructor:TwriteF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TwriteF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void TwriteF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TwriteF::Clear() {
// @@protoc_insertion_point(message_clear_start:TwriteF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fid_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.fid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwriteF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwriteF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwriteF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // .TfenceProto fence = 3;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwriteF)
  return target;
}

size_t TwriteF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TwriteF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TfenceProto fence = 3;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwriteF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TwriteF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwriteF::GetClassData() const { return &_class_data_; }


void TwriteF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TwriteF*>(&to_msg);
  auto& from = static_cast<const TwriteF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TwriteF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwriteF::CopyFrom(const TwriteF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TwriteF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwriteF::IsInitialized() const {
  return true;
}

void TwriteF::InternalSwap(TwriteF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwriteF, _impl_.fid_)
      + sizeof(TwriteF::_impl_.fid_)
      - PROTOBUF_FIELD_OFFSET(TwriteF, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwriteF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[23]);
}

// ===================================================================

class Rwrite::_Internal {
 public:
};

Rwrite::Rwrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rwrite)
}
Rwrite::Rwrite(const Rwrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rwrite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:Rwrite)
}

inline void Rwrite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rwrite::~Rwrite() {
  // @@protoc_insertion_point(destructor:Rwrite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rwrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rwrite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rwrite::Clear() {
// @@protoc_insertion_point(message_clear_start:Rwrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rwrite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rwrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rwrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rwrite)
  return target;
}

size_t Rwrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rwrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rwrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rwrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rwrite::GetClassData() const { return &_class_data_; }


void Rwrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rwrite*>(&to_msg);
  auto& from = static_cast<const Rwrite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rwrite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rwrite::CopyFrom(const Rwrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rwrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rwrite::IsInitialized() const {
  return true;
}

void Rwrite::InternalSwap(Rwrite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rwrite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[24]);
}

// ===================================================================

class Tclunk::_Internal {
 public:
};

Tclunk::Tclunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tclunk)
}
Tclunk::Tclunk(const Tclunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tclunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fid_ = from._impl_.fid_;
  // @@protoc_insertion_point(copy_constructor:Tclunk)
}

inline void Tclunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tclunk::~Tclunk() {
  // @@protoc_insertion_point(destructor:Tclunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tclunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tclunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tclunk::Clear() {
// @@protoc_insertion_point(message_clear_start:Tclunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tclunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tclunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tclunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tclunk)
  return target;
}

size_t Tclunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tclunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tclunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tclunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tclunk::GetClassData() const { return &_class_data_; }


void Tclunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tclunk*>(&to_msg);
  auto& from = static_cast<const Tclunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tclunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tclunk::CopyFrom(const Tclunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tclunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tclunk::IsInitialized() const {
  return true;
}

void Tclunk::InternalSwap(Tclunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fid_, other->_impl_.fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tclunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[25]);
}

// ===================================================================

class Rclunk::_Internal {
 public:
};

Rclunk::Rclunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rclunk)
}
Rclunk::Rclunk(const Rclunk& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rclunk* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rclunk)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rclunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rclunk::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rclunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[26]);
}

// ===================================================================

class Tremove::_Internal {
 public:
  static const ::TfenceProto& fence(const Tremove* msg);
};

const ::TfenceProto&
Tremove::_Internal::fence(const Tremove* msg) {
  return *msg->_impl_.fence_;
}
Tremove::Tremove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tremove)
}
Tremove::Tremove(const Tremove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tremove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  _this->_impl_.fid_ = from._impl_.fid_;
  // @@protoc_insertion_point(copy_constructor:Tremove)
}

inline void Tremove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tremove::~Tremove() {
  // @@protoc_insertion_point(destructor:Tremove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tremove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Tremove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tremove::Clear() {
// @@protoc_insertion_point(message_clear_start:Tremove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  _impl_.fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tremove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tremove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tremove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // .TfenceProto fence = 2;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tremove)
  return target;
}

size_t Tremove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tremove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TfenceProto fence = 2;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tremove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tremove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tremove::GetClassData() const { return &_class_data_; }


void Tremove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tremove*>(&to_msg);
  auto& from = static_cast<const Tremove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tremove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tremove::CopyFrom(const Tremove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tremove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tremove::IsInitialized() const {
  return true;
}

void Tremove::InternalSwap(Tremove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tremove, _impl_.fid_)
      + sizeof(Tremove::_impl_.fid_)
      - PROTOBUF_FIELD_OFFSET(Tremove, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tremove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[27]);
}

// ===================================================================

class Rremove::_Internal {
 public:
};

Rremove::Rremove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rremove)
}
Rremove::Rremove(const Rremove& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rremove* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rremove)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rremove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rremove::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rremove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[28]);
}

// ===================================================================

class Trstat::_Internal {
 public:
};

Trstat::Trstat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Trstat)
}
Trstat::Trstat(const Trstat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trstat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fid_ = from._impl_.fid_;
  // @@protoc_insertion_point(copy_constructor:Trstat)
}

inline void Trstat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Trstat::~Trstat() {
  // @@protoc_insertion_point(destructor:Trstat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trstat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trstat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trstat::Clear() {
// @@protoc_insertion_point(message_clear_start:Trstat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trstat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trstat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trstat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trstat)
  return target;
}

size_t Trstat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trstat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trstat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trstat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trstat::GetClassData() const { return &_class_data_; }


void Trstat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trstat*>(&to_msg);
  auto& from = static_cast<const Trstat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Trstat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trstat::CopyFrom(const Trstat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trstat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trstat::IsInitialized() const {
  return true;
}

void Trstat::InternalSwap(Trstat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fid_, other->_impl_.fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trstat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[29]);
}

// ===================================================================

class Rrstat::_Internal {
 public:
  static const ::TstatProto& stat(const Rrstat* msg);
};

const ::TstatProto&
Rrstat::_Internal::stat(const Rrstat* msg) {
  return *msg->_impl_.stat_;
}
Rrstat::Rrstat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rrstat)
}
Rrstat::Rrstat(const Rrstat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rrstat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::TstatProto(*from._impl_.stat_);
  }
  // @@protoc_insertion_point(copy_constructor:Rrstat)
}

inline void Rrstat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rrstat::~Rrstat() {
  // @@protoc_insertion_point(destructor:Rrstat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rrstat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stat_;
}

void Rrstat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rrstat::Clear() {
// @@protoc_insertion_point(message_clear_start:Rrstat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rrstat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TstatProto stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rrstat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rrstat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TstatProto stat = 1;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rrstat)
  return target;
}

size_t Rrstat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rrstat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TstatProto stat = 1;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rrstat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rrstat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rrstat::GetClassData() const { return &_class_data_; }


void Rrstat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rrstat*>(&to_msg);
  auto& from = static_cast<const Rrstat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rrstat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::TstatProto::MergeFrom(
        from._internal_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rrstat::CopyFrom(const Rrstat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rrstat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rrstat::IsInitialized() const {
  return true;
}

void Rrstat::InternalSwap(Rrstat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stat_, other->_impl_.stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rrstat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[30]);
}

// ===================================================================

class Twstat::_Internal {
 public:
  static const ::TstatProto& stat(const Twstat* msg);
  static const ::TfenceProto& fence(const Twstat* msg);
};

const ::TstatProto&
Twstat::_Internal::stat(const Twstat* msg) {
  return *msg->_impl_.stat_;
}
const ::TfenceProto&
Twstat::_Internal::fence(const Twstat* msg) {
  return *msg->_impl_.fence_;
}
Twstat::Twstat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Twstat)
}
Twstat::Twstat(const Twstat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Twstat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::TstatProto(*from._impl_.stat_);
  }
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  _this->_impl_.fid_ = from._impl_.fid_;
  // @@protoc_insertion_point(copy_constructor:Twstat)
}

inline void Twstat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Twstat::~Twstat() {
  // @@protoc_insertion_point(destructor:Twstat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Twstat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stat_;
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Twstat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Twstat::Clear() {
// @@protoc_insertion_point(message_clear_start:Twstat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  _impl_.fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twstat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TstatProto stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Twstat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Twstat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // .TstatProto stat = 2;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  // .TfenceProto fence = 3;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Twstat)
  return target;
}

size_t Twstat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Twstat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TstatProto stat = 2;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  // .TfenceProto fence = 3;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Twstat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Twstat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Twstat::GetClassData() const { return &_class_data_; }


void Twstat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Twstat*>(&to_msg);
  auto& from = static_cast<const Twstat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Twstat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::TstatProto::MergeFrom(
        from._internal_stat());
  }
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Twstat::CopyFrom(const Twstat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Twstat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twstat::IsInitialized() const {
  return true;
}

void Twstat::InternalSwap(Twstat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twstat, _impl_.fid_)
      + sizeof(Twstat::_impl_.fid_)
      - PROTOBUF_FIELD_OFFSET(Twstat, _impl_.stat_)>(
          reinterpret_cast<char*>(&_impl_.stat_),
          reinterpret_cast<char*>(&other->_impl_.stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twstat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[31]);
}

// ===================================================================

class Rwstat::_Internal {
 public:
};

Rwstat::Rwstat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rwstat)
}
Rwstat::Rwstat(const Rwstat& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rwstat* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rwstat)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rwstat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rwstat::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rwstat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[32]);
}

// ===================================================================

class Twatch::_Internal {
 public:
};

Twatch::Twatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Twatch)
}
Twatch::Twatch(const Twatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Twatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dirfid_){}
    , decltype(_impl_.watchfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dirfid_, &from._impl_.dirfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.watchfid_) -
    reinterpret_cast<char*>(&_impl_.dirfid_)) + sizeof(_impl_.watchfid_));
  // @@protoc_insertion_point(copy_constructor:Twatch)
}

inline void Twatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dirfid_){0u}
    , decltype(_impl_.watchfid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Twatch::~Twatch() {
  // @@protoc_insertion_point(destructor:Twatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Twatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Twatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Twatch::Clear() {
// @@protoc_insertion_point(message_clear_start:Twatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dirfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.watchfid_) -
      reinterpret_cast<char*>(&_impl_.dirfid_)) + sizeof(_impl_.watchfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dirfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dirfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 watchfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.watchfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Twatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Twatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dirfid = 1;
  if (this->_internal_dirfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dirfid(), target);
  }

  // uint32 watchfid = 2;
  if (this->_internal_watchfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_watchfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Twatch)
  return target;
}

size_t Twatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Twatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dirfid = 1;
  if (this->_internal_dirfid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dirfid());
  }

  // uint32 watchfid = 2;
  if (this->_internal_watchfid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_watchfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Twatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Twatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Twatch::GetClassData() const { return &_class_data_; }


void Twatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Twatch*>(&to_msg);
  auto& from = static_cast<const Twatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Twatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dirfid() != 0) {
    _this->_internal_set_dirfid(from._internal_dirfid());
  }
  if (from._internal_watchfid() != 0) {
    _this->_internal_set_watchfid(from._internal_watchfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Twatch::CopyFrom(const Twatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Twatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twatch::IsInitialized() const {
  return true;
}

void Twatch::InternalSwap(Twatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twatch, _impl_.watchfid_)
      + sizeof(Twatch::_impl_.watchfid_)
      - PROTOBUF_FIELD_OFFSET(Twatch, _impl_.dirfid_)>(
          reinterpret_cast<char*>(&_impl_.dirfid_),
          reinterpret_cast<char*>(&other->_impl_.dirfid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[33]);
}

// ===================================================================

class Rwatch::_Internal {
 public:
};

Rwatch::Rwatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rwatch)
}
Rwatch::Rwatch(const Rwatch& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rwatch* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rwatch)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rwatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rwatch::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rwatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[34]);
}

// ===================================================================

class Trenameat::_Internal {
 public:
  static const ::TfenceProto& fence(const Trenameat* msg);
};

const ::TfenceProto&
Trenameat::_Internal::fence(const Trenameat* msg) {
  return *msg->_impl_.fence_;
}
Trenameat::Trenameat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Trenameat)
}
Trenameat::Trenameat(const Trenameat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Trenameat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.oldfid_){}
    , decltype(_impl_.newfid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldname().empty()) {
    _this->_impl_.oldname_.Set(from._internal_oldname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newname().empty()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.oldfid_, &from._impl_.oldfid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newfid_) -
    reinterpret_cast<char*>(&_impl_.oldfid_)) + sizeof(_impl_.newfid_));
  // @@protoc_insertion_point(copy_constructor:Trenameat)
}

inline void Trenameat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.oldfid_){0u}
    , decltype(_impl_.newfid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Trenameat::~Trenameat() {
  // @@protoc_insertion_point(destructor:Trenameat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trenameat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldname_.Destroy();
  _impl_.newname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Trenameat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trenameat::Clear() {
// @@protoc_insertion_point(message_clear_start:Trenameat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.oldname_.ClearToEmpty();
  _impl_.newname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.oldfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newfid_) -
      reinterpret_cast<char*>(&_impl_.oldfid_)) + sizeof(_impl_.newfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trenameat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 oldFid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.oldfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oldName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Trenameat.oldName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 newFid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.newfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Trenameat.newName"));
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trenameat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trenameat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 oldFid = 1;
  if (this->_internal_oldfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oldfid(), target);
  }

  // string oldName = 2;
  if (!this->_internal_oldname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trenameat.oldName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldname(), target);
  }

  // uint32 newFid = 3;
  if (this->_internal_newfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_newfid(), target);
  }

  // string newName = 4;
  if (!this->_internal_newname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trenameat.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  // .TfenceProto fence = 5;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trenameat)
  return target;
}

size_t Trenameat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trenameat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string oldName = 2;
  if (!this->_internal_oldname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  // string newName = 4;
  if (!this->_internal_newname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  // .TfenceProto fence = 5;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 oldFid = 1;
  if (this->_internal_oldfid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldfid());
  }

  // uint32 newFid = 3;
  if (this->_internal_newfid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trenameat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Trenameat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trenameat::GetClassData() const { return &_class_data_; }


void Trenameat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Trenameat*>(&to_msg);
  auto& from = static_cast<const Trenameat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Trenameat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_oldname().empty()) {
    _this->_internal_set_oldname(from._internal_oldname());
  }
  if (!from._internal_newname().empty()) {
    _this->_internal_set_newname(from._internal_newname());
  }
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_oldfid() != 0) {
    _this->_internal_set_oldfid(from._internal_oldfid());
  }
  if (from._internal_newfid() != 0) {
    _this->_internal_set_newfid(from._internal_newfid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trenameat::CopyFrom(const Trenameat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trenameat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trenameat::IsInitialized() const {
  return true;
}

void Trenameat::InternalSwap(Trenameat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldname_, lhs_arena,
      &other->_impl_.oldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trenameat, _impl_.newfid_)
      + sizeof(Trenameat::_impl_.newfid_)
      - PROTOBUF_FIELD_OFFSET(Trenameat, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trenameat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[35]);
}

// ===================================================================

class Rrenameat::_Internal {
 public:
};

Rrenameat::Rrenameat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rrenameat)
}
Rrenameat::Rrenameat(const Rrenameat& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rrenameat* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rrenameat)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rrenameat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rrenameat::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rrenameat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[36]);
}

// ===================================================================

class Tgetfile::_Internal {
 public:
  static const ::TfenceProto& fence(const Tgetfile* msg);
};

const ::TfenceProto&
Tgetfile::_Internal::fence(const Tgetfile* msg) {
  return *msg->_impl_.fence_;
}
Tgetfile::Tgetfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tgetfile)
}
Tgetfile::Tgetfile(const Tgetfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tgetfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){from._impl_.wnames_}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.resolve_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolve_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.resolve_));
  // @@protoc_insertion_point(copy_constructor:Tgetfile)
}

inline void Tgetfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){arena}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.resolve_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tgetfile::~Tgetfile() {
  // @@protoc_insertion_point(destructor:Tgetfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tgetfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wnames_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Tgetfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tgetfile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tgetfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wnames_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resolve_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.resolve_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tgetfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string wnames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Tgetfile.wnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool resolve = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.resolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tgetfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tgetfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // uint32 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // repeated string wnames = 5;
  for (int i = 0, n = this->_internal_wnames_size(); i < n; i++) {
    const auto& s = this->_internal_wnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tgetfile.wnames");
    target = stream->WriteString(5, s, target);
  }

  // bool resolve = 6;
  if (this->_internal_resolve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_resolve(), target);
  }

  // .TfenceProto fence = 7;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tgetfile)
  return target;
}

size_t Tgetfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tgetfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wnames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wnames_.size());
  for (int i = 0, n = _impl_.wnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wnames_.Get(i));
  }

  // .TfenceProto fence = 7;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint32 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // bool resolve = 6;
  if (this->_internal_resolve() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tgetfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tgetfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tgetfile::GetClassData() const { return &_class_data_; }


void Tgetfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tgetfile*>(&to_msg);
  auto& from = static_cast<const Tgetfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tgetfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wnames_.MergeFrom(from._impl_.wnames_);
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_resolve() != 0) {
    _this->_internal_set_resolve(from._internal_resolve());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tgetfile::CopyFrom(const Tgetfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tgetfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tgetfile::IsInitialized() const {
  return true;
}

void Tgetfile::InternalSwap(Tgetfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wnames_.InternalSwap(&other->_impl_.wnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tgetfile, _impl_.resolve_)
      + sizeof(Tgetfile::_impl_.resolve_)
      - PROTOBUF_FIELD_OFFSET(Tgetfile, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tgetfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[37]);
}

// ===================================================================

class Tputfile::_Internal {
 public:
  static const ::TfenceProto& fence(const Tputfile* msg);
};

const ::TfenceProto&
Tputfile::_Internal::fence(const Tputfile* msg) {
  return *msg->_impl_.fence_;
}
Tputfile::Tputfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tputfile)
}
Tputfile::Tputfile(const Tputfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tputfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){from._impl_.wnames_}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.perm_){}
    , decltype(_impl_.resolve_){}
    , decltype(_impl_.lease_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lease_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.lease_));
  // @@protoc_insertion_point(copy_constructor:Tputfile)
}

inline void Tputfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){arena}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.perm_){0u}
    , decltype(_impl_.resolve_){false}
    , decltype(_impl_.lease_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tputfile::~Tputfile() {
  // @@protoc_insertion_point(destructor:Tputfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tputfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wnames_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Tputfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tputfile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tputfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wnames_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lease_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.lease_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tputfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 perm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.perm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Wnames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Tputfile.Wnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool resolve = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.resolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lease = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tputfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tputfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint32 perm = 3;
  if (this->_internal_perm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_perm(), target);
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_offset(), target);
  }

  // repeated string Wnames = 5;
  for (int i = 0, n = this->_internal_wnames_size(); i < n; i++) {
    const auto& s = this->_internal_wnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tputfile.Wnames");
    target = stream->WriteString(5, s, target);
  }

  // bool resolve = 6;
  if (this->_internal_resolve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_resolve(), target);
  }

  // uint64 lease = 7;
  if (this->_internal_lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_lease(), target);
  }

  // .TfenceProto fence = 8;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tputfile)
  return target;
}

size_t Tputfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tputfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Wnames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wnames_.size());
  for (int i = 0, n = _impl_.wnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wnames_.Get(i));
  }

  // .TfenceProto fence = 8;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint32 perm = 3;
  if (this->_internal_perm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perm());
  }

  // bool resolve = 6;
  if (this->_internal_resolve() != 0) {
    total_size += 1 + 1;
  }

  // uint64 lease = 7;
  if (this->_internal_lease() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lease());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tputfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tputfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tputfile::GetClassData() const { return &_class_data_; }


void Tputfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tputfile*>(&to_msg);
  auto& from = static_cast<const Tputfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tputfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wnames_.MergeFrom(from._impl_.wnames_);
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_perm() != 0) {
    _this->_internal_set_perm(from._internal_perm());
  }
  if (from._internal_resolve() != 0) {
    _this->_internal_set_resolve(from._internal_resolve());
  }
  if (from._internal_lease() != 0) {
    _this->_internal_set_lease(from._internal_lease());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tputfile::CopyFrom(const Tputfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tputfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tputfile::IsInitialized() const {
  return true;
}

void Tputfile::InternalSwap(Tputfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wnames_.InternalSwap(&other->_impl_.wnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tputfile, _impl_.lease_)
      + sizeof(Tputfile::_impl_.lease_)
      - PROTOBUF_FIELD_OFFSET(Tputfile, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tputfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[38]);
}

// ===================================================================

class Tdetach::_Internal {
 public:
};

Tdetach::Tdetach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tdetach)
}
Tdetach::Tdetach(const Tdetach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tdetach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clntid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.clntid_ = from._impl_.clntid_;
  // @@protoc_insertion_point(copy_constructor:Tdetach)
}

inline void Tdetach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clntid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tdetach::~Tdetach() {
  // @@protoc_insertion_point(destructor:Tdetach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tdetach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tdetach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tdetach::Clear() {
// @@protoc_insertion_point(message_clear_start:Tdetach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clntid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tdetach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 clntId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clntid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tdetach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tdetach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 clntId = 1;
  if (this->_internal_clntid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clntid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tdetach)
  return target;
}

size_t Tdetach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tdetach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 clntId = 1;
  if (this->_internal_clntid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_clntid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tdetach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tdetach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tdetach::GetClassData() const { return &_class_data_; }


void Tdetach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tdetach*>(&to_msg);
  auto& from = static_cast<const Tdetach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tdetach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clntid() != 0) {
    _this->_internal_set_clntid(from._internal_clntid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tdetach::CopyFrom(const Tdetach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tdetach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tdetach::IsInitialized() const {
  return true;
}

void Tdetach::InternalSwap(Tdetach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.clntid_, other->_impl_.clntid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tdetach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[39]);
}

// ===================================================================

class Rdetach::_Internal {
 public:
};

Rdetach::Rdetach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rdetach)
}
Rdetach::Rdetach(const Rdetach& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Rdetach* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rdetach)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rdetach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rdetach::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Rdetach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[40]);
}

// ===================================================================

Theartbeat_SidsEntry_DoNotUse::Theartbeat_SidsEntry_DoNotUse() {}
Theartbeat_SidsEntry_DoNotUse::Theartbeat_SidsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Theartbeat_SidsEntry_DoNotUse::MergeFrom(const Theartbeat_SidsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Theartbeat_SidsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[41]);
}

// ===================================================================

class Theartbeat::_Internal {
 public:
};

Theartbeat::Theartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Theartbeat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Theartbeat)
}
Theartbeat::Theartbeat(const Theartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Theartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sids_)*/{}
    , decltype(_impl_.serverside_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sids_.MergeFrom(from._impl_.sids_);
  _this->_impl_.serverside_ = from._impl_.serverside_;
  // @@protoc_insertion_point(copy_constructor:Theartbeat)
}

inline void Theartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sids_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.serverside_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Theartbeat::~Theartbeat() {
  // @@protoc_insertion_point(destructor:Theartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Theartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sids_.Destruct();
  _impl_.sids_.~MapField();
}

void Theartbeat::ArenaDtor(void* object) {
  Theartbeat* _this = reinterpret_cast< Theartbeat* >(object);
  _this->_impl_.sids_.Destruct();
}
void Theartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Theartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Theartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sids_.Clear();
  _impl_.serverside_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Theartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool serverSide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, bool> sids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Theartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Theartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool serverSide = 1;
  if (this->_internal_serverside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_serverside(), target);
  }

  // map<uint64, bool> sids = 2;
  if (!this->_internal_sids().empty()) {
    using MapType = ::_pb::Map<uint64_t, bool>;
    using WireHelper = Theartbeat_SidsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Theartbeat)
  return target;
}

size_t Theartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Theartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, bool> sids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, bool >::const_iterator
      it = this->_internal_sids().begin();
      it != this->_internal_sids().end(); ++it) {
    total_size += Theartbeat_SidsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool serverSide = 1;
  if (this->_internal_serverside() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Theartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Theartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Theartbeat::GetClassData() const { return &_class_data_; }


void Theartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Theartbeat*>(&to_msg);
  auto& from = static_cast<const Theartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Theartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sids_.MergeFrom(from._impl_.sids_);
  if (from._internal_serverside() != 0) {
    _this->_internal_set_serverside(from._internal_serverside());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Theartbeat::CopyFrom(const Theartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Theartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Theartbeat::IsInitialized() const {
  return true;
}

void Theartbeat::InternalSwap(Theartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sids_.InternalSwap(&other->_impl_.sids_);
  swap(_impl_.serverside_, other->_impl_.serverside_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Theartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[42]);
}

// ===================================================================

Rheartbeat_SidsEntry_DoNotUse::Rheartbeat_SidsEntry_DoNotUse() {}
Rheartbeat_SidsEntry_DoNotUse::Rheartbeat_SidsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Rheartbeat_SidsEntry_DoNotUse::MergeFrom(const Rheartbeat_SidsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Rheartbeat_SidsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[43]);
}

// ===================================================================

class Rheartbeat::_Internal {
 public:
};

Rheartbeat::Rheartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Rheartbeat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Rheartbeat)
}
Rheartbeat::Rheartbeat(const Rheartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rheartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sids_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sids_.MergeFrom(from._impl_.sids_);
  // @@protoc_insertion_point(copy_constructor:Rheartbeat)
}

inline void Rheartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rheartbeat::~Rheartbeat() {
  // @@protoc_insertion_point(destructor:Rheartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Rheartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sids_.Destruct();
  _impl_.sids_.~MapField();
}

void Rheartbeat::ArenaDtor(void* object) {
  Rheartbeat* _this = reinterpret_cast< Rheartbeat* >(object);
  _this->_impl_.sids_.Destruct();
}
void Rheartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rheartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Rheartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rheartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, bool> sids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rheartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rheartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, bool> sids = 1;
  if (!this->_internal_sids().empty()) {
    using MapType = ::_pb::Map<uint64_t, bool>;
    using WireHelper = Rheartbeat_SidsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rheartbeat)
  return target;
}

size_t Rheartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rheartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, bool> sids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, bool >::const_iterator
      it = this->_internal_sids().begin();
      it != this->_internal_sids().end(); ++it) {
    total_size += Rheartbeat_SidsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rheartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rheartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rheartbeat::GetClassData() const { return &_class_data_; }


void Rheartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rheartbeat*>(&to_msg);
  auto& from = static_cast<const Rheartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rheartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sids_.MergeFrom(from._impl_.sids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rheartbeat::CopyFrom(const Rheartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rheartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rheartbeat::IsInitialized() const {
  return true;
}

void Rheartbeat::InternalSwap(Rheartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sids_.InternalSwap(&other->_impl_.sids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rheartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[44]);
}

// ===================================================================

class Tremovefile::_Internal {
 public:
  static const ::TfenceProto& fence(const Tremovefile* msg);
};

const ::TfenceProto&
Tremovefile::_Internal::fence(const Tremovefile* msg) {
  return *msg->_impl_.fence_;
}
Tremovefile::Tremovefile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Tremovefile)
}
Tremovefile::Tremovefile(const Tremovefile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tremovefile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){from._impl_.wnames_}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){}
    , decltype(_impl_.resolve_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence()) {
    _this->_impl_.fence_ = new ::TfenceProto(*from._impl_.fence_);
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolve_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.resolve_));
  // @@protoc_insertion_point(copy_constructor:Tremovefile)
}

inline void Tremovefile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wnames_){arena}
    , decltype(_impl_.fence_){nullptr}
    , decltype(_impl_.fid_){0u}
    , decltype(_impl_.resolve_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tremovefile::~Tremovefile() {
  // @@protoc_insertion_point(destructor:Tremovefile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tremovefile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wnames_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.fence_;
}

void Tremovefile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tremovefile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tremovefile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wnames_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.fence_ != nullptr) {
    delete _impl_.fence_;
  }
  _impl_.fence_ = nullptr;
  ::memset(&_impl_.fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resolve_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.resolve_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tremovefile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Wnames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Tremovefile.Wnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool resolve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.resolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TfenceProto fence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tremovefile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tremovefile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // repeated string Wnames = 2;
  for (int i = 0, n = this->_internal_wnames_size(); i < n; i++) {
    const auto& s = this->_internal_wnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Tremovefile.Wnames");
    target = stream->WriteString(2, s, target);
  }

  // bool resolve = 3;
  if (this->_internal_resolve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_resolve(), target);
  }

  // .TfenceProto fence = 4;
  if (this->_internal_has_fence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fence(this),
        _Internal::fence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tremovefile)
  return target;
}

size_t Tremovefile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tremovefile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Wnames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wnames_.size());
  for (int i = 0, n = _impl_.wnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wnames_.Get(i));
  }

  // .TfenceProto fence = 4;
  if (this->_internal_has_fence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fence_);
  }

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // bool resolve = 3;
  if (this->_internal_resolve() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tremovefile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tremovefile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tremovefile::GetClassData() const { return &_class_data_; }


void Tremovefile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tremovefile*>(&to_msg);
  auto& from = static_cast<const Tremovefile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Tremovefile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wnames_.MergeFrom(from._impl_.wnames_);
  if (from._internal_has_fence()) {
    _this->_internal_mutable_fence()->::TfenceProto::MergeFrom(
        from._internal_fence());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_resolve() != 0) {
    _this->_internal_set_resolve(from._internal_resolve());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tremovefile::CopyFrom(const Tremovefile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tremovefile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tremovefile::IsInitialized() const {
  return true;
}

void Tremovefile::InternalSwap(Tremovefile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wnames_.InternalSwap(&other->_impl_.wnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tremovefile, _impl_.resolve_)
      + sizeof(Tremovefile::_impl_.resolve_)
      - PROTOBUF_FIELD_OFFSET(Tremovefile, _impl_.fence_)>(
          reinterpret_cast<char*>(&_impl_.fence_),
          reinterpret_cast<char*>(&other->_impl_.fence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tremovefile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[45]);
}

// ===================================================================

class Twriteread::_Internal {
 public:
};

Twriteread::Twriteread(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Twriteread)
}
Twriteread::Twriteread(const Twriteread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Twriteread* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fid_ = from._impl_.fid_;
  // @@protoc_insertion_point(copy_constructor:Twriteread)
}

inline void Twriteread::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Twriteread::~Twriteread() {
  // @@protoc_insertion_point(destructor:Twriteread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Twriteread::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Twriteread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Twriteread::Clear() {
// @@protoc_insertion_point(message_clear_start:Twriteread)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twriteread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Twriteread::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Twriteread)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Twriteread)
  return target;
}

size_t Twriteread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Twriteread)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Twriteread::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Twriteread::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Twriteread::GetClassData() const { return &_class_data_; }


void Twriteread::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Twriteread*>(&to_msg);
  auto& from = static_cast<const Twriteread&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Twriteread)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Twriteread::CopyFrom(const Twriteread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Twriteread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twriteread::IsInitialized() const {
  return true;
}

void Twriteread::InternalSwap(Twriteread* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fid_, other->_impl_.fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Twriteread::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sigmap_2fsigmap_2eproto_getter, &descriptor_table_sigmap_2fsigmap_2eproto_once,
      file_level_metadata_sigmap_2fsigmap_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TqidProto*
Arena::CreateMaybeMessage< ::TqidProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TqidProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Tprincipal*
Arena::CreateMaybeMessage< ::Tprincipal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tprincipal >(arena);
}
template<> PROTOBUF_NOINLINE ::TstatProto*
Arena::CreateMaybeMessage< ::TstatProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TstatProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Taddr*
Arena::CreateMaybeMessage< ::Taddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Taddr >(arena);
}
template<> PROTOBUF_NOINLINE ::SecretProto*
Arena::CreateMaybeMessage< ::SecretProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SecretProto >(arena);
}
template<> PROTOBUF_NOINLINE ::TendpointProto*
Arena::CreateMaybeMessage< ::TendpointProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TendpointProto >(arena);
}
template<> PROTOBUF_NOINLINE ::TfenceProto*
Arena::CreateMaybeMessage< ::TfenceProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TfenceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::Tversion*
Arena::CreateMaybeMessage< ::Tversion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tversion >(arena);
}
template<> PROTOBUF_NOINLINE ::Rversion*
Arena::CreateMaybeMessage< ::Rversion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rversion >(arena);
}
template<> PROTOBUF_NOINLINE ::Tauth*
Arena::CreateMaybeMessage< ::Tauth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tauth >(arena);
}
template<> PROTOBUF_NOINLINE ::Rauth*
Arena::CreateMaybeMessage< ::Rauth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rauth >(arena);
}
template<> PROTOBUF_NOINLINE ::Tattach_SecretsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Tattach_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tattach_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Tattach*
Arena::CreateMaybeMessage< ::Tattach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tattach >(arena);
}
template<> PROTOBUF_NOINLINE ::Rattach*
Arena::CreateMaybeMessage< ::Rattach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rattach >(arena);
}
template<> PROTOBUF_NOINLINE ::Rerror*
Arena::CreateMaybeMessage< ::Rerror >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rerror >(arena);
}
template<> PROTOBUF_NOINLINE ::Twalk*
Arena::CreateMaybeMessage< ::Twalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Twalk >(arena);
}
template<> PROTOBUF_NOINLINE ::Rwalk*
Arena::CreateMaybeMessage< ::Rwalk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rwalk >(arena);
}
template<> PROTOBUF_NOINLINE ::Topen*
Arena::CreateMaybeMessage< ::Topen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Topen >(arena);
}
template<> PROTOBUF_NOINLINE ::Ropen*
Arena::CreateMaybeMessage< ::Ropen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ropen >(arena);
}
template<> PROTOBUF_NOINLINE ::Tcreate*
Arena::CreateMaybeMessage< ::Tcreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tcreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Rcreate*
Arena::CreateMaybeMessage< ::Rcreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rcreate >(arena);
}
template<> PROTOBUF_NOINLINE ::TreadF*
Arena::CreateMaybeMessage< ::TreadF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TreadF >(arena);
}
template<> PROTOBUF_NOINLINE ::Rread*
Arena::CreateMaybeMessage< ::Rread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rread >(arena);
}
template<> PROTOBUF_NOINLINE ::TwriteF*
Arena::CreateMaybeMessage< ::TwriteF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TwriteF >(arena);
}
template<> PROTOBUF_NOINLINE ::Rwrite*
Arena::CreateMaybeMessage< ::Rwrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rwrite >(arena);
}
template<> PROTOBUF_NOINLINE ::Tclunk*
Arena::CreateMaybeMessage< ::Tclunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tclunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Rclunk*
Arena::CreateMaybeMessage< ::Rclunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rclunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Tremove*
Arena::CreateMaybeMessage< ::Tremove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tremove >(arena);
}
template<> PROTOBUF_NOINLINE ::Rremove*
Arena::CreateMaybeMessage< ::Rremove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rremove >(arena);
}
template<> PROTOBUF_NOINLINE ::Trstat*
Arena::CreateMaybeMessage< ::Trstat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Trstat >(arena);
}
template<> PROTOBUF_NOINLINE ::Rrstat*
Arena::CreateMaybeMessage< ::Rrstat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rrstat >(arena);
}
template<> PROTOBUF_NOINLINE ::Twstat*
Arena::CreateMaybeMessage< ::Twstat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Twstat >(arena);
}
template<> PROTOBUF_NOINLINE ::Rwstat*
Arena::CreateMaybeMessage< ::Rwstat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rwstat >(arena);
}
template<> PROTOBUF_NOINLINE ::Twatch*
Arena::CreateMaybeMessage< ::Twatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Twatch >(arena);
}
template<> PROTOBUF_NOINLINE ::Rwatch*
Arena::CreateMaybeMessage< ::Rwatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rwatch >(arena);
}
template<> PROTOBUF_NOINLINE ::Trenameat*
Arena::CreateMaybeMessage< ::Trenameat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Trenameat >(arena);
}
template<> PROTOBUF_NOINLINE ::Rrenameat*
Arena::CreateMaybeMessage< ::Rrenameat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rrenameat >(arena);
}
template<> PROTOBUF_NOINLINE ::Tgetfile*
Arena::CreateMaybeMessage< ::Tgetfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tgetfile >(arena);
}
template<> PROTOBUF_NOINLINE ::Tputfile*
Arena::CreateMaybeMessage< ::Tputfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tputfile >(arena);
}
template<> PROTOBUF_NOINLINE ::Tdetach*
Arena::CreateMaybeMessage< ::Tdetach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tdetach >(arena);
}
template<> PROTOBUF_NOINLINE ::Rdetach*
Arena::CreateMaybeMessage< ::Rdetach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rdetach >(arena);
}
template<> PROTOBUF_NOINLINE ::Theartbeat_SidsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Theartbeat_SidsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Theartbeat_SidsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Theartbeat*
Arena::CreateMaybeMessage< ::Theartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Theartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::Rheartbeat_SidsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Rheartbeat_SidsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rheartbeat_SidsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Rheartbeat*
Arena::CreateMaybeMessage< ::Rheartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rheartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::Tremovefile*
Arena::CreateMaybeMessage< ::Tremovefile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Tremovefile >(arena);
}
template<> PROTOBUF_NOINLINE ::Twriteread*
Arena::CreateMaybeMessage< ::Twriteread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Twriteread >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
