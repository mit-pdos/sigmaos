/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: pylib/proto/sigmap.proto */

#ifndef PROTOBUF_C_pylib_2fproto_2fsigmap_2eproto__INCLUDED
#define PROTOBUF_C_pylib_2fproto_2fsigmap_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TqidProto TqidProto;
typedef struct _Tprincipal Tprincipal;
typedef struct _TstatProto TstatProto;
typedef struct _Taddr Taddr;
typedef struct _SecretProto SecretProto;
typedef struct _TendpointProto TendpointProto;
typedef struct _TfenceProto TfenceProto;
typedef struct _Tversion Tversion;
typedef struct _Rversion Rversion;
typedef struct _Tauth Tauth;
typedef struct _Rauth Rauth;
typedef struct _Tattach Tattach;
typedef struct _Tattach__SecretsEntry Tattach__SecretsEntry;
typedef struct _Rattach Rattach;
typedef struct _Rerror Rerror;
typedef struct _Twalk Twalk;
typedef struct _Rwalk Rwalk;
typedef struct _Topen Topen;
typedef struct _Ropen Ropen;
typedef struct _Tcreate Tcreate;
typedef struct _Rcreate Rcreate;
typedef struct _TreadF TreadF;
typedef struct _Rread Rread;
typedef struct _TwriteF TwriteF;
typedef struct _Rwrite Rwrite;
typedef struct _Tclunk Tclunk;
typedef struct _Rclunk Rclunk;
typedef struct _Tremove Tremove;
typedef struct _Rremove Rremove;
typedef struct _Trstat Trstat;
typedef struct _Rrstat Rrstat;
typedef struct _Twstat Twstat;
typedef struct _Rwstat Rwstat;
typedef struct _Twatch Twatch;
typedef struct _Rwatch Rwatch;
typedef struct _Trenameat Trenameat;
typedef struct _Rrenameat Rrenameat;
typedef struct _Tgetfile Tgetfile;
typedef struct _Tputfile Tputfile;
typedef struct _Tdetach Tdetach;
typedef struct _Rdetach Rdetach;
typedef struct _Theartbeat Theartbeat;
typedef struct _Theartbeat__SidsEntry Theartbeat__SidsEntry;
typedef struct _Rheartbeat Rheartbeat;
typedef struct _Rheartbeat__SidsEntry Rheartbeat__SidsEntry;
typedef struct _Tremovefile Tremovefile;
typedef struct _Twriteread Twriteread;


/* --- enums --- */


/* --- messages --- */

/*
 * A Qid is the server's unique identification for the file being
 * accessed: two files on the same server hierarchy are the same if
 * and only if their qids are the same.
 */
struct  _TqidProto
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t version;
  uint64_t path;
};
#define TQID_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tqid_proto__descriptor) \
    , 0, 0, 0 }


struct  _Tprincipal
{
  ProtobufCMessage base;
  char *idstr;
  char *realmstr;
};
#define TPRINCIPAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tprincipal__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _TstatProto
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t dev;
  TqidProto *qid;
  uint32_t mode;
  /*
   * last access time in seconds
   */
  uint32_t atime;
  /*
   * last modified time in seconds
   */
  uint32_t mtime;
  /*
   * file length in bytes
   */
  uint64_t length;
  /*
   * file name
   */
  char *name;
  /*
   * owner name
   */
  char *uid;
  /*
   * group name
   */
  char *gid;
  /*
   * name of the last user that modified the file
   */
  char *muid;
};
#define TSTAT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tstat_proto__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Taddr
{
  ProtobufCMessage base;
  char *ipstr;
  uint32_t portint;
};
#define TADDR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&taddr__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _SecretProto
{
  ProtobufCMessage base;
  char *id;
  char *key;
  char *metadata;
};
#define SECRET_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&secret_proto__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _TendpointProto
{
  ProtobufCMessage base;
  /*
   * Type of endpoint (e.g. internal vs external)
   */
  uint32_t type;
  size_t n_addr;
  Taddr **addr;
  char *root;
};
#define TENDPOINT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tendpoint_proto__descriptor) \
    , 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  _TfenceProto
{
  ProtobufCMessage base;
  char *pathname;
  uint64_t epoch;
  uint64_t seqno;
};
#define TFENCE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tfence_proto__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _Tversion
{
  ProtobufCMessage base;
  uint32_t msize;
  char *version;
};
#define TVERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tversion__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _Rversion
{
  ProtobufCMessage base;
  uint32_t msize;
  char *version;
};
#define RVERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rversion__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _Tauth
{
  ProtobufCMessage base;
  uint32_t afid;
  size_t n_principals;
  Tprincipal **principals;
  size_t n_anames;
  char **anames;
};
#define TAUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tauth__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _Rauth
{
  ProtobufCMessage base;
  TqidProto *aqid;
};
#define RAUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rauth__descriptor) \
    , NULL }


struct  _Tattach__SecretsEntry
{
  ProtobufCMessage base;
  char *key;
  SecretProto *value;
};
#define TATTACH__SECRETS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tattach__secrets_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Tattach
{
  ProtobufCMessage base;
  uint32_t fid;
  uint32_t afid;
  size_t n_secrets;
  Tattach__SecretsEntry **secrets;
  char *aname;
  uint64_t clntid;
};
#define TATTACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tattach__descriptor) \
    , 0, 0, 0,NULL, (char *)protobuf_c_empty_string, 0 }


struct  _Rattach
{
  ProtobufCMessage base;
  TqidProto *qid;
};
#define RATTACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rattach__descriptor) \
    , NULL }


struct  _Rerror
{
  ProtobufCMessage base;
  uint32_t errcode;
  char *obj;
  char *err;
};
#define RERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rerror__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Twalk
{
  ProtobufCMessage base;
  uint32_t fid;
  uint32_t newfid;
  size_t n_wnames;
  char **wnames;
};
#define TWALK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&twalk__descriptor) \
    , 0, 0, 0,NULL }


struct  _Rwalk
{
  ProtobufCMessage base;
  size_t n_qids;
  TqidProto **qids;
};
#define RWALK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rwalk__descriptor) \
    , 0,NULL }


struct  _Topen
{
  ProtobufCMessage base;
  uint32_t fid;
  uint32_t mode;
};
#define TOPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&topen__descriptor) \
    , 0, 0 }


struct  _Ropen
{
  ProtobufCMessage base;
  TqidProto *qid;
  uint32_t iounit;
};
#define ROPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ropen__descriptor) \
    , NULL, 0 }


struct  _Tcreate
{
  ProtobufCMessage base;
  uint32_t fid;
  char *name;
  uint32_t perm;
  uint32_t mode;
  uint64_t lease;
  TfenceProto *fence;
};
#define TCREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tcreate__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, NULL }


struct  _Rcreate
{
  ProtobufCMessage base;
  TqidProto *qid;
  uint32_t iounit;
};
#define RCREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rcreate__descriptor) \
    , NULL, 0 }


struct  _TreadF
{
  ProtobufCMessage base;
  uint32_t fid;
  uint64_t offset;
  uint32_t count;
  TfenceProto *fence;
};
#define TREAD_F__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tread_f__descriptor) \
    , 0, 0, 0, NULL }


struct  _Rread
{
  ProtobufCMessage base;
  uint32_t count;
};
#define RREAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rread__descriptor) \
    , 0 }


struct  _TwriteF
{
  ProtobufCMessage base;
  uint32_t fid;
  uint64_t offset;
  TfenceProto *fence;
};
#define TWRITE_F__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&twrite_f__descriptor) \
    , 0, 0, NULL }


struct  _Rwrite
{
  ProtobufCMessage base;
  uint32_t count;
};
#define RWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rwrite__descriptor) \
    , 0 }


struct  _Tclunk
{
  ProtobufCMessage base;
  uint32_t fid;
};
#define TCLUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tclunk__descriptor) \
    , 0 }


struct  _Rclunk
{
  ProtobufCMessage base;
};
#define RCLUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rclunk__descriptor) \
     }


struct  _Tremove
{
  ProtobufCMessage base;
  uint32_t fid;
  TfenceProto *fence;
};
#define TREMOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tremove__descriptor) \
    , 0, NULL }


struct  _Rremove
{
  ProtobufCMessage base;
};
#define RREMOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rremove__descriptor) \
     }


struct  _Trstat
{
  ProtobufCMessage base;
  uint32_t fid;
};
#define TRSTAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trstat__descriptor) \
    , 0 }


struct  _Rrstat
{
  ProtobufCMessage base;
  TstatProto *stat;
};
#define RRSTAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrstat__descriptor) \
    , NULL }


struct  _Twstat
{
  ProtobufCMessage base;
  uint32_t fid;
  TstatProto *stat;
  TfenceProto *fence;
};
#define TWSTAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&twstat__descriptor) \
    , 0, NULL, NULL }


struct  _Rwstat
{
  ProtobufCMessage base;
};
#define RWSTAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rwstat__descriptor) \
     }


struct  _Twatch
{
  ProtobufCMessage base;
  uint32_t dirfid;
  uint32_t watchfid;
};
#define TWATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&twatch__descriptor) \
    , 0, 0 }


struct  _Rwatch
{
  ProtobufCMessage base;
};
#define RWATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rwatch__descriptor) \
     }


struct  _Trenameat
{
  ProtobufCMessage base;
  uint32_t oldfid;
  char *oldname;
  uint32_t newfid;
  char *newname;
  TfenceProto *fence;
};
#define TRENAMEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trenameat__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL }


struct  _Rrenameat
{
  ProtobufCMessage base;
};
#define RRENAMEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rrenameat__descriptor) \
     }


struct  _Tgetfile
{
  ProtobufCMessage base;
  uint32_t fid;
  uint32_t mode;
  uint64_t offset;
  uint32_t count;
  size_t n_wnames;
  char **wnames;
  protobuf_c_boolean resolve;
  TfenceProto *fence;
};
#define TGETFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tgetfile__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, NULL }


struct  _Tputfile
{
  ProtobufCMessage base;
  uint32_t fid;
  uint32_t mode;
  uint32_t perm;
  uint64_t offset;
  size_t n_wnames;
  char **wnames;
  protobuf_c_boolean resolve;
  uint64_t lease;
  TfenceProto *fence;
};
#define TPUTFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tputfile__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0, NULL }


struct  _Tdetach
{
  ProtobufCMessage base;
  uint64_t clntid;
};
#define TDETACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tdetach__descriptor) \
    , 0 }


struct  _Rdetach
{
  ProtobufCMessage base;
};
#define RDETACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rdetach__descriptor) \
     }


struct  _Theartbeat__SidsEntry
{
  ProtobufCMessage base;
  uint64_t key;
  protobuf_c_boolean value;
};
#define THEARTBEAT__SIDS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&theartbeat__sids_entry__descriptor) \
    , 0, 0 }


struct  _Theartbeat
{
  ProtobufCMessage base;
  protobuf_c_boolean serverside;
  size_t n_sids;
  Theartbeat__SidsEntry **sids;
};
#define THEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&theartbeat__descriptor) \
    , 0, 0,NULL }


struct  _Rheartbeat__SidsEntry
{
  ProtobufCMessage base;
  uint64_t key;
  protobuf_c_boolean value;
};
#define RHEARTBEAT__SIDS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rheartbeat__sids_entry__descriptor) \
    , 0, 0 }


struct  _Rheartbeat
{
  ProtobufCMessage base;
  size_t n_sids;
  Rheartbeat__SidsEntry **sids;
};
#define RHEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rheartbeat__descriptor) \
    , 0,NULL }


struct  _Tremovefile
{
  ProtobufCMessage base;
  uint32_t fid;
  size_t n_wnames;
  char **wnames;
  protobuf_c_boolean resolve;
  TfenceProto *fence;
};
#define TREMOVEFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tremovefile__descriptor) \
    , 0, 0,NULL, 0, NULL }


struct  _Twriteread
{
  ProtobufCMessage base;
  uint32_t fid;
};
#define TWRITEREAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&twriteread__descriptor) \
    , 0 }


/* TqidProto methods */
void   tqid_proto__init
                     (TqidProto         *message);
size_t tqid_proto__get_packed_size
                     (const TqidProto   *message);
size_t tqid_proto__pack
                     (const TqidProto   *message,
                      uint8_t             *out);
size_t tqid_proto__pack_to_buffer
                     (const TqidProto   *message,
                      ProtobufCBuffer     *buffer);
TqidProto *
       tqid_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tqid_proto__free_unpacked
                     (TqidProto *message,
                      ProtobufCAllocator *allocator);
/* Tprincipal methods */
void   tprincipal__init
                     (Tprincipal         *message);
size_t tprincipal__get_packed_size
                     (const Tprincipal   *message);
size_t tprincipal__pack
                     (const Tprincipal   *message,
                      uint8_t             *out);
size_t tprincipal__pack_to_buffer
                     (const Tprincipal   *message,
                      ProtobufCBuffer     *buffer);
Tprincipal *
       tprincipal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tprincipal__free_unpacked
                     (Tprincipal *message,
                      ProtobufCAllocator *allocator);
/* TstatProto methods */
void   tstat_proto__init
                     (TstatProto         *message);
size_t tstat_proto__get_packed_size
                     (const TstatProto   *message);
size_t tstat_proto__pack
                     (const TstatProto   *message,
                      uint8_t             *out);
size_t tstat_proto__pack_to_buffer
                     (const TstatProto   *message,
                      ProtobufCBuffer     *buffer);
TstatProto *
       tstat_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tstat_proto__free_unpacked
                     (TstatProto *message,
                      ProtobufCAllocator *allocator);
/* Taddr methods */
void   taddr__init
                     (Taddr         *message);
size_t taddr__get_packed_size
                     (const Taddr   *message);
size_t taddr__pack
                     (const Taddr   *message,
                      uint8_t             *out);
size_t taddr__pack_to_buffer
                     (const Taddr   *message,
                      ProtobufCBuffer     *buffer);
Taddr *
       taddr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   taddr__free_unpacked
                     (Taddr *message,
                      ProtobufCAllocator *allocator);
/* SecretProto methods */
void   secret_proto__init
                     (SecretProto         *message);
size_t secret_proto__get_packed_size
                     (const SecretProto   *message);
size_t secret_proto__pack
                     (const SecretProto   *message,
                      uint8_t             *out);
size_t secret_proto__pack_to_buffer
                     (const SecretProto   *message,
                      ProtobufCBuffer     *buffer);
SecretProto *
       secret_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   secret_proto__free_unpacked
                     (SecretProto *message,
                      ProtobufCAllocator *allocator);
/* TendpointProto methods */
void   tendpoint_proto__init
                     (TendpointProto         *message);
size_t tendpoint_proto__get_packed_size
                     (const TendpointProto   *message);
size_t tendpoint_proto__pack
                     (const TendpointProto   *message,
                      uint8_t             *out);
size_t tendpoint_proto__pack_to_buffer
                     (const TendpointProto   *message,
                      ProtobufCBuffer     *buffer);
TendpointProto *
       tendpoint_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tendpoint_proto__free_unpacked
                     (TendpointProto *message,
                      ProtobufCAllocator *allocator);
/* TfenceProto methods */
void   tfence_proto__init
                     (TfenceProto         *message);
size_t tfence_proto__get_packed_size
                     (const TfenceProto   *message);
size_t tfence_proto__pack
                     (const TfenceProto   *message,
                      uint8_t             *out);
size_t tfence_proto__pack_to_buffer
                     (const TfenceProto   *message,
                      ProtobufCBuffer     *buffer);
TfenceProto *
       tfence_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tfence_proto__free_unpacked
                     (TfenceProto *message,
                      ProtobufCAllocator *allocator);
/* Tversion methods */
void   tversion__init
                     (Tversion         *message);
size_t tversion__get_packed_size
                     (const Tversion   *message);
size_t tversion__pack
                     (const Tversion   *message,
                      uint8_t             *out);
size_t tversion__pack_to_buffer
                     (const Tversion   *message,
                      ProtobufCBuffer     *buffer);
Tversion *
       tversion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tversion__free_unpacked
                     (Tversion *message,
                      ProtobufCAllocator *allocator);
/* Rversion methods */
void   rversion__init
                     (Rversion         *message);
size_t rversion__get_packed_size
                     (const Rversion   *message);
size_t rversion__pack
                     (const Rversion   *message,
                      uint8_t             *out);
size_t rversion__pack_to_buffer
                     (const Rversion   *message,
                      ProtobufCBuffer     *buffer);
Rversion *
       rversion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rversion__free_unpacked
                     (Rversion *message,
                      ProtobufCAllocator *allocator);
/* Tauth methods */
void   tauth__init
                     (Tauth         *message);
size_t tauth__get_packed_size
                     (const Tauth   *message);
size_t tauth__pack
                     (const Tauth   *message,
                      uint8_t             *out);
size_t tauth__pack_to_buffer
                     (const Tauth   *message,
                      ProtobufCBuffer     *buffer);
Tauth *
       tauth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tauth__free_unpacked
                     (Tauth *message,
                      ProtobufCAllocator *allocator);
/* Rauth methods */
void   rauth__init
                     (Rauth         *message);
size_t rauth__get_packed_size
                     (const Rauth   *message);
size_t rauth__pack
                     (const Rauth   *message,
                      uint8_t             *out);
size_t rauth__pack_to_buffer
                     (const Rauth   *message,
                      ProtobufCBuffer     *buffer);
Rauth *
       rauth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rauth__free_unpacked
                     (Rauth *message,
                      ProtobufCAllocator *allocator);
/* Tattach__SecretsEntry methods */
void   tattach__secrets_entry__init
                     (Tattach__SecretsEntry         *message);
/* Tattach methods */
void   tattach__init
                     (Tattach         *message);
size_t tattach__get_packed_size
                     (const Tattach   *message);
size_t tattach__pack
                     (const Tattach   *message,
                      uint8_t             *out);
size_t tattach__pack_to_buffer
                     (const Tattach   *message,
                      ProtobufCBuffer     *buffer);
Tattach *
       tattach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tattach__free_unpacked
                     (Tattach *message,
                      ProtobufCAllocator *allocator);
/* Rattach methods */
void   rattach__init
                     (Rattach         *message);
size_t rattach__get_packed_size
                     (const Rattach   *message);
size_t rattach__pack
                     (const Rattach   *message,
                      uint8_t             *out);
size_t rattach__pack_to_buffer
                     (const Rattach   *message,
                      ProtobufCBuffer     *buffer);
Rattach *
       rattach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rattach__free_unpacked
                     (Rattach *message,
                      ProtobufCAllocator *allocator);
/* Rerror methods */
void   rerror__init
                     (Rerror         *message);
size_t rerror__get_packed_size
                     (const Rerror   *message);
size_t rerror__pack
                     (const Rerror   *message,
                      uint8_t             *out);
size_t rerror__pack_to_buffer
                     (const Rerror   *message,
                      ProtobufCBuffer     *buffer);
Rerror *
       rerror__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rerror__free_unpacked
                     (Rerror *message,
                      ProtobufCAllocator *allocator);
/* Twalk methods */
void   twalk__init
                     (Twalk         *message);
size_t twalk__get_packed_size
                     (const Twalk   *message);
size_t twalk__pack
                     (const Twalk   *message,
                      uint8_t             *out);
size_t twalk__pack_to_buffer
                     (const Twalk   *message,
                      ProtobufCBuffer     *buffer);
Twalk *
       twalk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   twalk__free_unpacked
                     (Twalk *message,
                      ProtobufCAllocator *allocator);
/* Rwalk methods */
void   rwalk__init
                     (Rwalk         *message);
size_t rwalk__get_packed_size
                     (const Rwalk   *message);
size_t rwalk__pack
                     (const Rwalk   *message,
                      uint8_t             *out);
size_t rwalk__pack_to_buffer
                     (const Rwalk   *message,
                      ProtobufCBuffer     *buffer);
Rwalk *
       rwalk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rwalk__free_unpacked
                     (Rwalk *message,
                      ProtobufCAllocator *allocator);
/* Topen methods */
void   topen__init
                     (Topen         *message);
size_t topen__get_packed_size
                     (const Topen   *message);
size_t topen__pack
                     (const Topen   *message,
                      uint8_t             *out);
size_t topen__pack_to_buffer
                     (const Topen   *message,
                      ProtobufCBuffer     *buffer);
Topen *
       topen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   topen__free_unpacked
                     (Topen *message,
                      ProtobufCAllocator *allocator);
/* Ropen methods */
void   ropen__init
                     (Ropen         *message);
size_t ropen__get_packed_size
                     (const Ropen   *message);
size_t ropen__pack
                     (const Ropen   *message,
                      uint8_t             *out);
size_t ropen__pack_to_buffer
                     (const Ropen   *message,
                      ProtobufCBuffer     *buffer);
Ropen *
       ropen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ropen__free_unpacked
                     (Ropen *message,
                      ProtobufCAllocator *allocator);
/* Tcreate methods */
void   tcreate__init
                     (Tcreate         *message);
size_t tcreate__get_packed_size
                     (const Tcreate   *message);
size_t tcreate__pack
                     (const Tcreate   *message,
                      uint8_t             *out);
size_t tcreate__pack_to_buffer
                     (const Tcreate   *message,
                      ProtobufCBuffer     *buffer);
Tcreate *
       tcreate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tcreate__free_unpacked
                     (Tcreate *message,
                      ProtobufCAllocator *allocator);
/* Rcreate methods */
void   rcreate__init
                     (Rcreate         *message);
size_t rcreate__get_packed_size
                     (const Rcreate   *message);
size_t rcreate__pack
                     (const Rcreate   *message,
                      uint8_t             *out);
size_t rcreate__pack_to_buffer
                     (const Rcreate   *message,
                      ProtobufCBuffer     *buffer);
Rcreate *
       rcreate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rcreate__free_unpacked
                     (Rcreate *message,
                      ProtobufCAllocator *allocator);
/* TreadF methods */
void   tread_f__init
                     (TreadF         *message);
size_t tread_f__get_packed_size
                     (const TreadF   *message);
size_t tread_f__pack
                     (const TreadF   *message,
                      uint8_t             *out);
size_t tread_f__pack_to_buffer
                     (const TreadF   *message,
                      ProtobufCBuffer     *buffer);
TreadF *
       tread_f__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tread_f__free_unpacked
                     (TreadF *message,
                      ProtobufCAllocator *allocator);
/* Rread methods */
void   rread__init
                     (Rread         *message);
size_t rread__get_packed_size
                     (const Rread   *message);
size_t rread__pack
                     (const Rread   *message,
                      uint8_t             *out);
size_t rread__pack_to_buffer
                     (const Rread   *message,
                      ProtobufCBuffer     *buffer);
Rread *
       rread__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rread__free_unpacked
                     (Rread *message,
                      ProtobufCAllocator *allocator);
/* TwriteF methods */
void   twrite_f__init
                     (TwriteF         *message);
size_t twrite_f__get_packed_size
                     (const TwriteF   *message);
size_t twrite_f__pack
                     (const TwriteF   *message,
                      uint8_t             *out);
size_t twrite_f__pack_to_buffer
                     (const TwriteF   *message,
                      ProtobufCBuffer     *buffer);
TwriteF *
       twrite_f__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   twrite_f__free_unpacked
                     (TwriteF *message,
                      ProtobufCAllocator *allocator);
/* Rwrite methods */
void   rwrite__init
                     (Rwrite         *message);
size_t rwrite__get_packed_size
                     (const Rwrite   *message);
size_t rwrite__pack
                     (const Rwrite   *message,
                      uint8_t             *out);
size_t rwrite__pack_to_buffer
                     (const Rwrite   *message,
                      ProtobufCBuffer     *buffer);
Rwrite *
       rwrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rwrite__free_unpacked
                     (Rwrite *message,
                      ProtobufCAllocator *allocator);
/* Tclunk methods */
void   tclunk__init
                     (Tclunk         *message);
size_t tclunk__get_packed_size
                     (const Tclunk   *message);
size_t tclunk__pack
                     (const Tclunk   *message,
                      uint8_t             *out);
size_t tclunk__pack_to_buffer
                     (const Tclunk   *message,
                      ProtobufCBuffer     *buffer);
Tclunk *
       tclunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tclunk__free_unpacked
                     (Tclunk *message,
                      ProtobufCAllocator *allocator);
/* Rclunk methods */
void   rclunk__init
                     (Rclunk         *message);
size_t rclunk__get_packed_size
                     (const Rclunk   *message);
size_t rclunk__pack
                     (const Rclunk   *message,
                      uint8_t             *out);
size_t rclunk__pack_to_buffer
                     (const Rclunk   *message,
                      ProtobufCBuffer     *buffer);
Rclunk *
       rclunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rclunk__free_unpacked
                     (Rclunk *message,
                      ProtobufCAllocator *allocator);
/* Tremove methods */
void   tremove__init
                     (Tremove         *message);
size_t tremove__get_packed_size
                     (const Tremove   *message);
size_t tremove__pack
                     (const Tremove   *message,
                      uint8_t             *out);
size_t tremove__pack_to_buffer
                     (const Tremove   *message,
                      ProtobufCBuffer     *buffer);
Tremove *
       tremove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tremove__free_unpacked
                     (Tremove *message,
                      ProtobufCAllocator *allocator);
/* Rremove methods */
void   rremove__init
                     (Rremove         *message);
size_t rremove__get_packed_size
                     (const Rremove   *message);
size_t rremove__pack
                     (const Rremove   *message,
                      uint8_t             *out);
size_t rremove__pack_to_buffer
                     (const Rremove   *message,
                      ProtobufCBuffer     *buffer);
Rremove *
       rremove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rremove__free_unpacked
                     (Rremove *message,
                      ProtobufCAllocator *allocator);
/* Trstat methods */
void   trstat__init
                     (Trstat         *message);
size_t trstat__get_packed_size
                     (const Trstat   *message);
size_t trstat__pack
                     (const Trstat   *message,
                      uint8_t             *out);
size_t trstat__pack_to_buffer
                     (const Trstat   *message,
                      ProtobufCBuffer     *buffer);
Trstat *
       trstat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trstat__free_unpacked
                     (Trstat *message,
                      ProtobufCAllocator *allocator);
/* Rrstat methods */
void   rrstat__init
                     (Rrstat         *message);
size_t rrstat__get_packed_size
                     (const Rrstat   *message);
size_t rrstat__pack
                     (const Rrstat   *message,
                      uint8_t             *out);
size_t rrstat__pack_to_buffer
                     (const Rrstat   *message,
                      ProtobufCBuffer     *buffer);
Rrstat *
       rrstat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrstat__free_unpacked
                     (Rrstat *message,
                      ProtobufCAllocator *allocator);
/* Twstat methods */
void   twstat__init
                     (Twstat         *message);
size_t twstat__get_packed_size
                     (const Twstat   *message);
size_t twstat__pack
                     (const Twstat   *message,
                      uint8_t             *out);
size_t twstat__pack_to_buffer
                     (const Twstat   *message,
                      ProtobufCBuffer     *buffer);
Twstat *
       twstat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   twstat__free_unpacked
                     (Twstat *message,
                      ProtobufCAllocator *allocator);
/* Rwstat methods */
void   rwstat__init
                     (Rwstat         *message);
size_t rwstat__get_packed_size
                     (const Rwstat   *message);
size_t rwstat__pack
                     (const Rwstat   *message,
                      uint8_t             *out);
size_t rwstat__pack_to_buffer
                     (const Rwstat   *message,
                      ProtobufCBuffer     *buffer);
Rwstat *
       rwstat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rwstat__free_unpacked
                     (Rwstat *message,
                      ProtobufCAllocator *allocator);
/* Twatch methods */
void   twatch__init
                     (Twatch         *message);
size_t twatch__get_packed_size
                     (const Twatch   *message);
size_t twatch__pack
                     (const Twatch   *message,
                      uint8_t             *out);
size_t twatch__pack_to_buffer
                     (const Twatch   *message,
                      ProtobufCBuffer     *buffer);
Twatch *
       twatch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   twatch__free_unpacked
                     (Twatch *message,
                      ProtobufCAllocator *allocator);
/* Rwatch methods */
void   rwatch__init
                     (Rwatch         *message);
size_t rwatch__get_packed_size
                     (const Rwatch   *message);
size_t rwatch__pack
                     (const Rwatch   *message,
                      uint8_t             *out);
size_t rwatch__pack_to_buffer
                     (const Rwatch   *message,
                      ProtobufCBuffer     *buffer);
Rwatch *
       rwatch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rwatch__free_unpacked
                     (Rwatch *message,
                      ProtobufCAllocator *allocator);
/* Trenameat methods */
void   trenameat__init
                     (Trenameat         *message);
size_t trenameat__get_packed_size
                     (const Trenameat   *message);
size_t trenameat__pack
                     (const Trenameat   *message,
                      uint8_t             *out);
size_t trenameat__pack_to_buffer
                     (const Trenameat   *message,
                      ProtobufCBuffer     *buffer);
Trenameat *
       trenameat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trenameat__free_unpacked
                     (Trenameat *message,
                      ProtobufCAllocator *allocator);
/* Rrenameat methods */
void   rrenameat__init
                     (Rrenameat         *message);
size_t rrenameat__get_packed_size
                     (const Rrenameat   *message);
size_t rrenameat__pack
                     (const Rrenameat   *message,
                      uint8_t             *out);
size_t rrenameat__pack_to_buffer
                     (const Rrenameat   *message,
                      ProtobufCBuffer     *buffer);
Rrenameat *
       rrenameat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rrenameat__free_unpacked
                     (Rrenameat *message,
                      ProtobufCAllocator *allocator);
/* Tgetfile methods */
void   tgetfile__init
                     (Tgetfile         *message);
size_t tgetfile__get_packed_size
                     (const Tgetfile   *message);
size_t tgetfile__pack
                     (const Tgetfile   *message,
                      uint8_t             *out);
size_t tgetfile__pack_to_buffer
                     (const Tgetfile   *message,
                      ProtobufCBuffer     *buffer);
Tgetfile *
       tgetfile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tgetfile__free_unpacked
                     (Tgetfile *message,
                      ProtobufCAllocator *allocator);
/* Tputfile methods */
void   tputfile__init
                     (Tputfile         *message);
size_t tputfile__get_packed_size
                     (const Tputfile   *message);
size_t tputfile__pack
                     (const Tputfile   *message,
                      uint8_t             *out);
size_t tputfile__pack_to_buffer
                     (const Tputfile   *message,
                      ProtobufCBuffer     *buffer);
Tputfile *
       tputfile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tputfile__free_unpacked
                     (Tputfile *message,
                      ProtobufCAllocator *allocator);
/* Tdetach methods */
void   tdetach__init
                     (Tdetach         *message);
size_t tdetach__get_packed_size
                     (const Tdetach   *message);
size_t tdetach__pack
                     (const Tdetach   *message,
                      uint8_t             *out);
size_t tdetach__pack_to_buffer
                     (const Tdetach   *message,
                      ProtobufCBuffer     *buffer);
Tdetach *
       tdetach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tdetach__free_unpacked
                     (Tdetach *message,
                      ProtobufCAllocator *allocator);
/* Rdetach methods */
void   rdetach__init
                     (Rdetach         *message);
size_t rdetach__get_packed_size
                     (const Rdetach   *message);
size_t rdetach__pack
                     (const Rdetach   *message,
                      uint8_t             *out);
size_t rdetach__pack_to_buffer
                     (const Rdetach   *message,
                      ProtobufCBuffer     *buffer);
Rdetach *
       rdetach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rdetach__free_unpacked
                     (Rdetach *message,
                      ProtobufCAllocator *allocator);
/* Theartbeat__SidsEntry methods */
void   theartbeat__sids_entry__init
                     (Theartbeat__SidsEntry         *message);
/* Theartbeat methods */
void   theartbeat__init
                     (Theartbeat         *message);
size_t theartbeat__get_packed_size
                     (const Theartbeat   *message);
size_t theartbeat__pack
                     (const Theartbeat   *message,
                      uint8_t             *out);
size_t theartbeat__pack_to_buffer
                     (const Theartbeat   *message,
                      ProtobufCBuffer     *buffer);
Theartbeat *
       theartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   theartbeat__free_unpacked
                     (Theartbeat *message,
                      ProtobufCAllocator *allocator);
/* Rheartbeat__SidsEntry methods */
void   rheartbeat__sids_entry__init
                     (Rheartbeat__SidsEntry         *message);
/* Rheartbeat methods */
void   rheartbeat__init
                     (Rheartbeat         *message);
size_t rheartbeat__get_packed_size
                     (const Rheartbeat   *message);
size_t rheartbeat__pack
                     (const Rheartbeat   *message,
                      uint8_t             *out);
size_t rheartbeat__pack_to_buffer
                     (const Rheartbeat   *message,
                      ProtobufCBuffer     *buffer);
Rheartbeat *
       rheartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rheartbeat__free_unpacked
                     (Rheartbeat *message,
                      ProtobufCAllocator *allocator);
/* Tremovefile methods */
void   tremovefile__init
                     (Tremovefile         *message);
size_t tremovefile__get_packed_size
                     (const Tremovefile   *message);
size_t tremovefile__pack
                     (const Tremovefile   *message,
                      uint8_t             *out);
size_t tremovefile__pack_to_buffer
                     (const Tremovefile   *message,
                      ProtobufCBuffer     *buffer);
Tremovefile *
       tremovefile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tremovefile__free_unpacked
                     (Tremovefile *message,
                      ProtobufCAllocator *allocator);
/* Twriteread methods */
void   twriteread__init
                     (Twriteread         *message);
size_t twriteread__get_packed_size
                     (const Twriteread   *message);
size_t twriteread__pack
                     (const Twriteread   *message,
                      uint8_t             *out);
size_t twriteread__pack_to_buffer
                     (const Twriteread   *message,
                      ProtobufCBuffer     *buffer);
Twriteread *
       twriteread__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   twriteread__free_unpacked
                     (Twriteread *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TqidProto_Closure)
                 (const TqidProto *message,
                  void *closure_data);
typedef void (*Tprincipal_Closure)
                 (const Tprincipal *message,
                  void *closure_data);
typedef void (*TstatProto_Closure)
                 (const TstatProto *message,
                  void *closure_data);
typedef void (*Taddr_Closure)
                 (const Taddr *message,
                  void *closure_data);
typedef void (*SecretProto_Closure)
                 (const SecretProto *message,
                  void *closure_data);
typedef void (*TendpointProto_Closure)
                 (const TendpointProto *message,
                  void *closure_data);
typedef void (*TfenceProto_Closure)
                 (const TfenceProto *message,
                  void *closure_data);
typedef void (*Tversion_Closure)
                 (const Tversion *message,
                  void *closure_data);
typedef void (*Rversion_Closure)
                 (const Rversion *message,
                  void *closure_data);
typedef void (*Tauth_Closure)
                 (const Tauth *message,
                  void *closure_data);
typedef void (*Rauth_Closure)
                 (const Rauth *message,
                  void *closure_data);
typedef void (*Tattach__SecretsEntry_Closure)
                 (const Tattach__SecretsEntry *message,
                  void *closure_data);
typedef void (*Tattach_Closure)
                 (const Tattach *message,
                  void *closure_data);
typedef void (*Rattach_Closure)
                 (const Rattach *message,
                  void *closure_data);
typedef void (*Rerror_Closure)
                 (const Rerror *message,
                  void *closure_data);
typedef void (*Twalk_Closure)
                 (const Twalk *message,
                  void *closure_data);
typedef void (*Rwalk_Closure)
                 (const Rwalk *message,
                  void *closure_data);
typedef void (*Topen_Closure)
                 (const Topen *message,
                  void *closure_data);
typedef void (*Ropen_Closure)
                 (const Ropen *message,
                  void *closure_data);
typedef void (*Tcreate_Closure)
                 (const Tcreate *message,
                  void *closure_data);
typedef void (*Rcreate_Closure)
                 (const Rcreate *message,
                  void *closure_data);
typedef void (*TreadF_Closure)
                 (const TreadF *message,
                  void *closure_data);
typedef void (*Rread_Closure)
                 (const Rread *message,
                  void *closure_data);
typedef void (*TwriteF_Closure)
                 (const TwriteF *message,
                  void *closure_data);
typedef void (*Rwrite_Closure)
                 (const Rwrite *message,
                  void *closure_data);
typedef void (*Tclunk_Closure)
                 (const Tclunk *message,
                  void *closure_data);
typedef void (*Rclunk_Closure)
                 (const Rclunk *message,
                  void *closure_data);
typedef void (*Tremove_Closure)
                 (const Tremove *message,
                  void *closure_data);
typedef void (*Rremove_Closure)
                 (const Rremove *message,
                  void *closure_data);
typedef void (*Trstat_Closure)
                 (const Trstat *message,
                  void *closure_data);
typedef void (*Rrstat_Closure)
                 (const Rrstat *message,
                  void *closure_data);
typedef void (*Twstat_Closure)
                 (const Twstat *message,
                  void *closure_data);
typedef void (*Rwstat_Closure)
                 (const Rwstat *message,
                  void *closure_data);
typedef void (*Twatch_Closure)
                 (const Twatch *message,
                  void *closure_data);
typedef void (*Rwatch_Closure)
                 (const Rwatch *message,
                  void *closure_data);
typedef void (*Trenameat_Closure)
                 (const Trenameat *message,
                  void *closure_data);
typedef void (*Rrenameat_Closure)
                 (const Rrenameat *message,
                  void *closure_data);
typedef void (*Tgetfile_Closure)
                 (const Tgetfile *message,
                  void *closure_data);
typedef void (*Tputfile_Closure)
                 (const Tputfile *message,
                  void *closure_data);
typedef void (*Tdetach_Closure)
                 (const Tdetach *message,
                  void *closure_data);
typedef void (*Rdetach_Closure)
                 (const Rdetach *message,
                  void *closure_data);
typedef void (*Theartbeat__SidsEntry_Closure)
                 (const Theartbeat__SidsEntry *message,
                  void *closure_data);
typedef void (*Theartbeat_Closure)
                 (const Theartbeat *message,
                  void *closure_data);
typedef void (*Rheartbeat__SidsEntry_Closure)
                 (const Rheartbeat__SidsEntry *message,
                  void *closure_data);
typedef void (*Rheartbeat_Closure)
                 (const Rheartbeat *message,
                  void *closure_data);
typedef void (*Tremovefile_Closure)
                 (const Tremovefile *message,
                  void *closure_data);
typedef void (*Twriteread_Closure)
                 (const Twriteread *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tqid_proto__descriptor;
extern const ProtobufCMessageDescriptor tprincipal__descriptor;
extern const ProtobufCMessageDescriptor tstat_proto__descriptor;
extern const ProtobufCMessageDescriptor taddr__descriptor;
extern const ProtobufCMessageDescriptor secret_proto__descriptor;
extern const ProtobufCMessageDescriptor tendpoint_proto__descriptor;
extern const ProtobufCMessageDescriptor tfence_proto__descriptor;
extern const ProtobufCMessageDescriptor tversion__descriptor;
extern const ProtobufCMessageDescriptor rversion__descriptor;
extern const ProtobufCMessageDescriptor tauth__descriptor;
extern const ProtobufCMessageDescriptor rauth__descriptor;
extern const ProtobufCMessageDescriptor tattach__descriptor;
extern const ProtobufCMessageDescriptor tattach__secrets_entry__descriptor;
extern const ProtobufCMessageDescriptor rattach__descriptor;
extern const ProtobufCMessageDescriptor rerror__descriptor;
extern const ProtobufCMessageDescriptor twalk__descriptor;
extern const ProtobufCMessageDescriptor rwalk__descriptor;
extern const ProtobufCMessageDescriptor topen__descriptor;
extern const ProtobufCMessageDescriptor ropen__descriptor;
extern const ProtobufCMessageDescriptor tcreate__descriptor;
extern const ProtobufCMessageDescriptor rcreate__descriptor;
extern const ProtobufCMessageDescriptor tread_f__descriptor;
extern const ProtobufCMessageDescriptor rread__descriptor;
extern const ProtobufCMessageDescriptor twrite_f__descriptor;
extern const ProtobufCMessageDescriptor rwrite__descriptor;
extern const ProtobufCMessageDescriptor tclunk__descriptor;
extern const ProtobufCMessageDescriptor rclunk__descriptor;
extern const ProtobufCMessageDescriptor tremove__descriptor;
extern const ProtobufCMessageDescriptor rremove__descriptor;
extern const ProtobufCMessageDescriptor trstat__descriptor;
extern const ProtobufCMessageDescriptor rrstat__descriptor;
extern const ProtobufCMessageDescriptor twstat__descriptor;
extern const ProtobufCMessageDescriptor rwstat__descriptor;
extern const ProtobufCMessageDescriptor twatch__descriptor;
extern const ProtobufCMessageDescriptor rwatch__descriptor;
extern const ProtobufCMessageDescriptor trenameat__descriptor;
extern const ProtobufCMessageDescriptor rrenameat__descriptor;
extern const ProtobufCMessageDescriptor tgetfile__descriptor;
extern const ProtobufCMessageDescriptor tputfile__descriptor;
extern const ProtobufCMessageDescriptor tdetach__descriptor;
extern const ProtobufCMessageDescriptor rdetach__descriptor;
extern const ProtobufCMessageDescriptor theartbeat__descriptor;
extern const ProtobufCMessageDescriptor theartbeat__sids_entry__descriptor;
extern const ProtobufCMessageDescriptor rheartbeat__descriptor;
extern const ProtobufCMessageDescriptor rheartbeat__sids_entry__descriptor;
extern const ProtobufCMessageDescriptor tremovefile__descriptor;
extern const ProtobufCMessageDescriptor twriteread__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_pylib_2fproto_2fsigmap_2eproto__INCLUDED */
