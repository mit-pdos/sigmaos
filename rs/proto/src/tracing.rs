// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tracing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:SpanContextConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SpanContextConfig {
    // message fields
    // @@protoc_insertion_point(field:SpanContextConfig.traceID)
    pub traceID: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:SpanContextConfig.spanID)
    pub spanID: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:SpanContextConfig.traceFlags)
    pub traceFlags: i32,
    // @@protoc_insertion_point(field:SpanContextConfig.traceState)
    pub traceState: ::std::string::String,
    // @@protoc_insertion_point(field:SpanContextConfig.remote)
    pub remote: bool,
    // special fields
    // @@protoc_insertion_point(special_field:SpanContextConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpanContextConfig {
    fn default() -> &'a SpanContextConfig {
        <SpanContextConfig as ::protobuf::Message>::default_instance()
    }
}

impl SpanContextConfig {
    pub fn new() -> SpanContextConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "traceID",
            |m: &SpanContextConfig| { &m.traceID },
            |m: &mut SpanContextConfig| { &mut m.traceID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spanID",
            |m: &SpanContextConfig| { &m.spanID },
            |m: &mut SpanContextConfig| { &mut m.spanID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "traceFlags",
            |m: &SpanContextConfig| { &m.traceFlags },
            |m: &mut SpanContextConfig| { &mut m.traceFlags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "traceState",
            |m: &SpanContextConfig| { &m.traceState },
            |m: &mut SpanContextConfig| { &mut m.traceState },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remote",
            |m: &SpanContextConfig| { &m.remote },
            |m: &mut SpanContextConfig| { &mut m.remote },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpanContextConfig>(
            "SpanContextConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpanContextConfig {
    const NAME: &'static str = "SpanContextConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.traceID = is.read_bytes()?;
                },
                18 => {
                    self.spanID = is.read_bytes()?;
                },
                24 => {
                    self.traceFlags = is.read_int32()?;
                },
                34 => {
                    self.traceState = is.read_string()?;
                },
                40 => {
                    self.remote = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.traceID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.traceID);
        }
        if !self.spanID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.spanID);
        }
        if self.traceFlags != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.traceFlags);
        }
        if !self.traceState.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.traceState);
        }
        if self.remote != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.traceID.is_empty() {
            os.write_bytes(1, &self.traceID)?;
        }
        if !self.spanID.is_empty() {
            os.write_bytes(2, &self.spanID)?;
        }
        if self.traceFlags != 0 {
            os.write_int32(3, self.traceFlags)?;
        }
        if !self.traceState.is_empty() {
            os.write_string(4, &self.traceState)?;
        }
        if self.remote != false {
            os.write_bool(5, self.remote)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpanContextConfig {
        SpanContextConfig::new()
    }

    fn clear(&mut self) {
        self.traceID.clear();
        self.spanID.clear();
        self.traceFlags = 0;
        self.traceState.clear();
        self.remote = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpanContextConfig {
        static instance: SpanContextConfig = SpanContextConfig {
            traceID: ::std::vec::Vec::new(),
            spanID: ::std::vec::Vec::new(),
            traceFlags: 0,
            traceState: ::std::string::String::new(),
            remote: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpanContextConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpanContextConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpanContextConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpanContextConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rtracing.proto\"\x9d\x01\n\x11SpanContextConfig\x12\x18\n\x07traceID\
    \x18\x01\x20\x01(\x0cR\x07traceID\x12\x16\n\x06spanID\x18\x02\x20\x01(\
    \x0cR\x06spanID\x12\x1e\n\ntraceFlags\x18\x03\x20\x01(\x05R\ntraceFlags\
    \x12\x1e\n\ntraceState\x18\x04\x20\x01(\tR\ntraceState\x12\x16\n\x06remo\
    te\x18\x05\x20\x01(\x08R\x06remoteB\x1cZ\x1asigmaos/util/tracing/protoJ\
    \xd2\x02\n\x06\x12\x04\0\0\n\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x08\x12\x03\x02\01\n\t\n\x02\x08\x0b\x12\x03\x02\01\n\n\n\x02\x04\0\
    \x12\x04\x04\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x19\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x02\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\
    \x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\t\x10\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x05\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\
    \x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x06\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x02\x18\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x07\t\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x16\x17\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x08\x02\x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\
    \x08\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\t\x13\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x08\x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \t\x02\x18\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\t\x02\x06\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\t\t\x0f\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \t\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SpanContextConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
