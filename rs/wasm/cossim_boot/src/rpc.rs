// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:Req)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Req {
    // message fields
    // @@protoc_insertion_point(field:Req.method)
    pub method: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Req.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Req {
    fn default() -> &'a Req {
        <Req as ::protobuf::Message>::default_instance()
    }
}

impl Req {
    pub fn new() -> Req {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &Req| { &m.method },
            |m: &mut Req| { &mut m.method },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Req>(
            "Req",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Req {
    const NAME: &'static str = "Req";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.method = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.method);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.method.is_empty() {
            os.write_string(1, &self.method)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Req {
        Req::new()
    }

    fn clear(&mut self) {
        self.method.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Req {
        static instance: Req = Req {
            method: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Req {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Req").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Req {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Rep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Rep {
    // message fields
    // @@protoc_insertion_point(field:Rep.err)
    pub err: ::protobuf::MessageField<super::sigmap::Rerror>,
    // special fields
    // @@protoc_insertion_point(special_field:Rep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Rep {
    fn default() -> &'a Rep {
        <Rep as ::protobuf::Message>::default_instance()
    }
}

impl Rep {
    pub fn new() -> Rep {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sigmap::Rerror>(
            "err",
            |m: &Rep| { &m.err },
            |m: &mut Rep| { &mut m.err },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Rep>(
            "Rep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Rep {
    const NAME: &'static str = "Rep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.err)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.err.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.err.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Rep {
        Rep::new()
    }

    fn clear(&mut self) {
        self.err.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Rep {
        static instance: Rep = Rep {
            err: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Rep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Rep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Rep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Users of rpc package can use Blob to pass data directly through to
///  the transport without the rpc package marshaling it.
// @@protoc_insertion_point(message:Blob)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Blob {
    // message fields
    // @@protoc_insertion_point(field:Blob.iov)
    pub iov: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:Blob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Blob {
    fn default() -> &'a Blob {
        <Blob as ::protobuf::Message>::default_instance()
    }
}

impl Blob {
    pub fn new() -> Blob {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "iov",
            |m: &Blob| { &m.iov },
            |m: &mut Blob| { &mut m.iov },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Blob>(
            "Blob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Blob {
    const NAME: &'static str = "Blob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.iov.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.iov {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.iov {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Blob {
        Blob::new()
    }

    fn clear(&mut self) {
        self.iov.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Blob {
        static instance: Blob = Blob {
            iov: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Blob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Blob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Blob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Blob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\trpc.proto\x1a\x13sigmap/sigmap.proto\"\x1d\n\x03Req\x12\x16\n\x06met\
    hod\x18\x01\x20\x01(\tR\x06method\"\x20\n\x03Rep\x12\x19\n\x03err\x18\
    \x01\x20\x01(\x0b2\x07.RerrorR\x03err\"\x18\n\x04Blob\x12\x10\n\x03iov\
    \x18\x01\x20\x03(\x0cR\x03iovB\x13Z\x11sigmaos/rpc/protoJ\xaa\x03\n\x06\
    \x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\
    \x03\x02\0\x1d\n\x08\n\x01\x08\x12\x03\x04\0(\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0(\n\n\n\x02\x04\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x06\x08\x0b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x08\x1a\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x07\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x07\x0f\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x18\x19\n\n\n\x02\
    \x04\x01\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x0b\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x08\x17\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x0b\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\x0f\
    \x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x15\x16\n\x86\x01\n\x02\
    \x04\x02\x12\x04\x10\0\x12\x01\x1az\x20Users\x20of\x20rpc\x20package\x20\
    can\x20use\x20Blob\x20to\x20pass\x20data\x20directly\x20through\x20to\n\
    \x20the\x20transport\x20without\x20the\x20rpc\x20package\x20marshaling\
    \x20it.\n\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x0c\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x11\x08\x1f\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x11\x08\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\x11\x16\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x11\x17\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x11\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::sigmap::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Req::generated_message_descriptor_data());
            messages.push(Rep::generated_message_descriptor_data());
            messages.push(Blob::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
