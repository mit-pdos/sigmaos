syntax = "proto3";

import "proc/proc.proto";

option go_package = "sigmaos/schedsrv/proto";

service Schedd {
  rpc ForceRun(ForceRunRequest) returns (ForceRunResponse);
  rpc WaitStart(WaitRequest) returns (WaitResponse);
  rpc Started(NotifyRequest) returns (NotifyResponse);
  rpc WaitExit(WaitRequest) returns (WaitResponse);
  rpc Exited(NotifyRequest) returns (NotifyResponse);
  rpc WaitEvict(WaitRequest) returns (WaitResponse);
  rpc Evict(NotifyRequest) returns (NotifyResponse);
  rpc GetCPUShares(GetCPUSharesRequest) returns (GetCPUSharesResponse);
  rpc GetRunningProcs(GetRunningProcsRequest) returns (GetRunningProcsResponse);
  rpc GetScheddStats(GetScheddStatsRequest) returns (GetScheddStatsResponse);
  rpc WarmCacheBin(WarmCacheBinRequest) returns (WarmCacheBinResponse);
}


message ForceRunRequest {
  ProcProto procProto = 1;
  bool memAccountedFor = 2;
}

message ForceRunResponse {
}

message WaitRequest {
  string pidStr = 1;
  ProcSeqno procSeqno = 2;
}

message WaitResponse {
  bytes status = 1;
}

message NotifyRequest {
  string pidStr = 1;
  bytes status = 2;
}

message NotifyResponse {
}

message GetCPUSharesRequest {
}

message GetCPUSharesResponse {
  map<string, int64> shares = 1;
}

message GetCPUUtilRequest {
  string realmStr = 1;
}

message GetCPUUtilResponse {
  double util = 1;
}

message GetRunningProcsRequest {
}

message GetRunningProcsResponse {
  repeated ProcProto procProtos = 1;
}

message WarmCacheBinRequest {
  string pidStr = 1;
  string realmStr = 2;
  string program = 3;
  repeated string SigmaPath = 4;
  int32 procType = 5;
}

message WarmCacheBinResponse {
  bool oK = 1;
}

message RealmStats {
  int64 running = 1;
  int64 totalRan = 2; 
}

message GetScheddStatsRequest {
}

message GetScheddStatsResponse {
  map<string, RealmStats> scheddStats = 1;
}
