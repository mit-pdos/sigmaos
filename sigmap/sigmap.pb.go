// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: sigmap/sigmap.proto

package sigmap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Qid is the server's unique identification for the file being
// accessed: two files on the same server hierarchy are the same if
// and only if their qids are the same.
type Tqid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Path    uint64 `protobuf:"varint,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Tqid) Reset() {
	*x = Tqid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tqid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tqid) ProtoMessage() {}

func (x *Tqid) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tqid.ProtoReflect.Descriptor instead.
func (*Tqid) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{0}
}

func (x *Tqid) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tqid) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Tqid) GetPath() uint64 {
	if x != nil {
		return x.Path
	}
	return 0
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Dev    uint32 `protobuf:"varint,2,opt,name=dev,proto3" json:"dev,omitempty"`
	Qid    *Tqid  `protobuf:"bytes,3,opt,name=qid,proto3" json:"qid,omitempty"`
	Mode   uint32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Atime  uint32 `protobuf:"varint,5,opt,name=atime,proto3" json:"atime,omitempty"`   // last access time in seconds
	Mtime  uint32 `protobuf:"varint,6,opt,name=mtime,proto3" json:"mtime,omitempty"`   // last modified time in seconds
	Length uint64 `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"` // file length in bytes
	Name   string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`      // file name
	Uid    string `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`        // owner name
	Gid    string `protobuf:"bytes,10,opt,name=gid,proto3" json:"gid,omitempty"`       // group name
	Muid   string `protobuf:"bytes,11,opt,name=muid,proto3" json:"muid,omitempty"`     // name of the last user that modified the file
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{1}
}

func (x *Stat) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Stat) GetDev() uint32 {
	if x != nil {
		return x.Dev
	}
	return 0
}

func (x *Stat) GetQid() *Tqid {
	if x != nil {
		return x.Qid
	}
	return nil
}

func (x *Stat) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Stat) GetAtime() uint32 {
	if x != nil {
		return x.Atime
	}
	return 0
}

func (x *Stat) GetMtime() uint32 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *Stat) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Stat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stat) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Stat) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *Stat) GetMuid() string {
	if x != nil {
		return x.Muid
	}
	return ""
}

type Taddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Net  string `protobuf:"bytes,2,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *Taddr) Reset() {
	*x = Taddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taddr) ProtoMessage() {}

func (x *Taddr) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taddr.ProtoReflect.Descriptor instead.
func (*Taddr) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{2}
}

func (x *Taddr) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Taddr) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

type Tmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   []*Taddr `protobuf:"bytes,1,rep,name=addr,proto3" json:"addr,omitempty"`
	Root   string   `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	PubKey []byte   `protobuf:"bytes,4,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (x *Tmount) Reset() {
	*x = Tmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tmount) ProtoMessage() {}

func (x *Tmount) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tmount.ProtoReflect.Descriptor instead.
func (*Tmount) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{3}
}

func (x *Tmount) GetAddr() []*Taddr {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *Tmount) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Tmount) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

type TfenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathName string `protobuf:"bytes,1,opt,name=pathName,proto3" json:"pathName,omitempty"`
	Epoch    uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Seqno    uint64 `protobuf:"varint,3,opt,name=seqno,proto3" json:"seqno,omitempty"`
}

func (x *TfenceProto) Reset() {
	*x = TfenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfenceProto) ProtoMessage() {}

func (x *TfenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfenceProto.ProtoReflect.Descriptor instead.
func (*TfenceProto) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{4}
}

func (x *TfenceProto) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *TfenceProto) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TfenceProto) GetSeqno() uint64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

type Tversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msize   uint32 `protobuf:"varint,1,opt,name=msize,proto3" json:"msize,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Tversion) Reset() {
	*x = Tversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tversion) ProtoMessage() {}

func (x *Tversion) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tversion.ProtoReflect.Descriptor instead.
func (*Tversion) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{5}
}

func (x *Tversion) GetMsize() uint32 {
	if x != nil {
		return x.Msize
	}
	return 0
}

func (x *Tversion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Rversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msize   uint32 `protobuf:"varint,1,opt,name=msize,proto3" json:"msize,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Rversion) Reset() {
	*x = Rversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rversion) ProtoMessage() {}

func (x *Rversion) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rversion.ProtoReflect.Descriptor instead.
func (*Rversion) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{6}
}

func (x *Rversion) GetMsize() uint32 {
	if x != nil {
		return x.Msize
	}
	return 0
}

func (x *Rversion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Tauth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afid   uint32   `protobuf:"varint,1,opt,name=afid,proto3" json:"afid,omitempty"`
	Unames []string `protobuf:"bytes,2,rep,name=Unames,proto3" json:"Unames,omitempty"`
	Anames []string `protobuf:"bytes,3,rep,name=Anames,proto3" json:"Anames,omitempty"`
}

func (x *Tauth) Reset() {
	*x = Tauth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tauth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tauth) ProtoMessage() {}

func (x *Tauth) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tauth.ProtoReflect.Descriptor instead.
func (*Tauth) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{7}
}

func (x *Tauth) GetAfid() uint32 {
	if x != nil {
		return x.Afid
	}
	return 0
}

func (x *Tauth) GetUnames() []string {
	if x != nil {
		return x.Unames
	}
	return nil
}

func (x *Tauth) GetAnames() []string {
	if x != nil {
		return x.Anames
	}
	return nil
}

type Rauth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aqid *Tqid `protobuf:"bytes,1,opt,name=aqid,proto3" json:"aqid,omitempty"`
}

func (x *Rauth) Reset() {
	*x = Rauth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rauth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rauth) ProtoMessage() {}

func (x *Rauth) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rauth.ProtoReflect.Descriptor instead.
func (*Rauth) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{8}
}

func (x *Rauth) GetAqid() *Tqid {
	if x != nil {
		return x.Aqid
	}
	return nil
}

type Tattach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid    uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Afid   uint32 `protobuf:"varint,2,opt,name=afid,proto3" json:"afid,omitempty"`
	Uname  string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	Aname  string `protobuf:"bytes,4,opt,name=aname,proto3" json:"aname,omitempty"`
	ClntId uint64 `protobuf:"varint,5,opt,name=clntId,proto3" json:"clntId,omitempty"`
}

func (x *Tattach) Reset() {
	*x = Tattach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tattach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tattach) ProtoMessage() {}

func (x *Tattach) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tattach.ProtoReflect.Descriptor instead.
func (*Tattach) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{9}
}

func (x *Tattach) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tattach) GetAfid() uint32 {
	if x != nil {
		return x.Afid
	}
	return 0
}

func (x *Tattach) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *Tattach) GetAname() string {
	if x != nil {
		return x.Aname
	}
	return ""
}

func (x *Tattach) GetClntId() uint64 {
	if x != nil {
		return x.ClntId
	}
	return 0
}

type Rattach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qid *Tqid `protobuf:"bytes,1,opt,name=qid,proto3" json:"qid,omitempty"`
}

func (x *Rattach) Reset() {
	*x = Rattach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rattach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rattach) ProtoMessage() {}

func (x *Rattach) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rattach.ProtoReflect.Descriptor instead.
func (*Rattach) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{10}
}

func (x *Rattach) GetQid() *Tqid {
	if x != nil {
		return x.Qid
	}
	return nil
}

type Rerror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Obj     string `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *Rerror) Reset() {
	*x = Rerror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rerror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rerror) ProtoMessage() {}

func (x *Rerror) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rerror.ProtoReflect.Descriptor instead.
func (*Rerror) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{11}
}

func (x *Rerror) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *Rerror) GetObj() string {
	if x != nil {
		return x.Obj
	}
	return ""
}

func (x *Rerror) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Twalk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid    uint32   `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	NewFid uint32   `protobuf:"varint,2,opt,name=newFid,proto3" json:"newFid,omitempty"`
	Wnames []string `protobuf:"bytes,3,rep,name=wnames,proto3" json:"wnames,omitempty"`
}

func (x *Twalk) Reset() {
	*x = Twalk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Twalk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Twalk) ProtoMessage() {}

func (x *Twalk) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Twalk.ProtoReflect.Descriptor instead.
func (*Twalk) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{12}
}

func (x *Twalk) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Twalk) GetNewFid() uint32 {
	if x != nil {
		return x.NewFid
	}
	return 0
}

func (x *Twalk) GetWnames() []string {
	if x != nil {
		return x.Wnames
	}
	return nil
}

type Rwalk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qids []*Tqid `protobuf:"bytes,1,rep,name=qids,proto3" json:"qids,omitempty"`
}

func (x *Rwalk) Reset() {
	*x = Rwalk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rwalk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rwalk) ProtoMessage() {}

func (x *Rwalk) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rwalk.ProtoReflect.Descriptor instead.
func (*Rwalk) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{13}
}

func (x *Rwalk) GetQids() []*Tqid {
	if x != nil {
		return x.Qids
	}
	return nil
}

type Topen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid  uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *Topen) Reset() {
	*x = Topen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topen) ProtoMessage() {}

func (x *Topen) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topen.ProtoReflect.Descriptor instead.
func (*Topen) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{14}
}

func (x *Topen) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Topen) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type Ropen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qid    *Tqid  `protobuf:"bytes,1,opt,name=qid,proto3" json:"qid,omitempty"`
	Iounit uint32 `protobuf:"varint,2,opt,name=iounit,proto3" json:"iounit,omitempty"`
}

func (x *Ropen) Reset() {
	*x = Ropen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ropen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ropen) ProtoMessage() {}

func (x *Ropen) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ropen.ProtoReflect.Descriptor instead.
func (*Ropen) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{15}
}

func (x *Ropen) GetQid() *Tqid {
	if x != nil {
		return x.Qid
	}
	return nil
}

func (x *Ropen) GetIounit() uint32 {
	if x != nil {
		return x.Iounit
	}
	return 0
}

type Tcreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid   uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Name  string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Perm  uint32       `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
	Mode  uint32       `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Lease uint64       `protobuf:"varint,5,opt,name=lease,proto3" json:"lease,omitempty"`
	Fence *TfenceProto `protobuf:"bytes,6,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Tcreate) Reset() {
	*x = Tcreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tcreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tcreate) ProtoMessage() {}

func (x *Tcreate) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tcreate.ProtoReflect.Descriptor instead.
func (*Tcreate) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{16}
}

func (x *Tcreate) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tcreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tcreate) GetPerm() uint32 {
	if x != nil {
		return x.Perm
	}
	return 0
}

func (x *Tcreate) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Tcreate) GetLease() uint64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *Tcreate) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rcreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qid    *Tqid  `protobuf:"bytes,1,opt,name=qid,proto3" json:"qid,omitempty"`
	Iounit uint32 `protobuf:"varint,2,opt,name=iounit,proto3" json:"iounit,omitempty"`
}

func (x *Rcreate) Reset() {
	*x = Rcreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rcreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rcreate) ProtoMessage() {}

func (x *Rcreate) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rcreate.ProtoReflect.Descriptor instead.
func (*Rcreate) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{17}
}

func (x *Rcreate) GetQid() *Tqid {
	if x != nil {
		return x.Qid
	}
	return nil
}

func (x *Rcreate) GetIounit() uint32 {
	if x != nil {
		return x.Iounit
	}
	return 0
}

type TreadF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid    uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Offset uint64       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  uint32       `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Fence  *TfenceProto `protobuf:"bytes,4,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *TreadF) Reset() {
	*x = TreadF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreadF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreadF) ProtoMessage() {}

func (x *TreadF) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreadF.ProtoReflect.Descriptor instead.
func (*TreadF) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{18}
}

func (x *TreadF) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *TreadF) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TreadF) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TreadF) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rread) Reset() {
	*x = Rread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rread) ProtoMessage() {}

func (x *Rread) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rread.ProtoReflect.Descriptor instead.
func (*Rread) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{19}
}

type TwriteF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid    uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Offset uint64       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fence  *TfenceProto `protobuf:"bytes,3,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *TwriteF) Reset() {
	*x = TwriteF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwriteF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwriteF) ProtoMessage() {}

func (x *TwriteF) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwriteF.ProtoReflect.Descriptor instead.
func (*TwriteF) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{20}
}

func (x *TwriteF) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *TwriteF) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TwriteF) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Rwrite) Reset() {
	*x = Rwrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rwrite) ProtoMessage() {}

func (x *Rwrite) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rwrite.ProtoReflect.Descriptor instead.
func (*Rwrite) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{21}
}

func (x *Rwrite) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Tclunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (x *Tclunk) Reset() {
	*x = Tclunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tclunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tclunk) ProtoMessage() {}

func (x *Tclunk) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tclunk.ProtoReflect.Descriptor instead.
func (*Tclunk) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{22}
}

func (x *Tclunk) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

type Rclunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rclunk) Reset() {
	*x = Rclunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rclunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rclunk) ProtoMessage() {}

func (x *Rclunk) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rclunk.ProtoReflect.Descriptor instead.
func (*Rclunk) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{23}
}

type Tremove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid   uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Fence *TfenceProto `protobuf:"bytes,2,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Tremove) Reset() {
	*x = Tremove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tremove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tremove) ProtoMessage() {}

func (x *Tremove) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tremove.ProtoReflect.Descriptor instead.
func (*Tremove) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{24}
}

func (x *Tremove) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tremove) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rremove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rremove) Reset() {
	*x = Rremove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rremove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rremove) ProtoMessage() {}

func (x *Rremove) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rremove.ProtoReflect.Descriptor instead.
func (*Rremove) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{25}
}

type Tstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (x *Tstat) Reset() {
	*x = Tstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tstat) ProtoMessage() {}

func (x *Tstat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tstat.ProtoReflect.Descriptor instead.
func (*Tstat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{26}
}

func (x *Tstat) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

type Rstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat *Stat `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *Rstat) Reset() {
	*x = Rstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rstat) ProtoMessage() {}

func (x *Rstat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rstat.ProtoReflect.Descriptor instead.
func (*Rstat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{27}
}

func (x *Rstat) GetStat() *Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type Twstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid   uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Stat  *Stat        `protobuf:"bytes,2,opt,name=stat,proto3" json:"stat,omitempty"`
	Fence *TfenceProto `protobuf:"bytes,3,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Twstat) Reset() {
	*x = Twstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Twstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Twstat) ProtoMessage() {}

func (x *Twstat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Twstat.ProtoReflect.Descriptor instead.
func (*Twstat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{28}
}

func (x *Twstat) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Twstat) GetStat() *Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *Twstat) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rwstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rwstat) Reset() {
	*x = Rwstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rwstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rwstat) ProtoMessage() {}

func (x *Rwstat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rwstat.ProtoReflect.Descriptor instead.
func (*Rwstat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{29}
}

type Twatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (x *Twatch) Reset() {
	*x = Twatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Twatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Twatch) ProtoMessage() {}

func (x *Twatch) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Twatch.ProtoReflect.Descriptor instead.
func (*Twatch) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{30}
}

func (x *Twatch) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

type Trenameat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldFid  uint32       `protobuf:"varint,1,opt,name=oldFid,proto3" json:"oldFid,omitempty"`
	OldName string       `protobuf:"bytes,2,opt,name=oldName,proto3" json:"oldName,omitempty"`
	NewFid  uint32       `protobuf:"varint,3,opt,name=newFid,proto3" json:"newFid,omitempty"`
	NewName string       `protobuf:"bytes,4,opt,name=newName,proto3" json:"newName,omitempty"`
	Fence   *TfenceProto `protobuf:"bytes,5,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Trenameat) Reset() {
	*x = Trenameat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trenameat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trenameat) ProtoMessage() {}

func (x *Trenameat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trenameat.ProtoReflect.Descriptor instead.
func (*Trenameat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{31}
}

func (x *Trenameat) GetOldFid() uint32 {
	if x != nil {
		return x.OldFid
	}
	return 0
}

func (x *Trenameat) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *Trenameat) GetNewFid() uint32 {
	if x != nil {
		return x.NewFid
	}
	return 0
}

func (x *Trenameat) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *Trenameat) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Rrenameat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rrenameat) Reset() {
	*x = Rrenameat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rrenameat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rrenameat) ProtoMessage() {}

func (x *Rrenameat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rrenameat.ProtoReflect.Descriptor instead.
func (*Rrenameat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{32}
}

type Tgetfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid     uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Mode    uint32       `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Offset  uint64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Count   uint32       `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Wnames  []string     `protobuf:"bytes,5,rep,name=wnames,proto3" json:"wnames,omitempty"`
	Resolve bool         `protobuf:"varint,6,opt,name=resolve,proto3" json:"resolve,omitempty"`
	Fence   *TfenceProto `protobuf:"bytes,7,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Tgetfile) Reset() {
	*x = Tgetfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tgetfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tgetfile) ProtoMessage() {}

func (x *Tgetfile) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tgetfile.ProtoReflect.Descriptor instead.
func (*Tgetfile) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{33}
}

func (x *Tgetfile) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tgetfile) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Tgetfile) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Tgetfile) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Tgetfile) GetWnames() []string {
	if x != nil {
		return x.Wnames
	}
	return nil
}

func (x *Tgetfile) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

func (x *Tgetfile) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Tputfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid     uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Mode    uint32       `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Perm    uint32       `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
	Offset  uint64       `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Wnames  []string     `protobuf:"bytes,5,rep,name=Wnames,proto3" json:"Wnames,omitempty"`
	Resolve bool         `protobuf:"varint,6,opt,name=resolve,proto3" json:"resolve,omitempty"`
	Lease   uint64       `protobuf:"varint,7,opt,name=lease,proto3" json:"lease,omitempty"`
	Fence   *TfenceProto `protobuf:"bytes,8,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Tputfile) Reset() {
	*x = Tputfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tputfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tputfile) ProtoMessage() {}

func (x *Tputfile) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tputfile.ProtoReflect.Descriptor instead.
func (*Tputfile) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{34}
}

func (x *Tputfile) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tputfile) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Tputfile) GetPerm() uint32 {
	if x != nil {
		return x.Perm
	}
	return 0
}

func (x *Tputfile) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Tputfile) GetWnames() []string {
	if x != nil {
		return x.Wnames
	}
	return nil
}

func (x *Tputfile) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

func (x *Tputfile) GetLease() uint64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *Tputfile) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Tdetach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClntId uint64 `protobuf:"varint,1,opt,name=clntId,proto3" json:"clntId,omitempty"`
}

func (x *Tdetach) Reset() {
	*x = Tdetach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tdetach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tdetach) ProtoMessage() {}

func (x *Tdetach) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tdetach.ProtoReflect.Descriptor instead.
func (*Tdetach) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{35}
}

func (x *Tdetach) GetClntId() uint64 {
	if x != nil {
		return x.ClntId
	}
	return 0
}

type Rdetach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rdetach) Reset() {
	*x = Rdetach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rdetach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rdetach) ProtoMessage() {}

func (x *Rdetach) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rdetach.ProtoReflect.Descriptor instead.
func (*Rdetach) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{36}
}

type Theartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSide bool            `protobuf:"varint,1,opt,name=serverSide,proto3" json:"serverSide,omitempty"`
	Sids       map[uint64]bool `protobuf:"bytes,2,rep,name=sids,proto3" json:"sids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Theartbeat) Reset() {
	*x = Theartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Theartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Theartbeat) ProtoMessage() {}

func (x *Theartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Theartbeat.ProtoReflect.Descriptor instead.
func (*Theartbeat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{37}
}

func (x *Theartbeat) GetServerSide() bool {
	if x != nil {
		return x.ServerSide
	}
	return false
}

func (x *Theartbeat) GetSids() map[uint64]bool {
	if x != nil {
		return x.Sids
	}
	return nil
}

type Rheartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sids map[uint64]bool `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Rheartbeat) Reset() {
	*x = Rheartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rheartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rheartbeat) ProtoMessage() {}

func (x *Rheartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rheartbeat.ProtoReflect.Descriptor instead.
func (*Rheartbeat) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{38}
}

func (x *Rheartbeat) GetSids() map[uint64]bool {
	if x != nil {
		return x.Sids
	}
	return nil
}

type Tremovefile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid     uint32       `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Wnames  []string     `protobuf:"bytes,2,rep,name=Wnames,proto3" json:"Wnames,omitempty"`
	Resolve bool         `protobuf:"varint,3,opt,name=resolve,proto3" json:"resolve,omitempty"`
	Fence   *TfenceProto `protobuf:"bytes,4,opt,name=fence,proto3" json:"fence,omitempty"`
}

func (x *Tremovefile) Reset() {
	*x = Tremovefile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tremovefile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tremovefile) ProtoMessage() {}

func (x *Tremovefile) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tremovefile.ProtoReflect.Descriptor instead.
func (*Tremovefile) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{39}
}

func (x *Tremovefile) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *Tremovefile) GetWnames() []string {
	if x != nil {
		return x.Wnames
	}
	return nil
}

func (x *Tremovefile) GetResolve() bool {
	if x != nil {
		return x.Resolve
	}
	return false
}

func (x *Tremovefile) GetFence() *TfenceProto {
	if x != nil {
		return x.Fence
	}
	return nil
}

type Twriteread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid uint32 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (x *Twriteread) Reset() {
	*x = Twriteread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigmap_sigmap_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Twriteread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Twriteread) ProtoMessage() {}

func (x *Twriteread) ProtoReflect() protoreflect.Message {
	mi := &file_sigmap_sigmap_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Twriteread.ProtoReflect.Descriptor instead.
func (*Twriteread) Descriptor() ([]byte, []int) {
	return file_sigmap_sigmap_proto_rawDescGZIP(), []int{40}
}

func (x *Twriteread) GetFid() uint32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

var File_sigmap_sigmap_proto protoreflect.FileDescriptor

var file_sigmap_sigmap_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x2f, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x04, 0x54, 0x71, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xe9, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x17,
	0x0a, 0x03, 0x71, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x71,
	0x69, 0x64, 0x52, 0x03, 0x71, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x75, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x05, 0x54,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x22, 0x50, 0x0a, 0x06, 0x54, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x55, 0x0a, 0x0b,
	0x54, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x6e, 0x6f, 0x22, 0x3a, 0x0a, 0x08, 0x54, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3a, 0x0a, 0x08, 0x52, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x05, 0x54,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x61, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x05, 0x52, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x04, 0x61, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x54, 0x71, 0x69, 0x64, 0x52, 0x04, 0x61, 0x71, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x07,
	0x54, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x66, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x22, 0x0a, 0x07, 0x52, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x03,
	0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x71, 0x69, 0x64,
	0x52, 0x03, 0x71, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x06, 0x52, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x6a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x49, 0x0a,
	0x05, 0x54, 0x77, 0x61, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x46,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x05, 0x52, 0x77, 0x61, 0x6c,
	0x6b, 0x12, 0x19, 0x0a, 0x04, 0x71, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x54, 0x71, 0x69, 0x64, 0x52, 0x04, 0x71, 0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x05,
	0x54, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x05, 0x52,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x03, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x54, 0x71, 0x69, 0x64, 0x52, 0x03, 0x71, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x6f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x54, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x07, 0x52, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x03, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x54, 0x71, 0x69, 0x64, 0x52, 0x03, 0x71, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x6f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x06, 0x54, 0x72, 0x65, 0x61, 0x64, 0x46, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x52, 0x72, 0x65, 0x61, 0x64, 0x22, 0x57, 0x0a, 0x07,
	0x54, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x52, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x06, 0x54, 0x63, 0x6c, 0x75, 0x6e, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69,
	0x64, 0x22, 0x08, 0x0a, 0x06, 0x52, 0x63, 0x6c, 0x75, 0x6e, 0x6b, 0x22, 0x3f, 0x0a, 0x07, 0x54,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x09, 0x0a, 0x07,
	0x52, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x19, 0x0a, 0x05, 0x54, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66,
	0x69, 0x64, 0x22, 0x22, 0x0a, 0x05, 0x52, 0x73, 0x74, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x22, 0x59, 0x0a, 0x06, 0x54, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x22, 0x0a,
	0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x08, 0x0a, 0x06, 0x52, 0x77, 0x73, 0x74, 0x61, 0x74, 0x22, 0x1a, 0x0a, 0x06, 0x54,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x46, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x0b, 0x0a,
	0x09, 0x52, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x54,
	0x67, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x54, 0x70, 0x75, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x07,
	0x54, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x09, 0x0a, 0x07, 0x52, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x54,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x2e, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a,
	0x0a, 0x52, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x75, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x05, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x54, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x66, 0x69, 0x64, 0x42, 0x10, 0x5a, 0x0e, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x6f,
	0x73, 0x2f, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sigmap_sigmap_proto_rawDescOnce sync.Once
	file_sigmap_sigmap_proto_rawDescData = file_sigmap_sigmap_proto_rawDesc
)

func file_sigmap_sigmap_proto_rawDescGZIP() []byte {
	file_sigmap_sigmap_proto_rawDescOnce.Do(func() {
		file_sigmap_sigmap_proto_rawDescData = protoimpl.X.CompressGZIP(file_sigmap_sigmap_proto_rawDescData)
	})
	return file_sigmap_sigmap_proto_rawDescData
}

var file_sigmap_sigmap_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_sigmap_sigmap_proto_goTypes = []interface{}{
	(*Tqid)(nil),        // 0: Tqid
	(*Stat)(nil),        // 1: Stat
	(*Taddr)(nil),       // 2: Taddr
	(*Tmount)(nil),      // 3: Tmount
	(*TfenceProto)(nil), // 4: TfenceProto
	(*Tversion)(nil),    // 5: Tversion
	(*Rversion)(nil),    // 6: Rversion
	(*Tauth)(nil),       // 7: Tauth
	(*Rauth)(nil),       // 8: Rauth
	(*Tattach)(nil),     // 9: Tattach
	(*Rattach)(nil),     // 10: Rattach
	(*Rerror)(nil),      // 11: Rerror
	(*Twalk)(nil),       // 12: Twalk
	(*Rwalk)(nil),       // 13: Rwalk
	(*Topen)(nil),       // 14: Topen
	(*Ropen)(nil),       // 15: Ropen
	(*Tcreate)(nil),     // 16: Tcreate
	(*Rcreate)(nil),     // 17: Rcreate
	(*TreadF)(nil),      // 18: TreadF
	(*Rread)(nil),       // 19: Rread
	(*TwriteF)(nil),     // 20: TwriteF
	(*Rwrite)(nil),      // 21: Rwrite
	(*Tclunk)(nil),      // 22: Tclunk
	(*Rclunk)(nil),      // 23: Rclunk
	(*Tremove)(nil),     // 24: Tremove
	(*Rremove)(nil),     // 25: Rremove
	(*Tstat)(nil),       // 26: Tstat
	(*Rstat)(nil),       // 27: Rstat
	(*Twstat)(nil),      // 28: Twstat
	(*Rwstat)(nil),      // 29: Rwstat
	(*Twatch)(nil),      // 30: Twatch
	(*Trenameat)(nil),   // 31: Trenameat
	(*Rrenameat)(nil),   // 32: Rrenameat
	(*Tgetfile)(nil),    // 33: Tgetfile
	(*Tputfile)(nil),    // 34: Tputfile
	(*Tdetach)(nil),     // 35: Tdetach
	(*Rdetach)(nil),     // 36: Rdetach
	(*Theartbeat)(nil),  // 37: Theartbeat
	(*Rheartbeat)(nil),  // 38: Rheartbeat
	(*Tremovefile)(nil), // 39: Tremovefile
	(*Twriteread)(nil),  // 40: Twriteread
	nil,                 // 41: Theartbeat.SidsEntry
	nil,                 // 42: Rheartbeat.SidsEntry
}
var file_sigmap_sigmap_proto_depIdxs = []int32{
	0,  // 0: Stat.qid:type_name -> Tqid
	2,  // 1: Tmount.addr:type_name -> Taddr
	0,  // 2: Rauth.aqid:type_name -> Tqid
	0,  // 3: Rattach.qid:type_name -> Tqid
	0,  // 4: Rwalk.qids:type_name -> Tqid
	0,  // 5: Ropen.qid:type_name -> Tqid
	4,  // 6: Tcreate.fence:type_name -> TfenceProto
	0,  // 7: Rcreate.qid:type_name -> Tqid
	4,  // 8: TreadF.fence:type_name -> TfenceProto
	4,  // 9: TwriteF.fence:type_name -> TfenceProto
	4,  // 10: Tremove.fence:type_name -> TfenceProto
	1,  // 11: Rstat.stat:type_name -> Stat
	1,  // 12: Twstat.stat:type_name -> Stat
	4,  // 13: Twstat.fence:type_name -> TfenceProto
	4,  // 14: Trenameat.fence:type_name -> TfenceProto
	4,  // 15: Tgetfile.fence:type_name -> TfenceProto
	4,  // 16: Tputfile.fence:type_name -> TfenceProto
	41, // 17: Theartbeat.sids:type_name -> Theartbeat.SidsEntry
	42, // 18: Rheartbeat.sids:type_name -> Rheartbeat.SidsEntry
	4,  // 19: Tremovefile.fence:type_name -> TfenceProto
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_sigmap_sigmap_proto_init() }
func file_sigmap_sigmap_proto_init() {
	if File_sigmap_sigmap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sigmap_sigmap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tqid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tauth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rauth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tattach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rattach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rerror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Twalk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rwalk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ropen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tcreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rcreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreadF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwriteF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rwrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tclunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rclunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tremove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rremove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Twstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rwstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Twatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trenameat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rrenameat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tgetfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tputfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tdetach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rdetach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Theartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rheartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tremovefile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sigmap_sigmap_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Twriteread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sigmap_sigmap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sigmap_sigmap_proto_goTypes,
		DependencyIndexes: file_sigmap_sigmap_proto_depIdxs,
		MessageInfos:      file_sigmap_sigmap_proto_msgTypes,
	}.Build()
	File_sigmap_sigmap_proto = out.File
	file_sigmap_sigmap_proto_rawDesc = nil
	file_sigmap_sigmap_proto_goTypes = nil
	file_sigmap_sigmap_proto_depIdxs = nil
}
